/*! For license information please see main.js.LICENSE.txt */
(()=>{var e={924:(e,t,n)=>{"use strict";var r=n(210),i=n(559),a=i(r("String.prototype.indexOf"));e.exports=function(e,t){var n=r(e,!!t);return"function"==typeof n&&a(e,".prototype.")>-1?i(n):n}},559:(e,t,n)=>{"use strict";var r=n(612),i=n(210),a=n(771),o=i("%TypeError%"),s=i("%Function.prototype.apply%"),c=i("%Function.prototype.call%"),l=i("%Reflect.apply%",!0)||r.call(c,s),d=i("%Object.defineProperty%",!0),f=i("%Math.max%");if(d)try{d({},"a",{value:1})}catch(e){d=null}e.exports=function(e){if("function"!=typeof e)throw new o("a function is required");var t=l(r,c,arguments);return a(t,1+f(0,e.length-(arguments.length-1)),!0)};var u=function(){return l(r,s,arguments)};d?d(e.exports,"apply",{value:u}):e.exports.apply=u},296:(e,t,n)=>{"use strict";var r=n(44)(),i=n(210),a=r&&i("%Object.defineProperty%",!0);if(a)try{a({},"a",{value:1})}catch(e){a=!1}var o=i("%SyntaxError%"),s=i("%TypeError%"),c=n(275);e.exports=function(e,t,n){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new s("`obj` must be an object or a function`");if("string"!=typeof t&&"symbol"!=typeof t)throw new s("`property` must be a string or a symbol`");if(arguments.length>3&&"boolean"!=typeof arguments[3]&&null!==arguments[3])throw new s("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&"boolean"!=typeof arguments[4]&&null!==arguments[4])throw new s("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&"boolean"!=typeof arguments[5]&&null!==arguments[5])throw new s("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&"boolean"!=typeof arguments[6])throw new s("`loose`, if provided, must be a boolean");var r=arguments.length>3?arguments[3]:null,i=arguments.length>4?arguments[4]:null,l=arguments.length>5?arguments[5]:null,d=arguments.length>6&&arguments[6],f=!!c&&c(e,t);if(a)a(e,t,{configurable:null===l&&f?f.configurable:!l,enumerable:null===r&&f?f.enumerable:!r,value:n,writable:null===i&&f?f.writable:!i});else{if(!d&&(r||i||l))throw new o("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");e[t]=n}}},648:e=>{"use strict";var t=Object.prototype.toString,n=Math.max,r=function(e,t){for(var n=[],r=0;r<e.length;r+=1)n[r]=e[r];for(var i=0;i<t.length;i+=1)n[i+e.length]=t[i];return n};e.exports=function(e){var i=this;if("function"!=typeof i||"[object Function]"!==t.apply(i))throw new TypeError("Function.prototype.bind called on incompatible "+i);for(var a,o=function(e,t){for(var n=[],r=1,i=0;r<e.length;r+=1,i+=1)n[i]=e[r];return n}(arguments),s=n(0,i.length-o.length),c=[],l=0;l<s;l++)c[l]="$"+l;if(a=Function("binder","return function ("+function(e,t){for(var n="",r=0;r<e.length;r+=1)n+=e[r],r+1<e.length&&(n+=",");return n}(c)+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof a){var t=i.apply(this,r(o,arguments));return Object(t)===t?t:this}return i.apply(e,r(o,arguments))})),i.prototype){var d=function(){};d.prototype=i.prototype,a.prototype=new d,d.prototype=null}return a}},612:(e,t,n)=>{"use strict";var r=n(648);e.exports=Function.prototype.bind||r},210:(e,t,n)=>{"use strict";var r,i=SyntaxError,a=Function,o=TypeError,s=function(e){try{return a('"use strict"; return ('+e+").constructor;")()}catch(e){}},c=Object.getOwnPropertyDescriptor;if(c)try{c({},"")}catch(e){c=null}var l=function(){throw new o},d=c?function(){try{return l}catch(e){try{return c(arguments,"callee").get}catch(e){return l}}}():l,f=n(405)(),u=n(185)(),p=Object.getPrototypeOf||(u?function(e){return e.__proto__}:null),h={},m="undefined"!=typeof Uint8Array&&p?p(Uint8Array):r,y={"%AggregateError%":"undefined"==typeof AggregateError?r:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?r:ArrayBuffer,"%ArrayIteratorPrototype%":f&&p?p([][Symbol.iterator]()):r,"%AsyncFromSyncIteratorPrototype%":r,"%AsyncFunction%":h,"%AsyncGenerator%":h,"%AsyncGeneratorFunction%":h,"%AsyncIteratorPrototype%":h,"%Atomics%":"undefined"==typeof Atomics?r:Atomics,"%BigInt%":"undefined"==typeof BigInt?r:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?r:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?r:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?r:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?r:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?r:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?r:FinalizationRegistry,"%Function%":a,"%GeneratorFunction%":h,"%Int8Array%":"undefined"==typeof Int8Array?r:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?r:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?r:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":f&&p?p(p([][Symbol.iterator]())):r,"%JSON%":"object"==typeof JSON?JSON:r,"%Map%":"undefined"==typeof Map?r:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&f&&p?p((new Map)[Symbol.iterator]()):r,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?r:Promise,"%Proxy%":"undefined"==typeof Proxy?r:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?r:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?r:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&f&&p?p((new Set)[Symbol.iterator]()):r,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?r:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":f&&p?p(""[Symbol.iterator]()):r,"%Symbol%":f?Symbol:r,"%SyntaxError%":i,"%ThrowTypeError%":d,"%TypedArray%":m,"%TypeError%":o,"%Uint8Array%":"undefined"==typeof Uint8Array?r:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?r:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?r:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?r:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?r:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?r:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?r:WeakSet};if(p)try{null.error}catch(e){var w=p(p(e));y["%Error.prototype%"]=w}var g=function e(t){var n;if("%AsyncFunction%"===t)n=s("async function () {}");else if("%GeneratorFunction%"===t)n=s("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=s("async function* () {}");else if("%AsyncGenerator%"===t){var r=e("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===t){var i=e("%AsyncGenerator%");i&&p&&(n=p(i.prototype))}return y[t]=n,n},b={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},x=n(612),v=n(824),_=x.call(Function.call,Array.prototype.concat),k=x.call(Function.apply,Array.prototype.splice),S=x.call(Function.call,String.prototype.replace),A=x.call(Function.call,String.prototype.slice),z=x.call(Function.call,RegExp.prototype.exec),E=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,j=/\\(\\)?/g,D=function(e,t){var n,r=e;if(v(b,r)&&(r="%"+(n=b[r])[0]+"%"),v(y,r)){var a=y[r];if(a===h&&(a=g(r)),void 0===a&&!t)throw new o("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:r,value:a}}throw new i("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new o("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new o('"allowMissing" argument must be a boolean');if(null===z(/^%?[^%]*%?$/,e))throw new i("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=function(e){var t=A(e,0,1),n=A(e,-1);if("%"===t&&"%"!==n)throw new i("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new i("invalid intrinsic syntax, expected opening `%`");var r=[];return S(e,E,(function(e,t,n,i){r[r.length]=n?S(i,j,"$1"):t||e})),r}(e),r=n.length>0?n[0]:"",a=D("%"+r+"%",t),s=a.name,l=a.value,d=!1,f=a.alias;f&&(r=f[0],k(n,_([0,1],f)));for(var u=1,p=!0;u<n.length;u+=1){var h=n[u],m=A(h,0,1),w=A(h,-1);if(('"'===m||"'"===m||"`"===m||'"'===w||"'"===w||"`"===w)&&m!==w)throw new i("property names with quotes must have matching quotes");if("constructor"!==h&&p||(d=!0),v(y,s="%"+(r+="."+h)+"%"))l=y[s];else if(null!=l){if(!(h in l)){if(!t)throw new o("base intrinsic for "+e+" exists, but the property is not available.");return}if(c&&u+1>=n.length){var g=c(l,h);l=(p=!!g)&&"get"in g&&!("originalValue"in g.get)?g.get:l[h]}else p=v(l,h),l=l[h];p&&!d&&(y[s]=l)}}return l}},275:(e,t,n)=>{"use strict";var r=n(210)("%Object.getOwnPropertyDescriptor%",!0);if(r)try{r([],"length")}catch(e){r=null}e.exports=r},44:(e,t,n)=>{"use strict";var r=n(210)("%Object.defineProperty%",!0),i=function(){if(r)try{return r({},"a",{value:1}),!0}catch(e){return!1}return!1};i.hasArrayLengthDefineBug=function(){if(!i())return null;try{return 1!==r([],"length",{value:1}).length}catch(e){return!0}},e.exports=i},185:e=>{"use strict";var t={foo:{}},n=Object;e.exports=function(){return{__proto__:t}.foo===t.foo&&!({__proto__:null}instanceof n)}},405:(e,t,n)=>{"use strict";var r="undefined"!=typeof Symbol&&Symbol,i=n(419);e.exports=function(){return"function"==typeof r&&"function"==typeof Symbol&&"symbol"==typeof r("foo")&&"symbol"==typeof Symbol("bar")&&i()}},419:e=>{"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var r=Object.getOwnPropertySymbols(e);if(1!==r.length||r[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(e,t);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},824:(e,t,n)=>{"use strict";var r=Function.prototype.call,i=Object.prototype.hasOwnProperty,a=n(612);e.exports=a.call(r,i)},344:(e,t,n)=>{"use strict";n.r(t)},631:(e,t,n)=>{var r="function"==typeof Map&&Map.prototype,i=Object.getOwnPropertyDescriptor&&r?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,a=r&&i&&"function"==typeof i.get?i.get:null,o=r&&Map.prototype.forEach,s="function"==typeof Set&&Set.prototype,c=Object.getOwnPropertyDescriptor&&s?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,l=s&&c&&"function"==typeof c.get?c.get:null,d=s&&Set.prototype.forEach,f="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,u="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,p="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,h=Boolean.prototype.valueOf,m=Object.prototype.toString,y=Function.prototype.toString,w=String.prototype.match,g=String.prototype.slice,b=String.prototype.replace,x=String.prototype.toUpperCase,v=String.prototype.toLowerCase,_=RegExp.prototype.test,k=Array.prototype.concat,S=Array.prototype.join,A=Array.prototype.slice,z=Math.floor,E="function"==typeof BigInt?BigInt.prototype.valueOf:null,j=Object.getOwnPropertySymbols,D="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,O="function"==typeof Symbol&&"object"==typeof Symbol.iterator,C="function"==typeof Symbol&&Symbol.toStringTag&&(Symbol.toStringTag,1)?Symbol.toStringTag:null,R=Object.prototype.propertyIsEnumerable,U=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(e){return e.__proto__}:null);function F(e,t){if(e===1/0||e===-1/0||e!=e||e&&e>-1e3&&e<1e3||_.call(/e/,t))return t;var n=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof e){var r=e<0?-z(-e):z(e);if(r!==e){var i=String(r),a=g.call(t,i.length+1);return b.call(i,n,"$&_")+"."+b.call(b.call(a,/([0-9]{3})/g,"$&_"),/_$/,"")}}return b.call(t,n,"$&_")}var W=n(654),I=W.custom,P=N(I)?I:null;function T(e,t,n){var r="double"===(n.quoteStyle||t)?'"':"'";return r+e+r}function q(e){return b.call(String(e),/"/g,"&quot;")}function L(e){return!("[object Array]"!==V(e)||C&&"object"==typeof e&&C in e)}function M(e){return!("[object RegExp]"!==V(e)||C&&"object"==typeof e&&C in e)}function N(e){if(O)return e&&"object"==typeof e&&e instanceof Symbol;if("symbol"==typeof e)return!0;if(!e||"object"!=typeof e||!D)return!1;try{return D.call(e),!0}catch(e){}return!1}e.exports=function e(t,r,i,s){var c=r||{};if(H(c,"quoteStyle")&&"single"!==c.quoteStyle&&"double"!==c.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(H(c,"maxStringLength")&&("number"==typeof c.maxStringLength?c.maxStringLength<0&&c.maxStringLength!==1/0:null!==c.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var m=!H(c,"customInspect")||c.customInspect;if("boolean"!=typeof m&&"symbol"!==m)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(H(c,"indent")&&null!==c.indent&&"\t"!==c.indent&&!(parseInt(c.indent,10)===c.indent&&c.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(H(c,"numericSeparator")&&"boolean"!=typeof c.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var x=c.numericSeparator;if(void 0===t)return"undefined";if(null===t)return"null";if("boolean"==typeof t)return t?"true":"false";if("string"==typeof t)return K(t,c);if("number"==typeof t){if(0===t)return 1/0/t>0?"0":"-0";var _=String(t);return x?F(t,_):_}if("bigint"==typeof t){var z=String(t)+"n";return x?F(t,z):z}var j=void 0===c.depth?5:c.depth;if(void 0===i&&(i=0),i>=j&&j>0&&"object"==typeof t)return L(t)?"[Array]":"[Object]";var I,B=function(e,t){var n;if("\t"===e.indent)n="\t";else{if(!("number"==typeof e.indent&&e.indent>0))return null;n=S.call(Array(e.indent+1)," ")}return{base:n,prev:S.call(Array(t+1),n)}}(c,i);if(void 0===s)s=[];else if(Z(s,t)>=0)return"[Circular]";function Y(t,n,r){if(n&&(s=A.call(s)).push(n),r){var a={depth:c.depth};return H(c,"quoteStyle")&&(a.quoteStyle=c.quoteStyle),e(t,a,i+1,s)}return e(t,c,i+1,s)}if("function"==typeof t&&!M(t)){var ee=function(e){if(e.name)return e.name;var t=w.call(y.call(e),/^function\s*([\w$]+)/);return t?t[1]:null}(t),te=Q(t,Y);return"[Function"+(ee?": "+ee:" (anonymous)")+"]"+(te.length>0?" { "+S.call(te,", ")+" }":"")}if(N(t)){var ne=O?b.call(String(t),/^(Symbol\(.*\))_[^)]*$/,"$1"):D.call(t);return"object"!=typeof t||O?ne:$(ne)}if((I=t)&&"object"==typeof I&&("undefined"!=typeof HTMLElement&&I instanceof HTMLElement||"string"==typeof I.nodeName&&"function"==typeof I.getAttribute)){for(var re="<"+v.call(String(t.nodeName)),ie=t.attributes||[],ae=0;ae<ie.length;ae++)re+=" "+ie[ae].name+"="+T(q(ie[ae].value),"double",c);return re+=">",t.childNodes&&t.childNodes.length&&(re+="..."),re+"</"+v.call(String(t.nodeName))+">"}if(L(t)){if(0===t.length)return"[]";var oe=Q(t,Y);return B&&!function(e){for(var t=0;t<e.length;t++)if(Z(e[t],"\n")>=0)return!1;return!0}(oe)?"["+J(oe,B)+"]":"[ "+S.call(oe,", ")+" ]"}if(function(e){return!("[object Error]"!==V(e)||C&&"object"==typeof e&&C in e)}(t)){var se=Q(t,Y);return"cause"in Error.prototype||!("cause"in t)||R.call(t,"cause")?0===se.length?"["+String(t)+"]":"{ ["+String(t)+"] "+S.call(se,", ")+" }":"{ ["+String(t)+"] "+S.call(k.call("[cause]: "+Y(t.cause),se),", ")+" }"}if("object"==typeof t&&m){if(P&&"function"==typeof t[P]&&W)return W(t,{depth:j-i});if("symbol"!==m&&"function"==typeof t.inspect)return t.inspect()}if(function(e){if(!a||!e||"object"!=typeof e)return!1;try{a.call(e);try{l.call(e)}catch(e){return!0}return e instanceof Map}catch(e){}return!1}(t)){var ce=[];return o&&o.call(t,(function(e,n){ce.push(Y(n,t,!0)+" => "+Y(e,t))})),X("Map",a.call(t),ce,B)}if(function(e){if(!l||!e||"object"!=typeof e)return!1;try{l.call(e);try{a.call(e)}catch(e){return!0}return e instanceof Set}catch(e){}return!1}(t)){var le=[];return d&&d.call(t,(function(e){le.push(Y(e,t))})),X("Set",l.call(t),le,B)}if(function(e){if(!f||!e||"object"!=typeof e)return!1;try{f.call(e,f);try{u.call(e,u)}catch(e){return!0}return e instanceof WeakMap}catch(e){}return!1}(t))return G("WeakMap");if(function(e){if(!u||!e||"object"!=typeof e)return!1;try{u.call(e,u);try{f.call(e,f)}catch(e){return!0}return e instanceof WeakSet}catch(e){}return!1}(t))return G("WeakSet");if(function(e){if(!p||!e||"object"!=typeof e)return!1;try{return p.call(e),!0}catch(e){}return!1}(t))return G("WeakRef");if(function(e){return!("[object Number]"!==V(e)||C&&"object"==typeof e&&C in e)}(t))return $(Y(Number(t)));if(function(e){if(!e||"object"!=typeof e||!E)return!1;try{return E.call(e),!0}catch(e){}return!1}(t))return $(Y(E.call(t)));if(function(e){return!("[object Boolean]"!==V(e)||C&&"object"==typeof e&&C in e)}(t))return $(h.call(t));if(function(e){return!("[object String]"!==V(e)||C&&"object"==typeof e&&C in e)}(t))return $(Y(String(t)));if("undefined"!=typeof window&&t===window)return"{ [object Window] }";if(t===n.g)return"{ [object globalThis] }";if(!function(e){return!("[object Date]"!==V(e)||C&&"object"==typeof e&&C in e)}(t)&&!M(t)){var de=Q(t,Y),fe=U?U(t)===Object.prototype:t instanceof Object||t.constructor===Object,ue=t instanceof Object?"":"null prototype",pe=!fe&&C&&Object(t)===t&&C in t?g.call(V(t),8,-1):ue?"Object":"",he=(fe||"function"!=typeof t.constructor?"":t.constructor.name?t.constructor.name+" ":"")+(pe||ue?"["+S.call(k.call([],pe||[],ue||[]),": ")+"] ":"");return 0===de.length?he+"{}":B?he+"{"+J(de,B)+"}":he+"{ "+S.call(de,", ")+" }"}return String(t)};var B=Object.prototype.hasOwnProperty||function(e){return e in this};function H(e,t){return B.call(e,t)}function V(e){return m.call(e)}function Z(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}function K(e,t){if(e.length>t.maxStringLength){var n=e.length-t.maxStringLength,r="... "+n+" more character"+(n>1?"s":"");return K(g.call(e,0,t.maxStringLength),t)+r}return T(b.call(b.call(e,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,Y),"single",t)}function Y(e){var t=e.charCodeAt(0),n={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return n?"\\"+n:"\\x"+(t<16?"0":"")+x.call(t.toString(16))}function $(e){return"Object("+e+")"}function G(e){return e+" { ? }"}function X(e,t,n,r){return e+" ("+t+") {"+(r?J(n,r):S.call(n,", "))+"}"}function J(e,t){if(0===e.length)return"";var n="\n"+t.prev+t.base;return n+S.call(e,","+n)+"\n"+t.prev}function Q(e,t){var n=L(e),r=[];if(n){r.length=e.length;for(var i=0;i<e.length;i++)r[i]=H(e,i)?t(e[i],e):""}var a,o="function"==typeof j?j(e):[];if(O){a={};for(var s=0;s<o.length;s++)a["$"+o[s]]=o[s]}for(var c in e)H(e,c)&&(n&&String(Number(c))===c&&c<e.length||O&&a["$"+c]instanceof Symbol||(_.call(/[^\w$]/,c)?r.push(t(c,e)+": "+t(e[c],e)):r.push(c+": "+t(e[c],e))));if("function"==typeof j)for(var l=0;l<o.length;l++)R.call(e,o[l])&&r.push("["+t(o[l])+"]: "+t(e[o[l]],e));return r}},771:(e,t,n)=>{"use strict";var r=n(210),i=n(296),a=n(44)(),o=n(275),s=r("%TypeError%"),c=r("%Math.floor%");e.exports=function(e,t){if("function"!=typeof e)throw new s("`fn` is not a function");if("number"!=typeof t||t<0||t>4294967295||c(t)!==t)throw new s("`length` must be a positive 32-bit integer");var n=arguments.length>2&&!!arguments[2],r=!0,l=!0;if("length"in e&&o){var d=o(e,"length");d&&!d.configurable&&(r=!1),d&&!d.writable&&(l=!1)}return(r||l||!n)&&(a?i(e,"length",t,!0,!0):i(e,"length",t)),e}},478:(e,t,n)=>{"use strict";var r=n(210),i=n(924),a=n(631),o=r("%TypeError%"),s=r("%WeakMap%",!0),c=r("%Map%",!0),l=i("WeakMap.prototype.get",!0),d=i("WeakMap.prototype.set",!0),f=i("WeakMap.prototype.has",!0),u=i("Map.prototype.get",!0),p=i("Map.prototype.set",!0),h=i("Map.prototype.has",!0),m=function(e,t){for(var n,r=e;null!==(n=r.next);r=n)if(n.key===t)return r.next=n.next,n.next=e.next,e.next=n,n};e.exports=function(){var e,t,n,r={assert:function(e){if(!r.has(e))throw new o("Side channel does not contain "+a(e))},get:function(r){if(s&&r&&("object"==typeof r||"function"==typeof r)){if(e)return l(e,r)}else if(c){if(t)return u(t,r)}else if(n)return function(e,t){var n=m(e,t);return n&&n.value}(n,r)},has:function(r){if(s&&r&&("object"==typeof r||"function"==typeof r)){if(e)return f(e,r)}else if(c){if(t)return h(t,r)}else if(n)return function(e,t){return!!m(e,t)}(n,r);return!1},set:function(r,i){s&&r&&("object"==typeof r||"function"==typeof r)?(e||(e=new s),d(e,r,i)):c?(t||(t=new c),p(t,r,i)):(n||(n={key:{},next:null}),function(e,t,n){var r=m(e,t);r?r.value=n:e.next={key:t,next:e.next,value:n}}(n,r,i))}};return r}},218:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DropZone=void 0,t.DropZone=class{area;id;file;onFileSelected=[];fileElement;fileDisplay;accept;constructor(e){this.area=e,this.fileElement=e.querySelector('input[type="file"]'),this.fileDisplay=e.querySelector(".selected-file"),this.accept=this.fileElement.getAttribute("accept"),this.setupDrop(),this.setupClick(),this.id=e.getAttribute("id")}setupClick(){this.area.addEventListener("click",(e=>{this.fileElement.value="",this.fileElement.click()})),this.fileElement.addEventListener("change",(e=>{this.fileElement.files&&this.fileSelected(this.fileElement.files)}))}setupDrop(){["dragenter","dragover","dragleave","drop"].forEach((e=>{this.area.addEventListener(e,(e=>{e.preventDefault(),e.stopPropagation()}),!1)})),["dragenter","dragover"].forEach((e=>{this.area.addEventListener(e,(e=>{this.area.classList.toggle("highlight",!0)}),!1)})),["dragleave","drop"].forEach((e=>{this.area.addEventListener(e,(()=>{this.area.style.setProperty("--fileName",""),this.area.classList.toggle("highlight",!1)}),!1)})),this.area.addEventListener("drop",(e=>{e.dataTransfer?.files&&this.fileSelected(e.dataTransfer.files)}),!1)}clear(){this.area.classList.toggle("selected",!1),this.fileDisplay.textContent="",this.file=void 0,this.onFileSelected.forEach((e=>e()))}fileSelected(e){const t=e.item(0);t&&t.name.endsWith(this.accept)?(this.area.classList.toggle("selected",!0),this.fileDisplay.textContent=`已選擇 ${t.name}`,this.file=t,this.onFileSelected.forEach((e=>e(t)))):this.clear()}}},511:function(e,t,n){var r;e=n.nmd(e),function(i){t&&t.nodeType,e&&e.nodeType;var a="object"==typeof n.g&&n.g;a.global!==a&&a.window!==a&&a.self;var o,s=2147483647,c=36,l=26,d=38,f=700,u=/^xn--/,p=/[^\x20-\x7E]/,h=/[\x2E\u3002\uFF0E\uFF61]/g,m={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},y=c-1,w=Math.floor,g=String.fromCharCode;function b(e){throw new RangeError(m[e])}function x(e,t){for(var n=e.length,r=[];n--;)r[n]=t(e[n]);return r}function v(e,t){var n=e.split("@"),r="";return n.length>1&&(r=n[0]+"@",e=n[1]),r+x((e=e.replace(h,".")).split("."),t).join(".")}function _(e){for(var t,n,r=[],i=0,a=e.length;i<a;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<a?56320==(64512&(n=e.charCodeAt(i++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),i--):r.push(t);return r}function k(e){return x(e,(function(e){var t="";return e>65535&&(t+=g((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+g(e)})).join("")}function S(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function A(e,t,n){var r=0;for(e=n?w(e/f):e>>1,e+=w(e/t);e>y*l>>1;r+=c)e=w(e/y);return w(r+(y+1)*e/(e+d))}function z(e){var t,n,r,i,a,o,d,f,u,p,h,m=[],y=e.length,g=0,x=128,v=72;for((n=e.lastIndexOf("-"))<0&&(n=0),r=0;r<n;++r)e.charCodeAt(r)>=128&&b("not-basic"),m.push(e.charCodeAt(r));for(i=n>0?n+1:0;i<y;){for(a=g,o=1,d=c;i>=y&&b("invalid-input"),((f=(h=e.charCodeAt(i++))-48<10?h-22:h-65<26?h-65:h-97<26?h-97:c)>=c||f>w((s-g)/o))&&b("overflow"),g+=f*o,!(f<(u=d<=v?1:d>=v+l?l:d-v));d+=c)o>w(s/(p=c-u))&&b("overflow"),o*=p;v=A(g-a,t=m.length+1,0==a),w(g/t)>s-x&&b("overflow"),x+=w(g/t),g%=t,m.splice(g++,0,x)}return k(m)}function E(e){var t,n,r,i,a,o,d,f,u,p,h,m,y,x,v,k=[];for(m=(e=_(e)).length,t=128,n=0,a=72,o=0;o<m;++o)(h=e[o])<128&&k.push(g(h));for(r=i=k.length,i&&k.push("-");r<m;){for(d=s,o=0;o<m;++o)(h=e[o])>=t&&h<d&&(d=h);for(d-t>w((s-n)/(y=r+1))&&b("overflow"),n+=(d-t)*y,t=d,o=0;o<m;++o)if((h=e[o])<t&&++n>s&&b("overflow"),h==t){for(f=n,u=c;!(f<(p=u<=a?1:u>=a+l?l:u-a));u+=c)v=f-p,x=c-p,k.push(g(S(p+v%x,0))),f=w(v/x);k.push(g(S(f,0))),a=A(n,y,r==i),n=0,++r}++n,++t}return k.join("")}o={version:"1.4.1",ucs2:{decode:_,encode:k},decode:z,encode:E,toASCII:function(e){return v(e,(function(e){return p.test(e)?"xn--"+E(e):e}))},toUnicode:function(e){return v(e,(function(e){return u.test(e)?z(e.slice(4).toLowerCase()):e}))}},void 0===(r=function(){return o}.call(t,n,t,e))||(e.exports=r)}()},532:e=>{"use strict";var t=String.prototype.replace,n=/%20/g,r="RFC3986";e.exports={default:r,formatters:{RFC1738:function(e){return t.call(e,n,"+")},RFC3986:function(e){return String(e)}},RFC1738:"RFC1738",RFC3986:r}},984:(e,t,n)=>{"use strict";var r=n(730),i=n(325),a=n(532);e.exports={formats:a,parse:i,stringify:r}},325:(e,t,n)=>{"use strict";var r=n(368),i=Object.prototype.hasOwnProperty,a=Array.isArray,o={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:r.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},s=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},c=function(e,t){return e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1?e.split(","):e},l=function(e,t,n,r){if(e){var a=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,o=/(\[[^[\]]*])/g,s=n.depth>0&&/(\[[^[\]]*])/.exec(a),l=s?a.slice(0,s.index):a,d=[];if(l){if(!n.plainObjects&&i.call(Object.prototype,l)&&!n.allowPrototypes)return;d.push(l)}for(var f=0;n.depth>0&&null!==(s=o.exec(a))&&f<n.depth;){if(f+=1,!n.plainObjects&&i.call(Object.prototype,s[1].slice(1,-1))&&!n.allowPrototypes)return;d.push(s[1])}return s&&d.push("["+a.slice(s.index)+"]"),function(e,t,n,r){for(var i=r?t:c(t,n),a=e.length-1;a>=0;--a){var o,s=e[a];if("[]"===s&&n.parseArrays)o=[].concat(i);else{o=n.plainObjects?Object.create(null):{};var l="["===s.charAt(0)&&"]"===s.charAt(s.length-1)?s.slice(1,-1):s,d=parseInt(l,10);n.parseArrays||""!==l?!isNaN(d)&&s!==l&&String(d)===l&&d>=0&&n.parseArrays&&d<=n.arrayLimit?(o=[])[d]=i:"__proto__"!==l&&(o[l]=i):o={0:i}}i=o}return i}(d,t,n,r)}};e.exports=function(e,t){var n=function(e){if(!e)return o;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?o.charset:e.charset;return{allowDots:void 0===e.allowDots?o.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:o.allowPrototypes,allowSparse:"boolean"==typeof e.allowSparse?e.allowSparse:o.allowSparse,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:o.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:o.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:o.comma,decoder:"function"==typeof e.decoder?e.decoder:o.decoder,delimiter:"string"==typeof e.delimiter||r.isRegExp(e.delimiter)?e.delimiter:o.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:o.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:o.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:o.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:o.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:o.strictNullHandling}}(t);if(""===e||null==e)return n.plainObjects?Object.create(null):{};for(var d="string"==typeof e?function(e,t){var n,l={__proto__:null},d=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,f=t.parameterLimit===1/0?void 0:t.parameterLimit,u=d.split(t.delimiter,f),p=-1,h=t.charset;if(t.charsetSentinel)for(n=0;n<u.length;++n)0===u[n].indexOf("utf8=")&&("utf8=%E2%9C%93"===u[n]?h="utf-8":"utf8=%26%2310003%3B"===u[n]&&(h="iso-8859-1"),p=n,n=u.length);for(n=0;n<u.length;++n)if(n!==p){var m,y,w=u[n],g=w.indexOf("]="),b=-1===g?w.indexOf("="):g+1;-1===b?(m=t.decoder(w,o.decoder,h,"key"),y=t.strictNullHandling?null:""):(m=t.decoder(w.slice(0,b),o.decoder,h,"key"),y=r.maybeMap(c(w.slice(b+1),t),(function(e){return t.decoder(e,o.decoder,h,"value")}))),y&&t.interpretNumericEntities&&"iso-8859-1"===h&&(y=s(y)),w.indexOf("[]=")>-1&&(y=a(y)?[y]:y),i.call(l,m)?l[m]=r.combine(l[m],y):l[m]=y}return l}(e,n):e,f=n.plainObjects?Object.create(null):{},u=Object.keys(d),p=0;p<u.length;++p){var h=u[p],m=l(h,d[h],n,"string"==typeof e);f=r.merge(f,m,n)}return!0===n.allowSparse?f:r.compact(f)}},730:(e,t,n)=>{"use strict";var r=n(478),i=n(368),a=n(532),o=Object.prototype.hasOwnProperty,s={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},c=Array.isArray,l=Array.prototype.push,d=function(e,t){l.apply(e,c(t)?t:[t])},f=Date.prototype.toISOString,u=a.default,p={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:i.encode,encodeValuesOnly:!1,format:u,formatter:a.formatters[u],indices:!1,serializeDate:function(e){return f.call(e)},skipNulls:!1,strictNullHandling:!1},h={},m=function e(t,n,a,o,s,l,f,u,m,y,w,g,b,x,v,_){for(var k,S=t,A=_,z=0,E=!1;void 0!==(A=A.get(h))&&!E;){var j=A.get(t);if(z+=1,void 0!==j){if(j===z)throw new RangeError("Cyclic object value");E=!0}void 0===A.get(h)&&(z=0)}if("function"==typeof u?S=u(n,S):S instanceof Date?S=w(S):"comma"===a&&c(S)&&(S=i.maybeMap(S,(function(e){return e instanceof Date?w(e):e}))),null===S){if(s)return f&&!x?f(n,p.encoder,v,"key",g):n;S=""}if("string"==typeof(k=S)||"number"==typeof k||"boolean"==typeof k||"symbol"==typeof k||"bigint"==typeof k||i.isBuffer(S))return f?[b(x?n:f(n,p.encoder,v,"key",g))+"="+b(f(S,p.encoder,v,"value",g))]:[b(n)+"="+b(String(S))];var D,O=[];if(void 0===S)return O;if("comma"===a&&c(S))x&&f&&(S=i.maybeMap(S,f)),D=[{value:S.length>0?S.join(",")||null:void 0}];else if(c(u))D=u;else{var C=Object.keys(S);D=m?C.sort(m):C}for(var R=o&&c(S)&&1===S.length?n+"[]":n,U=0;U<D.length;++U){var F=D[U],W="object"==typeof F&&void 0!==F.value?F.value:S[F];if(!l||null!==W){var I=c(S)?"function"==typeof a?a(R,F):R:R+(y?"."+F:"["+F+"]");_.set(t,z);var P=r();P.set(h,_),d(O,e(W,I,a,o,s,l,"comma"===a&&x&&c(S)?null:f,u,m,y,w,g,b,x,v,P))}}return O};e.exports=function(e,t){var n,i=e,l=function(e){if(!e)return p;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||p.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var n=a.default;if(void 0!==e.format){if(!o.call(a.formatters,e.format))throw new TypeError("Unknown format option provided.");n=e.format}var r=a.formatters[n],i=p.filter;return("function"==typeof e.filter||c(e.filter))&&(i=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:p.addQueryPrefix,allowDots:void 0===e.allowDots?p.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:p.charsetSentinel,delimiter:void 0===e.delimiter?p.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:p.encode,encoder:"function"==typeof e.encoder?e.encoder:p.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:p.encodeValuesOnly,filter:i,format:n,formatter:r,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:p.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:p.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:p.strictNullHandling}}(t);"function"==typeof l.filter?i=(0,l.filter)("",i):c(l.filter)&&(n=l.filter);var f,u=[];if("object"!=typeof i||null===i)return"";f=t&&t.arrayFormat in s?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var h=s[f];if(t&&"commaRoundTrip"in t&&"boolean"!=typeof t.commaRoundTrip)throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var y="comma"===h&&t&&t.commaRoundTrip;n||(n=Object.keys(i)),l.sort&&n.sort(l.sort);for(var w=r(),g=0;g<n.length;++g){var b=n[g];l.skipNulls&&null===i[b]||d(u,m(i[b],b,h,y,l.strictNullHandling,l.skipNulls,l.encode?l.encoder:null,l.filter,l.sort,l.allowDots,l.serializeDate,l.format,l.formatter,l.encodeValuesOnly,l.charset,w))}var x=u.join(l.delimiter),v=!0===l.addQueryPrefix?"?":"";return l.charsetSentinel&&("iso-8859-1"===l.charset?v+="utf8=%26%2310003%3B&":v+="utf8=%E2%9C%93&"),x.length>0?v+x:""}},368:(e,t,n)=>{"use strict";var r=n(532),i=Object.prototype.hasOwnProperty,a=Array.isArray,o=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),s=function(e,t){for(var n=t&&t.plainObjects?Object.create(null):{},r=0;r<e.length;++r)void 0!==e[r]&&(n[r]=e[r]);return n};e.exports={arrayToObject:s,assign:function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var i=t[r],o=i.obj[i.prop],s=Object.keys(o),c=0;c<s.length;++c){var l=s[c],d=o[l];"object"==typeof d&&null!==d&&-1===n.indexOf(d)&&(t.push({obj:o,prop:l}),n.push(d))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(a(n)){for(var r=[],i=0;i<n.length;++i)void 0!==n[i]&&r.push(n[i]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,n){var r=e.replace(/\+/g," ");if("iso-8859-1"===n)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(e){return r}},encode:function(e,t,n,i,a){if(0===e.length)return e;var s=e;if("symbol"==typeof e?s=Symbol.prototype.toString.call(e):"string"!=typeof e&&(s=String(e)),"iso-8859-1"===n)return escape(s).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var c="",l=0;l<s.length;++l){var d=s.charCodeAt(l);45===d||46===d||95===d||126===d||d>=48&&d<=57||d>=65&&d<=90||d>=97&&d<=122||a===r.RFC1738&&(40===d||41===d)?c+=s.charAt(l):d<128?c+=o[d]:d<2048?c+=o[192|d>>6]+o[128|63&d]:d<55296||d>=57344?c+=o[224|d>>12]+o[128|d>>6&63]+o[128|63&d]:(l+=1,d=65536+((1023&d)<<10|1023&s.charCodeAt(l)),c+=o[240|d>>18]+o[128|d>>12&63]+o[128|d>>6&63]+o[128|63&d])}return c},isBuffer:function(e){return!(!e||"object"!=typeof e||!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e)))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},maybeMap:function(e,t){if(a(e)){for(var n=[],r=0;r<e.length;r+=1)n.push(t(e[r]));return n}return t(e)},merge:function e(t,n,r){if(!n)return t;if("object"!=typeof n){if(a(t))t.push(n);else{if(!t||"object"!=typeof t)return[t,n];(r&&(r.plainObjects||r.allowPrototypes)||!i.call(Object.prototype,n))&&(t[n]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(n);var o=t;return a(t)&&!a(n)&&(o=s(t,r)),a(t)&&a(n)?(n.forEach((function(n,a){if(i.call(t,a)){var o=t[a];o&&"object"==typeof o&&n&&"object"==typeof n?t[a]=e(o,n,r):t.push(n)}else t[a]=n})),t):Object.keys(n).reduce((function(t,a){var o=n[a];return i.call(t,a)?t[a]=e(t[a],o,r):t[a]=o,t}),o)}}},575:(e,t,n)=>{"use strict";var r=n(511);function i(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}var a=/^([a-z0-9.+-]+:)/i,o=/:[0-9]*$/,s=/^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/,c=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),l=["'"].concat(c),d=["%","/","?",";","#"].concat(l),f=["/","?","#"],u=/^[+a-z0-9A-Z_-]{0,63}$/,p=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,h={javascript:!0,"javascript:":!0},m={javascript:!0,"javascript:":!0},y={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},w=n(984);i.prototype.parse=function(e,t,n){if("string"!=typeof e)throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var i=e.indexOf("?"),o=-1!==i&&i<e.indexOf("#")?"?":"#",c=e.split(o);c[0]=c[0].replace(/\\/g,"/");var g=e=c.join(o);if(g=g.trim(),!n&&1===e.split("#").length){var b=s.exec(g);if(b)return this.path=g,this.href=g,this.pathname=b[1],b[2]?(this.search=b[2],this.query=t?w.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var x=a.exec(g);if(x){var v=(x=x[0]).toLowerCase();this.protocol=v,g=g.substr(x.length)}if(n||x||g.match(/^\/\/[^@/]+@[^@/]+/)){var _="//"===g.substr(0,2);!_||x&&m[x]||(g=g.substr(2),this.slashes=!0)}if(!m[x]&&(_||x&&!y[x])){for(var k,S,A=-1,z=0;z<f.length;z++)-1!==(E=g.indexOf(f[z]))&&(-1===A||E<A)&&(A=E);for(-1!==(S=-1===A?g.lastIndexOf("@"):g.lastIndexOf("@",A))&&(k=g.slice(0,S),g=g.slice(S+1),this.auth=decodeURIComponent(k)),A=-1,z=0;z<d.length;z++){var E;-1!==(E=g.indexOf(d[z]))&&(-1===A||E<A)&&(A=E)}-1===A&&(A=g.length),this.host=g.slice(0,A),g=g.slice(A),this.parseHost(),this.hostname=this.hostname||"";var j="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!j)for(var D=this.hostname.split(/\./),O=(z=0,D.length);z<O;z++){var C=D[z];if(C&&!C.match(u)){for(var R="",U=0,F=C.length;U<F;U++)C.charCodeAt(U)>127?R+="x":R+=C[U];if(!R.match(u)){var W=D.slice(0,z),I=D.slice(z+1),P=C.match(p);P&&(W.push(P[1]),I.unshift(P[2])),I.length&&(g="/"+I.join(".")+g),this.hostname=W.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),j||(this.hostname=r.toASCII(this.hostname));var T=this.port?":"+this.port:"",q=this.hostname||"";this.host=q+T,this.href+=this.host,j&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==g[0]&&(g="/"+g))}if(!h[v])for(z=0,O=l.length;z<O;z++){var L=l[z];if(-1!==g.indexOf(L)){var M=encodeURIComponent(L);M===L&&(M=escape(L)),g=g.split(L).join(M)}}var N=g.indexOf("#");-1!==N&&(this.hash=g.substr(N),g=g.slice(0,N));var B=g.indexOf("?");if(-1!==B?(this.search=g.substr(B),this.query=g.substr(B+1),t&&(this.query=w.parse(this.query)),g=g.slice(0,B)):t&&(this.search="",this.query={}),g&&(this.pathname=g),y[v]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){T=this.pathname||"";var H=this.search||"";this.path=T+H}return this.href=this.format(),this},i.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",r=this.hash||"",i=!1,a="";this.host?i=e+this.host:this.hostname&&(i=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&"object"==typeof this.query&&Object.keys(this.query).length&&(a=w.stringify(this.query,{arrayFormat:"repeat",addQueryPrefix:!1}));var o=this.search||a&&"?"+a||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||y[t])&&!1!==i?(i="//"+(i||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):i||(i=""),r&&"#"!==r.charAt(0)&&(r="#"+r),o&&"?"!==o.charAt(0)&&(o="?"+o),t+i+(n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(o=o.replace("#","%23"))+r},i.prototype.resolve=function(e){return this.resolveObject(function(e,t,n){if(e&&"object"==typeof e&&e instanceof i)return e;var r=new i;return r.parse(e,t,n),r}(e,!1,!0)).format()},i.prototype.resolveObject=function(e){if("string"==typeof e){var t=new i;t.parse(e,!1,!0),e=t}for(var n=new i,r=Object.keys(this),a=0;a<r.length;a++){var o=r[a];n[o]=this[o]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var s=Object.keys(e),c=0;c<s.length;c++){var l=s[c];"protocol"!==l&&(n[l]=e[l])}return y[n.protocol]&&n.hostname&&!n.pathname&&(n.pathname="/",n.path=n.pathname),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!y[e.protocol]){for(var d=Object.keys(e),f=0;f<d.length;f++){var u=d[f];n[u]=e[u]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||m[e.protocol])n.pathname=e.pathname;else{for(var p=(e.pathname||"").split("/");p.length&&!(e.host=p.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==p[0]&&p.unshift(""),p.length<2&&p.unshift(""),n.pathname=p.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var h=n.pathname||"",w=n.search||"";n.path=h+w}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var g=n.pathname&&"/"===n.pathname.charAt(0),b=e.host||e.pathname&&"/"===e.pathname.charAt(0),x=b||g||n.host&&e.pathname,v=x,_=n.pathname&&n.pathname.split("/")||[],k=(p=e.pathname&&e.pathname.split("/")||[],n.protocol&&!y[n.protocol]);if(k&&(n.hostname="",n.port=null,n.host&&(""===_[0]?_[0]=n.host:_.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===p[0]?p[0]=e.host:p.unshift(e.host)),e.host=null),x=x&&(""===p[0]||""===_[0])),b)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,_=p;else if(p.length)_||(_=[]),_.pop(),_=_.concat(p),n.search=e.search,n.query=e.query;else if(null!=e.search)return k&&(n.host=_.shift(),n.hostname=n.host,(j=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=j.shift(),n.hostname=j.shift(),n.host=n.hostname)),n.search=e.search,n.query=e.query,null===n.pathname&&null===n.search||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n;if(!_.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var S=_.slice(-1)[0],A=(n.host||e.host||_.length>1)&&("."===S||".."===S)||""===S,z=0,E=_.length;E>=0;E--)"."===(S=_[E])?_.splice(E,1):".."===S?(_.splice(E,1),z++):z&&(_.splice(E,1),z--);if(!x&&!v)for(;z--;z)_.unshift("..");!x||""===_[0]||_[0]&&"/"===_[0].charAt(0)||_.unshift(""),A&&"/"!==_.join("/").substr(-1)&&_.push("");var j,D=""===_[0]||_[0]&&"/"===_[0].charAt(0);return k&&(n.hostname=D?"":_.length?_.shift():"",n.host=n.hostname,(j=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=j.shift(),n.hostname=j.shift(),n.host=n.hostname)),(x=x||n.host&&_.length)&&!D&&_.unshift(""),_.length>0?n.pathname=_.join("/"):(n.pathname=null,n.path=null),null===n.pathname&&null===n.search||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},i.prototype.parseHost=function(){var e=this.host,t=o.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},654:()=>{},56:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=15,i=573,a=-2;function o(e){return s(e.map((([e,t])=>new Array(e).fill(t,0,e))))}function s(e){return e.reduce(((e,t)=>e.concat(Array.isArray(t)?s(t):t)),[])}const c=[0,1,2,3].concat(...o([[2,4],[2,5],[4,6],[4,7],[8,8],[8,9],[16,10],[16,11],[32,12],[32,13],[64,14],[64,15],[2,0],[1,16],[1,17],[2,18],[2,19],[4,20],[4,21],[8,22],[8,23],[16,24],[16,25],[32,26],[32,27],[64,28],[64,29]]));function l(){const e=this;function t(e,t){let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}e.build_tree=function(n){const a=e.dyn_tree,o=e.stat_desc.static_tree,s=e.stat_desc.elems;let c,l,d,f=-1;for(n.heap_len=0,n.heap_max=i,c=0;c<s;c++)0!==a[2*c]?(n.heap[++n.heap_len]=f=c,n.depth[c]=0):a[2*c+1]=0;for(;n.heap_len<2;)d=n.heap[++n.heap_len]=f<2?++f:0,a[2*d]=1,n.depth[d]=0,n.opt_len--,o&&(n.static_len-=o[2*d+1]);for(e.max_code=f,c=Math.floor(n.heap_len/2);c>=1;c--)n.pqdownheap(a,c);d=s;do{c=n.heap[1],n.heap[1]=n.heap[n.heap_len--],n.pqdownheap(a,1),l=n.heap[1],n.heap[--n.heap_max]=c,n.heap[--n.heap_max]=l,a[2*d]=a[2*c]+a[2*l],n.depth[d]=Math.max(n.depth[c],n.depth[l])+1,a[2*c+1]=a[2*l+1]=d,n.heap[1]=d++,n.pqdownheap(a,1)}while(n.heap_len>=2);n.heap[--n.heap_max]=n.heap[1],function(t){const n=e.dyn_tree,a=e.stat_desc.static_tree,o=e.stat_desc.extra_bits,s=e.stat_desc.extra_base,c=e.stat_desc.max_length;let l,d,f,u,p,h,m=0;for(u=0;u<=r;u++)t.bl_count[u]=0;for(n[2*t.heap[t.heap_max]+1]=0,l=t.heap_max+1;l<i;l++)d=t.heap[l],u=n[2*n[2*d+1]+1]+1,u>c&&(u=c,m++),n[2*d+1]=u,d>e.max_code||(t.bl_count[u]++,p=0,d>=s&&(p=o[d-s]),h=n[2*d],t.opt_len+=h*(u+p),a&&(t.static_len+=h*(a[2*d+1]+p)));if(0!==m){do{for(u=c-1;0===t.bl_count[u];)u--;t.bl_count[u]--,t.bl_count[u+1]+=2,t.bl_count[c]--,m-=2}while(m>0);for(u=c;0!==u;u--)for(d=t.bl_count[u];0!==d;)f=t.heap[--l],f>e.max_code||(n[2*f+1]!=u&&(t.opt_len+=(u-n[2*f+1])*n[2*f],n[2*f+1]=u),d--)}}(n),function(e,n,i){const a=[];let o,s,c,l=0;for(o=1;o<=r;o++)a[o]=l=l+i[o-1]<<1;for(s=0;s<=n;s++)c=e[2*s+1],0!==c&&(e[2*s]=t(a[c]++,c))}(a,e.max_code,n.bl_count)}}function d(e,t,n,r,i){const a=this;a.static_tree=e,a.extra_bits=t,a.extra_base=n,a.elems=r,a.max_length=i}l._length_code=[0,1,2,3,4,5,6,7].concat(...o([[2,8],[2,9],[2,10],[2,11],[4,12],[4,13],[4,14],[4,15],[8,16],[8,17],[8,18],[8,19],[16,20],[16,21],[16,22],[16,23],[32,24],[32,25],[32,26],[31,27],[1,28]])),l.base_length=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],l.base_dist=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],l.d_code=function(e){return e<256?c[e]:c[256+(e>>>7)]},l.extra_lbits=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],l.extra_dbits=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],l.extra_blbits=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],l.bl_order=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];const f=o([[144,8],[112,9],[24,7],[8,8]]);d.static_ltree=s([12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,19,275,147,403,83,339,211,467,51,307,179,435,115,371,243,499,11,267,139,395,75,331,203,459,43,299,171,427,107,363,235,491,27,283,155,411,91,347,219,475,59,315,187,443,123,379,251,507,7,263,135,391,71,327,199,455,39,295,167,423,103,359,231,487,23,279,151,407,87,343,215,471,55,311,183,439,119,375,247,503,15,271,143,399,79,335,207,463,47,303,175,431,111,367,239,495,31,287,159,415,95,351,223,479,63,319,191,447,127,383,255,511,0,64,32,96,16,80,48,112,8,72,40,104,24,88,56,120,4,68,36,100,20,84,52,116,3,131,67,195,35,163,99,227].map(((e,t)=>[e,f[t]])));const u=o([[30,5]]);function p(e,t,n,r,i){const a=this;a.good_length=e,a.max_lazy=t,a.nice_length=n,a.max_chain=r,a.func=i}d.static_dtree=s([0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,30,1,17,9,25,5,21,13,29,3,19,11,27,7,23].map(((e,t)=>[e,u[t]]))),d.static_l_desc=new d(d.static_ltree,l.extra_lbits,257,286,r),d.static_d_desc=new d(d.static_dtree,l.extra_dbits,0,30,r),d.static_bl_desc=new d(null,l.extra_blbits,0,19,7);const h=[new p(0,0,0,0,0),new p(4,4,8,4,1),new p(4,5,16,8,1),new p(4,6,32,32,1),new p(4,4,16,16,2),new p(8,16,32,32,2),new p(8,16,128,128,2),new p(8,32,128,256,2),new p(32,128,258,1024,2),new p(32,258,258,4096,2)],m=["need dictionary","stream end","","","stream error","data error","","buffer error","",""],y=113,w=666,g=262;function b(e,t,n,r){const i=e[2*t],a=e[2*n];return i<a||i==a&&r[t]<=r[n]}function x(){const e=this;let t,n,r,i,o,s,c,f,u,p,x,v,_,k,S,A,z,E,j,D,O,C,R,U,F,W,I,P,T,q,L,M,N;const B=new l,H=new l,V=new l;let Z,K,Y,$,G,X;function J(){let t;for(t=0;t<286;t++)L[2*t]=0;for(t=0;t<30;t++)M[2*t]=0;for(t=0;t<19;t++)N[2*t]=0;L[512]=1,e.opt_len=e.static_len=0,K=Y=0}function Q(e,t){let n,r=-1,i=e[1],a=0,o=7,s=4;0===i&&(o=138,s=3),e[2*(t+1)+1]=65535;for(let c=0;c<=t;c++)n=i,i=e[2*(c+1)+1],++a<o&&n==i||(a<s?N[2*n]+=a:0!==n?(n!=r&&N[2*n]++,N[32]++):a<=10?N[34]++:N[36]++,a=0,r=n,0===i?(o=138,s=3):n==i?(o=6,s=3):(o=7,s=4))}function ee(t){e.pending_buf[e.pending++]=t}function te(e){ee(255&e),ee(e>>>8&255)}function ne(e,t){let n;const r=t;X>16-r?(n=e,G|=n<<X&65535,te(G),G=n>>>16-X,X+=r-16):(G|=e<<X&65535,X+=r)}function re(e,t){const n=2*e;ne(65535&t[n],65535&t[n+1])}function ie(e,t){let n,r,i=-1,a=e[1],o=0,s=7,c=4;for(0===a&&(s=138,c=3),n=0;n<=t;n++)if(r=a,a=e[2*(n+1)+1],!(++o<s&&r==a)){if(o<c)do{re(r,N)}while(0!=--o);else 0!==r?(r!=i&&(re(r,N),o--),re(16,N),ne(o-3,2)):o<=10?(re(17,N),ne(o-3,3)):(re(18,N),ne(o-11,7));o=0,i=r,0===a?(s=138,c=3):r==a?(s=6,c=3):(s=7,c=4)}}function ae(){16==X?(te(G),G=0,X=0):X>=8&&(ee(255&G),G>>>=8,X-=8)}function oe(t,n){let r,i,a;if(e.dist_buf[K]=t,e.lc_buf[K]=255&n,K++,0===t?L[2*n]++:(Y++,t--,L[2*(l._length_code[n]+256+1)]++,M[2*l.d_code(t)]++),0==(8191&K)&&I>2){for(r=8*K,i=O-z,a=0;a<30;a++)r+=M[2*a]*(5+l.extra_dbits[a]);if(r>>>=3,Y<Math.floor(K/2)&&r<Math.floor(i/2))return!0}return K==Z-1}function se(t,n){let r,i,a,o,s=0;if(0!==K)do{r=e.dist_buf[s],i=e.lc_buf[s],s++,0===r?re(i,t):(a=l._length_code[i],re(a+256+1,t),o=l.extra_lbits[a],0!==o&&(i-=l.base_length[a],ne(i,o)),r--,a=l.d_code(r),re(a,n),o=l.extra_dbits[a],0!==o&&(r-=l.base_dist[a],ne(r,o)))}while(s<K);re(256,t),$=t[513]}function ce(){X>8?te(G):X>0&&ee(255&G),G=0,X=0}function le(t,n,r){ne(0+(r?1:0),3),function(t,n,r){ce(),$=8,te(n),te(~n),e.pending_buf.set(f.subarray(t,t+n),e.pending),e.pending+=n}(t,n)}function de(n){(function(t,n,r){let i,a,o=0;I>0?(B.build_tree(e),H.build_tree(e),o=function(){let t;for(Q(L,B.max_code),Q(M,H.max_code),V.build_tree(e),t=18;t>=3&&0===N[2*l.bl_order[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(),i=e.opt_len+3+7>>>3,a=e.static_len+3+7>>>3,a<=i&&(i=a)):i=a=n+5,n+4<=i&&-1!=t?le(t,n,r):a==i?(ne(2+(r?1:0),3),se(d.static_ltree,d.static_dtree)):(ne(4+(r?1:0),3),function(e,t,n){let r;for(ne(e-257,5),ne(t-1,5),ne(n-4,4),r=0;r<n;r++)ne(N[2*l.bl_order[r]+1],3);ie(L,e-1),ie(M,t-1)}(B.max_code+1,H.max_code+1,o+1),se(L,M)),J(),r&&ce()})(z>=0?z:-1,O-z,n),z=O,t.flush_pending()}function fe(){let e,n,r,i;do{if(i=u-R-O,0===i&&0===O&&0===R)i=o;else if(-1==i)i--;else if(O>=o+o-g){f.set(f.subarray(o,o+o),0),C-=o,O-=o,z-=o,e=_,r=e;do{n=65535&x[--r],x[r]=n>=o?n-o:0}while(0!=--e);e=o,r=e;do{n=65535&p[--r],p[r]=n>=o?n-o:0}while(0!=--e);i+=o}if(0===t.avail_in)return;e=t.read_buf(f,O+R,i),R+=e,R>=3&&(v=255&f[O],v=(v<<A^255&f[O+1])&S)}while(R<g&&0!==t.avail_in)}function ue(e){let t,n,r=F,i=O,a=U;const s=O>o-g?O-(o-g):0;let l=q;const d=c,u=O+258;let h=f[i+a-1],m=f[i+a];U>=T&&(r>>=2),l>R&&(l=R);do{if(t=e,f[t+a]==m&&f[t+a-1]==h&&f[t]==f[i]&&f[++t]==f[i+1]){i+=2,t++;do{}while(f[++i]==f[++t]&&f[++i]==f[++t]&&f[++i]==f[++t]&&f[++i]==f[++t]&&f[++i]==f[++t]&&f[++i]==f[++t]&&f[++i]==f[++t]&&f[++i]==f[++t]&&i<u);if(n=258-(u-i),i=u-258,n>a){if(C=e,a=n,n>=l)break;h=f[i+a-1],m=f[i+a]}}}while((e=65535&p[e&d])>s&&0!=--r);return a<=R?a:R}e.depth=[],e.bl_count=[],e.heap=[],L=[],M=[],N=[],e.pqdownheap=function(t,n){const r=e.heap,i=r[n];let a=n<<1;for(;a<=e.heap_len&&(a<e.heap_len&&b(t,r[a+1],r[a],e.depth)&&a++,!b(t,i,r[a],e.depth));)r[n]=r[a],n=a,a<<=1;r[n]=i},e.deflateInit=function(t,l,m,w,g,b){return w||(w=8),g||(g=8),b||(b=0),t.msg=null,-1==l&&(l=6),g<1||g>9||8!=w||m<9||m>15||l<0||l>9||b<0||b>2?a:(t.dstate=e,s=m,o=1<<s,c=o-1,k=g+7,_=1<<k,S=_-1,A=Math.floor((k+3-1)/3),f=new Uint8Array(2*o),p=[],x=[],Z=1<<g+6,e.pending_buf=new Uint8Array(4*Z),r=4*Z,e.dist_buf=new Uint16Array(Z),e.lc_buf=new Uint8Array(Z),I=l,P=b,function(t){return t.total_in=t.total_out=0,t.msg=null,e.pending=0,e.pending_out=0,n=y,i=0,B.dyn_tree=L,B.stat_desc=d.static_l_desc,H.dyn_tree=M,H.stat_desc=d.static_d_desc,V.dyn_tree=N,V.stat_desc=d.static_bl_desc,G=0,X=0,$=8,J(),function(){u=2*o,x[_-1]=0;for(let e=0;e<_-1;e++)x[e]=0;W=h[I].max_lazy,T=h[I].good_length,q=h[I].nice_length,F=h[I].max_chain,O=0,z=0,R=0,E=U=2,D=0,v=0}(),0}(t))},e.deflateEnd=function(){return 42!=n&&n!=y&&n!=w?a:(e.lc_buf=null,e.dist_buf=null,e.pending_buf=null,x=null,p=null,f=null,e.dstate=null,n==y?-3:0)},e.deflateParams=function(e,t,n){let r=0;return-1==t&&(t=6),t<0||t>9||n<0||n>2?a:(h[I].func!=h[t].func&&0!==e.total_in&&(r=e.deflate(1)),I!=t&&(I=t,W=h[I].max_lazy,T=h[I].good_length,q=h[I].nice_length,F=h[I].max_chain),P=n,r)},e.deflateSetDictionary=function(e,t,r){let i,s=r,l=0;if(!t||42!=n)return a;if(s<3)return 0;for(s>o-g&&(s=o-g,l=r-s),f.set(t.subarray(l,l+s),0),O=s,z=s,v=255&f[0],v=(v<<A^255&f[1])&S,i=0;i<=s-3;i++)v=(v<<A^255&f[i+2])&S,p[i&c]=x[v],x[v]=i;return 0},e.deflate=function(l,u){let b,k,F,T,q;if(u>4||u<0)return a;if(!l.next_out||!l.next_in&&0!==l.avail_in||n==w&&4!=u)return l.msg=m[4],a;if(0===l.avail_out)return l.msg=m[7],-5;var L;if(t=l,T=i,i=u,42==n&&(k=8+(s-8<<4)<<8,F=(I-1&255)>>1,F>3&&(F=3),k|=F<<6,0!==O&&(k|=32),k+=31-k%31,n=y,ee((L=k)>>8&255),ee(255&L)),0!==e.pending){if(t.flush_pending(),0===t.avail_out)return i=-1,0}else if(0===t.avail_in&&u<=T&&4!=u)return t.msg=m[7],-5;if(n==w&&0!==t.avail_in)return l.msg=m[7],-5;if(0!==t.avail_in||0!==R||0!=u&&n!=w){switch(q=-1,h[I].func){case 0:q=function(e){let n,i=65535;for(i>r-5&&(i=r-5);;){if(R<=1){if(fe(),0===R&&0==e)return 0;if(0===R)break}if(O+=R,R=0,n=z+i,(0===O||O>=n)&&(R=O-n,O=n,de(!1),0===t.avail_out))return 0;if(O-z>=o-g&&(de(!1),0===t.avail_out))return 0}return de(4==e),0===t.avail_out?4==e?2:0:4==e?3:1}(u);break;case 1:q=function(e){let n,r=0;for(;;){if(R<g){if(fe(),R<g&&0==e)return 0;if(0===R)break}if(R>=3&&(v=(v<<A^255&f[O+2])&S,r=65535&x[v],p[O&c]=x[v],x[v]=O),0!==r&&(O-r&65535)<=o-g&&2!=P&&(E=ue(r)),E>=3)if(n=oe(O-C,E-3),R-=E,E<=W&&R>=3){E--;do{O++,v=(v<<A^255&f[O+2])&S,r=65535&x[v],p[O&c]=x[v],x[v]=O}while(0!=--E);O++}else O+=E,E=0,v=255&f[O],v=(v<<A^255&f[O+1])&S;else n=oe(0,255&f[O]),R--,O++;if(n&&(de(!1),0===t.avail_out))return 0}return de(4==e),0===t.avail_out?4==e?2:0:4==e?3:1}(u);break;case 2:q=function(e){let n,r,i=0;for(;;){if(R<g){if(fe(),R<g&&0==e)return 0;if(0===R)break}if(R>=3&&(v=(v<<A^255&f[O+2])&S,i=65535&x[v],p[O&c]=x[v],x[v]=O),U=E,j=C,E=2,0!==i&&U<W&&(O-i&65535)<=o-g&&(2!=P&&(E=ue(i)),E<=5&&(1==P||3==E&&O-C>4096)&&(E=2)),U>=3&&E<=U){r=O+R-3,n=oe(O-1-j,U-3),R-=U-1,U-=2;do{++O<=r&&(v=(v<<A^255&f[O+2])&S,i=65535&x[v],p[O&c]=x[v],x[v]=O)}while(0!=--U);if(D=0,E=2,O++,n&&(de(!1),0===t.avail_out))return 0}else if(0!==D){if(n=oe(0,255&f[O-1]),n&&de(!1),O++,R--,0===t.avail_out)return 0}else D=1,O++,R--}return 0!==D&&(n=oe(0,255&f[O-1]),D=0),de(4==e),0===t.avail_out?4==e?2:0:4==e?3:1}(u)}if(2!=q&&3!=q||(n=w),0==q||2==q)return 0===t.avail_out&&(i=-1),0;if(1==q){if(1==u)ne(2,3),re(256,d.static_ltree),ae(),1+$+10-X<9&&(ne(2,3),re(256,d.static_ltree),ae()),$=7;else if(le(0,0,!1),3==u)for(b=0;b<_;b++)x[b]=0;if(t.flush_pending(),0===t.avail_out)return i=-1,0}}return 4!=u?0:1}}function v(){const e=this;e.next_in_index=0,e.next_out_index=0,e.avail_in=0,e.total_in=0,e.avail_out=0,e.total_out=0}v.prototype={deflateInit(e,t){const n=this;return n.dstate=new x,t||(t=r),n.dstate.deflateInit(n,e,t)},deflate(e){const t=this;return t.dstate?t.dstate.deflate(t,e):a},deflateEnd(){const e=this;if(!e.dstate)return a;const t=e.dstate.deflateEnd();return e.dstate=null,t},deflateParams(e,t){const n=this;return n.dstate?n.dstate.deflateParams(n,e,t):a},deflateSetDictionary(e,t){const n=this;return n.dstate?n.dstate.deflateSetDictionary(n,e,t):a},read_buf(e,t,n){const r=this;let i=r.avail_in;return i>n&&(i=n),0===i?0:(r.avail_in-=i,e.set(r.next_in.subarray(r.next_in_index,r.next_in_index+i),t),r.next_in_index+=i,r.total_in+=i,i)},flush_pending(){const e=this;let t=e.dstate.pending;t>e.avail_out&&(t=e.avail_out),0!==t&&(e.next_out.set(e.dstate.pending_buf.subarray(e.dstate.pending_out,e.dstate.pending_out+t),e.next_out_index),e.next_out_index+=t,e.dstate.pending_out+=t,e.total_out+=t,e.avail_out-=t,e.dstate.pending-=t,0===e.dstate.pending&&(e.dstate.pending_out=0))}};const _=0,k=1,S=-2,A=-3,z=-4,E=-5,j=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],D=1440,O=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],C=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],R=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],U=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],F=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],W=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],I=15;function P(){let e,t,n,r,i,a;function o(e,t,o,s,c,l,d,f,u,p,h){let m,y,w,g,b,x,v,k,S,z,j,O,C,R,U;z=0,b=o;do{n[e[t+z]]++,z++,b--}while(0!==b);if(n[0]==o)return d[0]=-1,f[0]=0,_;for(k=f[0],x=1;x<=I&&0===n[x];x++);for(v=x,k<x&&(k=x),b=I;0!==b&&0===n[b];b--);for(w=b,k>b&&(k=b),f[0]=k,R=1<<x;x<b;x++,R<<=1)if((R-=n[x])<0)return A;if((R-=n[b])<0)return A;for(n[b]+=R,a[1]=x=0,z=1,C=2;0!=--b;)a[C]=x+=n[z],C++,z++;b=0,z=0;do{0!==(x=e[t+z])&&(h[a[x]++]=b),z++}while(++b<o);for(o=a[w],a[0]=b=0,z=0,g=-1,O=-k,i[0]=0,j=0,U=0;v<=w;v++)for(m=n[v];0!=m--;){for(;v>O+k;){if(g++,O+=k,U=w-O,U=U>k?k:U,(y=1<<(x=v-O))>m+1&&(y-=m+1,C=v,x<U))for(;++x<U&&!((y<<=1)<=n[++C]);)y-=n[C];if(U=1<<x,p[0]+U>D)return A;i[g]=j=p[0],p[0]+=U,0!==g?(a[g]=b,r[0]=x,r[1]=k,x=b>>>O-k,r[2]=j-i[g-1]-x,u.set(r,3*(i[g-1]+x))):d[0]=j}for(r[1]=v-O,z>=o?r[0]=192:h[z]<s?(r[0]=h[z]<256?0:96,r[2]=h[z++]):(r[0]=l[h[z]-s]+16+64,r[2]=c[h[z++]-s]),y=1<<v-O,x=b>>>O;x<U;x+=y)u.set(r,3*(j+x));for(x=1<<v-1;0!=(b&x);x>>>=1)b^=x;for(b^=x,S=(1<<O)-1;(b&S)!=a[g];)g--,O-=k,S=(1<<O)-1}return 0!==R&&1!=w?E:_}function s(o){let s;for(e||(e=[],t=[],n=new Int32Array(I+1),r=[],i=new Int32Array(I),a=new Int32Array(I+1)),t.length<o&&(t=[]),s=0;s<o;s++)t[s]=0;for(s=0;s<I+1;s++)n[s]=0;for(s=0;s<3;s++)r[s]=0;i.set(n.subarray(0,I),0),a.set(n.subarray(0,I+1),0)}this.inflate_trees_bits=function(n,r,i,a,c){let l;return s(19),e[0]=0,l=o(n,0,19,19,null,null,i,r,a,e,t),l==A?c.msg="oversubscribed dynamic bit lengths tree":l!=E&&0!==r[0]||(c.msg="incomplete dynamic bit lengths tree",l=A),l},this.inflate_trees_dynamic=function(n,r,i,a,c,l,d,f,u){let p;return s(288),e[0]=0,p=o(i,0,n,257,R,U,l,a,f,e,t),p!=_||0===a[0]?(p==A?u.msg="oversubscribed literal/length tree":p!=z&&(u.msg="incomplete literal/length tree",p=A),p):(s(288),p=o(i,n,r,0,F,W,d,c,f,e,t),p!=_||0===c[0]&&n>257?(p==A?u.msg="oversubscribed distance tree":p==E?(u.msg="incomplete distance tree",p=A):p!=z&&(u.msg="empty distance tree with lengths",p=A),p):_)}}P.inflate_trees_fixed=function(e,t,n,r){return e[0]=9,t[0]=5,n[0]=O,r[0]=C,_};const T=0,q=1,L=2,M=3,N=4,B=5,H=6,V=7,Z=8,K=9;function Y(){const e=this;let t,n,r,i,a=0,o=0,s=0,c=0,l=0,d=0,f=0,u=0,p=0,h=0;function m(e,t,n,r,i,a,o,s){let c,l,d,f,u,p,h,m,y,w,g,b,x,v,S,z;h=s.next_in_index,m=s.avail_in,u=o.bitb,p=o.bitk,y=o.write,w=y<o.read?o.read-y-1:o.end-y,g=j[e],b=j[t];do{for(;p<20;)m--,u|=(255&s.read_byte(h++))<<p,p+=8;if(c=u&g,l=n,d=r,z=3*(d+c),0!==(f=l[z]))for(;;){if(u>>=l[z+1],p-=l[z+1],0!=(16&f)){for(f&=15,x=l[z+2]+(u&j[f]),u>>=f,p-=f;p<15;)m--,u|=(255&s.read_byte(h++))<<p,p+=8;for(c=u&b,l=i,d=a,z=3*(d+c),f=l[z];;){if(u>>=l[z+1],p-=l[z+1],0!=(16&f)){for(f&=15;p<f;)m--,u|=(255&s.read_byte(h++))<<p,p+=8;if(v=l[z+2]+(u&j[f]),u>>=f,p-=f,w-=x,y>=v)S=y-v,y-S>0&&2>y-S?(o.win[y++]=o.win[S++],o.win[y++]=o.win[S++],x-=2):(o.win.set(o.win.subarray(S,S+2),y),y+=2,S+=2,x-=2);else{S=y-v;do{S+=o.end}while(S<0);if(f=o.end-S,x>f){if(x-=f,y-S>0&&f>y-S)do{o.win[y++]=o.win[S++]}while(0!=--f);else o.win.set(o.win.subarray(S,S+f),y),y+=f,S+=f,f=0;S=0}}if(y-S>0&&x>y-S)do{o.win[y++]=o.win[S++]}while(0!=--x);else o.win.set(o.win.subarray(S,S+x),y),y+=x,S+=x,x=0;break}if(0!=(64&f))return s.msg="invalid distance code",x=s.avail_in-m,x=p>>3<x?p>>3:x,m+=x,h-=x,p-=x<<3,o.bitb=u,o.bitk=p,s.avail_in=m,s.total_in+=h-s.next_in_index,s.next_in_index=h,o.write=y,A;c+=l[z+2],c+=u&j[f],z=3*(d+c),f=l[z]}break}if(0!=(64&f))return 0!=(32&f)?(x=s.avail_in-m,x=p>>3<x?p>>3:x,m+=x,h-=x,p-=x<<3,o.bitb=u,o.bitk=p,s.avail_in=m,s.total_in+=h-s.next_in_index,s.next_in_index=h,o.write=y,k):(s.msg="invalid literal/length code",x=s.avail_in-m,x=p>>3<x?p>>3:x,m+=x,h-=x,p-=x<<3,o.bitb=u,o.bitk=p,s.avail_in=m,s.total_in+=h-s.next_in_index,s.next_in_index=h,o.write=y,A);if(c+=l[z+2],c+=u&j[f],z=3*(d+c),0===(f=l[z])){u>>=l[z+1],p-=l[z+1],o.win[y++]=l[z+2],w--;break}}else u>>=l[z+1],p-=l[z+1],o.win[y++]=l[z+2],w--}while(w>=258&&m>=10);return x=s.avail_in-m,x=p>>3<x?p>>3:x,m+=x,h-=x,p-=x<<3,o.bitb=u,o.bitk=p,s.avail_in=m,s.total_in+=h-s.next_in_index,s.next_in_index=h,o.write=y,_}e.init=function(e,a,o,s,c,l){t=T,f=e,u=a,r=o,p=s,i=c,h=l,n=null},e.proc=function(e,y,w){let g,b,x,v,z,E,D,O=0,C=0,R=0;for(R=y.next_in_index,v=y.avail_in,O=e.bitb,C=e.bitk,z=e.write,E=z<e.read?e.read-z-1:e.end-z;;)switch(t){case T:if(E>=258&&v>=10&&(e.bitb=O,e.bitk=C,y.avail_in=v,y.total_in+=R-y.next_in_index,y.next_in_index=R,e.write=z,w=m(f,u,r,p,i,h,e,y),R=y.next_in_index,v=y.avail_in,O=e.bitb,C=e.bitk,z=e.write,E=z<e.read?e.read-z-1:e.end-z,w!=_)){t=w==k?V:K;break}s=f,n=r,o=p,t=q;case q:for(g=s;C<g;){if(0===v)return e.bitb=O,e.bitk=C,y.avail_in=v,y.total_in+=R-y.next_in_index,y.next_in_index=R,e.write=z,e.inflate_flush(y,w);w=_,v--,O|=(255&y.read_byte(R++))<<C,C+=8}if(b=3*(o+(O&j[g])),O>>>=n[b+1],C-=n[b+1],x=n[b],0===x){c=n[b+2],t=H;break}if(0!=(16&x)){l=15&x,a=n[b+2],t=L;break}if(0==(64&x)){s=x,o=b/3+n[b+2];break}if(0!=(32&x)){t=V;break}return t=K,y.msg="invalid literal/length code",w=A,e.bitb=O,e.bitk=C,y.avail_in=v,y.total_in+=R-y.next_in_index,y.next_in_index=R,e.write=z,e.inflate_flush(y,w);case L:for(g=l;C<g;){if(0===v)return e.bitb=O,e.bitk=C,y.avail_in=v,y.total_in+=R-y.next_in_index,y.next_in_index=R,e.write=z,e.inflate_flush(y,w);w=_,v--,O|=(255&y.read_byte(R++))<<C,C+=8}a+=O&j[g],O>>=g,C-=g,s=u,n=i,o=h,t=M;case M:for(g=s;C<g;){if(0===v)return e.bitb=O,e.bitk=C,y.avail_in=v,y.total_in+=R-y.next_in_index,y.next_in_index=R,e.write=z,e.inflate_flush(y,w);w=_,v--,O|=(255&y.read_byte(R++))<<C,C+=8}if(b=3*(o+(O&j[g])),O>>=n[b+1],C-=n[b+1],x=n[b],0!=(16&x)){l=15&x,d=n[b+2],t=N;break}if(0==(64&x)){s=x,o=b/3+n[b+2];break}return t=K,y.msg="invalid distance code",w=A,e.bitb=O,e.bitk=C,y.avail_in=v,y.total_in+=R-y.next_in_index,y.next_in_index=R,e.write=z,e.inflate_flush(y,w);case N:for(g=l;C<g;){if(0===v)return e.bitb=O,e.bitk=C,y.avail_in=v,y.total_in+=R-y.next_in_index,y.next_in_index=R,e.write=z,e.inflate_flush(y,w);w=_,v--,O|=(255&y.read_byte(R++))<<C,C+=8}d+=O&j[g],O>>=g,C-=g,t=B;case B:for(D=z-d;D<0;)D+=e.end;for(;0!==a;){if(0===E&&(z==e.end&&0!==e.read&&(z=0,E=z<e.read?e.read-z-1:e.end-z),0===E&&(e.write=z,w=e.inflate_flush(y,w),z=e.write,E=z<e.read?e.read-z-1:e.end-z,z==e.end&&0!==e.read&&(z=0,E=z<e.read?e.read-z-1:e.end-z),0===E)))return e.bitb=O,e.bitk=C,y.avail_in=v,y.total_in+=R-y.next_in_index,y.next_in_index=R,e.write=z,e.inflate_flush(y,w);e.win[z++]=e.win[D++],E--,D==e.end&&(D=0),a--}t=T;break;case H:if(0===E&&(z==e.end&&0!==e.read&&(z=0,E=z<e.read?e.read-z-1:e.end-z),0===E&&(e.write=z,w=e.inflate_flush(y,w),z=e.write,E=z<e.read?e.read-z-1:e.end-z,z==e.end&&0!==e.read&&(z=0,E=z<e.read?e.read-z-1:e.end-z),0===E)))return e.bitb=O,e.bitk=C,y.avail_in=v,y.total_in+=R-y.next_in_index,y.next_in_index=R,e.write=z,e.inflate_flush(y,w);w=_,e.win[z++]=c,E--,t=T;break;case V:if(C>7&&(C-=8,v++,R--),e.write=z,w=e.inflate_flush(y,w),z=e.write,E=z<e.read?e.read-z-1:e.end-z,e.read!=e.write)return e.bitb=O,e.bitk=C,y.avail_in=v,y.total_in+=R-y.next_in_index,y.next_in_index=R,e.write=z,e.inflate_flush(y,w);t=Z;case Z:return w=k,e.bitb=O,e.bitk=C,y.avail_in=v,y.total_in+=R-y.next_in_index,y.next_in_index=R,e.write=z,e.inflate_flush(y,w);case K:return w=A,e.bitb=O,e.bitk=C,y.avail_in=v,y.total_in+=R-y.next_in_index,y.next_in_index=R,e.write=z,e.inflate_flush(y,w);default:return w=S,e.bitb=O,e.bitk=C,y.avail_in=v,y.total_in+=R-y.next_in_index,y.next_in_index=R,e.write=z,e.inflate_flush(y,w)}},e.free=function(){}}const $=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],G=0,X=1,J=2,Q=3,ee=4,te=5,ne=6,re=7,ie=8,ae=9;function oe(e,t){const n=this;let r,i=G,a=0,o=0,s=0;const c=[0],l=[0],d=new Y;let f=0,u=new Int32Array(3*D);const p=new P;n.bitk=0,n.bitb=0,n.win=new Uint8Array(t),n.end=t,n.read=0,n.write=0,n.reset=function(e,t){t&&(t[0]=0),i==ne&&d.free(e),i=G,n.bitk=0,n.bitb=0,n.read=n.write=0},n.reset(e,null),n.inflate_flush=function(e,t){let r,i,a;return i=e.next_out_index,a=n.read,r=(a<=n.write?n.write:n.end)-a,r>e.avail_out&&(r=e.avail_out),0!==r&&t==E&&(t=_),e.avail_out-=r,e.total_out+=r,e.next_out.set(n.win.subarray(a,a+r),i),i+=r,a+=r,a==n.end&&(a=0,n.write==n.end&&(n.write=0),r=n.write-a,r>e.avail_out&&(r=e.avail_out),0!==r&&t==E&&(t=_),e.avail_out-=r,e.total_out+=r,e.next_out.set(n.win.subarray(a,a+r),i),i+=r,a+=r),e.next_out_index=i,n.read=a,t},n.proc=function(e,t){let h,m,y,w,g,b,x,v;for(w=e.next_in_index,g=e.avail_in,m=n.bitb,y=n.bitk,b=n.write,x=b<n.read?n.read-b-1:n.end-b;;){let z,E,D,O,C,R,U,F;switch(i){case G:for(;y<3;){if(0===g)return n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);t=_,g--,m|=(255&e.read_byte(w++))<<y,y+=8}switch(h=7&m,f=1&h,h>>>1){case 0:m>>>=3,y-=3,h=7&y,m>>>=h,y-=h,i=X;break;case 1:z=[],E=[],D=[[]],O=[[]],P.inflate_trees_fixed(z,E,D,O),d.init(z[0],E[0],D[0],0,O[0],0),m>>>=3,y-=3,i=ne;break;case 2:m>>>=3,y-=3,i=Q;break;case 3:return m>>>=3,y-=3,i=ae,e.msg="invalid block type",t=A,n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t)}break;case X:for(;y<32;){if(0===g)return n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);t=_,g--,m|=(255&e.read_byte(w++))<<y,y+=8}if((~m>>>16&65535)!=(65535&m))return i=ae,e.msg="invalid stored block lengths",t=A,n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);a=65535&m,m=y=0,i=0!==a?J:0!==f?re:G;break;case J:if(0===g)return n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);if(0===x&&(b==n.end&&0!==n.read&&(b=0,x=b<n.read?n.read-b-1:n.end-b),0===x&&(n.write=b,t=n.inflate_flush(e,t),b=n.write,x=b<n.read?n.read-b-1:n.end-b,b==n.end&&0!==n.read&&(b=0,x=b<n.read?n.read-b-1:n.end-b),0===x)))return n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);if(t=_,h=a,h>g&&(h=g),h>x&&(h=x),n.win.set(e.read_buf(w,h),b),w+=h,g-=h,b+=h,x-=h,0!=(a-=h))break;i=0!==f?re:G;break;case Q:for(;y<14;){if(0===g)return n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);t=_,g--,m|=(255&e.read_byte(w++))<<y,y+=8}if(o=h=16383&m,(31&h)>29||(h>>5&31)>29)return i=ae,e.msg="too many length or distance symbols",t=A,n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);if(h=258+(31&h)+(h>>5&31),!r||r.length<h)r=[];else for(v=0;v<h;v++)r[v]=0;m>>>=14,y-=14,s=0,i=ee;case ee:for(;s<4+(o>>>10);){for(;y<3;){if(0===g)return n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);t=_,g--,m|=(255&e.read_byte(w++))<<y,y+=8}r[$[s++]]=7&m,m>>>=3,y-=3}for(;s<19;)r[$[s++]]=0;if(c[0]=7,h=p.inflate_trees_bits(r,c,l,u,e),h!=_)return(t=h)==A&&(r=null,i=ae),n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);s=0,i=te;case te:for(;h=o,!(s>=258+(31&h)+(h>>5&31));){let a,d;for(h=c[0];y<h;){if(0===g)return n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);t=_,g--,m|=(255&e.read_byte(w++))<<y,y+=8}if(h=u[3*(l[0]+(m&j[h]))+1],d=u[3*(l[0]+(m&j[h]))+2],d<16)m>>>=h,y-=h,r[s++]=d;else{for(v=18==d?7:d-14,a=18==d?11:3;y<h+v;){if(0===g)return n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);t=_,g--,m|=(255&e.read_byte(w++))<<y,y+=8}if(m>>>=h,y-=h,a+=m&j[v],m>>>=v,y-=v,v=s,h=o,v+a>258+(31&h)+(h>>5&31)||16==d&&v<1)return r=null,i=ae,e.msg="invalid bit length repeat",t=A,n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);d=16==d?r[v-1]:0;do{r[v++]=d}while(0!=--a);s=v}}if(l[0]=-1,C=[],R=[],U=[],F=[],C[0]=9,R[0]=6,h=o,h=p.inflate_trees_dynamic(257+(31&h),1+(h>>5&31),r,C,R,U,F,u,e),h!=_)return h==A&&(r=null,i=ae),t=h,n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);d.init(C[0],R[0],u,U[0],u,F[0]),i=ne;case ne:if(n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,(t=d.proc(n,e,t))!=k)return n.inflate_flush(e,t);if(t=_,d.free(e),w=e.next_in_index,g=e.avail_in,m=n.bitb,y=n.bitk,b=n.write,x=b<n.read?n.read-b-1:n.end-b,0===f){i=G;break}i=re;case re:if(n.write=b,t=n.inflate_flush(e,t),b=n.write,x=b<n.read?n.read-b-1:n.end-b,n.read!=n.write)return n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);i=ie;case ie:return t=k,n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);case ae:return t=A,n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t);default:return t=S,n.bitb=m,n.bitk=y,e.avail_in=g,e.total_in+=w-e.next_in_index,e.next_in_index=w,n.write=b,n.inflate_flush(e,t)}}},n.free=function(e){n.reset(e,null),n.win=null,u=null},n.set_dictionary=function(e,t,r){n.win.set(e.subarray(t,t+r),0),n.read=n.write=r},n.sync_point=function(){return i==X?1:0}}const se=13,ce=[0,0,255,255];function le(){const e=this;function t(e){return e&&e.istate?(e.total_in=e.total_out=0,e.msg=null,e.istate.mode=7,e.istate.blocks.reset(e,null),_):S}e.mode=0,e.method=0,e.was=[0],e.need=0,e.marker=0,e.wbits=0,e.inflateEnd=function(t){return e.blocks&&e.blocks.free(t),e.blocks=null,_},e.inflateInit=function(n,r){return n.msg=null,e.blocks=null,r<8||r>15?(e.inflateEnd(n),S):(e.wbits=r,n.istate.blocks=new oe(n,1<<r),t(n),_)},e.inflate=function(e,t){let n,r;if(!e||!e.istate||!e.next_in)return S;const i=e.istate;for(t=4==t?E:_,n=E;;)switch(i.mode){case 0:if(0===e.avail_in)return n;if(n=t,e.avail_in--,e.total_in++,8!=(15&(i.method=e.read_byte(e.next_in_index++)))){i.mode=se,e.msg="unknown compression method",i.marker=5;break}if(8+(i.method>>4)>i.wbits){i.mode=se,e.msg="invalid win size",i.marker=5;break}i.mode=1;case 1:if(0===e.avail_in)return n;if(n=t,e.avail_in--,e.total_in++,r=255&e.read_byte(e.next_in_index++),((i.method<<8)+r)%31!=0){i.mode=se,e.msg="incorrect header check",i.marker=5;break}if(0==(32&r)){i.mode=7;break}i.mode=2;case 2:if(0===e.avail_in)return n;n=t,e.avail_in--,e.total_in++,i.need=(255&e.read_byte(e.next_in_index++))<<24&4278190080,i.mode=3;case 3:if(0===e.avail_in)return n;n=t,e.avail_in--,e.total_in++,i.need+=(255&e.read_byte(e.next_in_index++))<<16&16711680,i.mode=4;case 4:if(0===e.avail_in)return n;n=t,e.avail_in--,e.total_in++,i.need+=(255&e.read_byte(e.next_in_index++))<<8&65280,i.mode=5;case 5:return 0===e.avail_in?n:(n=t,e.avail_in--,e.total_in++,i.need+=255&e.read_byte(e.next_in_index++),i.mode=6,2);case 6:return i.mode=se,e.msg="need dictionary",i.marker=0,S;case 7:if(n=i.blocks.proc(e,n),n==A){i.mode=se,i.marker=0;break}if(n==_&&(n=t),n!=k)return n;n=t,i.blocks.reset(e,i.was),i.mode=12;case 12:return e.avail_in=0,k;case se:return A;default:return S}},e.inflateSetDictionary=function(e,t,n){let r=0,i=n;if(!e||!e.istate||6!=e.istate.mode)return S;const a=e.istate;return i>=1<<a.wbits&&(i=(1<<a.wbits)-1,r=n-i),a.blocks.set_dictionary(t,r,i),a.mode=7,_},e.inflateSync=function(e){let n,r,i,a,o;if(!e||!e.istate)return S;const s=e.istate;if(s.mode!=se&&(s.mode=se,s.marker=0),0===(n=e.avail_in))return E;for(r=e.next_in_index,i=s.marker;0!==n&&i<4;)e.read_byte(r)==ce[i]?i++:i=0!==e.read_byte(r)?0:4-i,r++,n--;return e.total_in+=r-e.next_in_index,e.next_in_index=r,e.avail_in=n,s.marker=i,4!=i?A:(a=e.total_in,o=e.total_out,t(e),e.total_in=a,e.total_out=o,s.mode=7,_)},e.inflateSyncPoint=function(e){return e&&e.istate&&e.istate.blocks?e.istate.blocks.sync_point():S}}function de(){}de.prototype={inflateInit(e){const t=this;return t.istate=new le,e||(e=15),t.istate.inflateInit(t,e)},inflate(e){const t=this;return t.istate?t.istate.inflate(t,e):S},inflateEnd(){const e=this;if(!e.istate)return S;const t=e.istate.inflateEnd(e);return e.istate=null,t},inflateSync(){const e=this;return e.istate?e.istate.inflateSync(e):S},inflateSetDictionary(e,t){const n=this;return n.istate?n.istate.inflateSetDictionary(n,e,t):S},read_byte(e){return this.next_in[e]},read_buf(e,t){return this.next_in.subarray(e,e+t)}};const fe=4294967295,ue=65535,pe=67324752,he=134695760,me=33639248,ye=101010256,we=101075792,ge=117853008,be=22,xe=21589,ve=2048,_e="/",ke=new Date(2107,11,31),Se=new Date(1980,0,1),Ae=void 0,ze="undefined",Ee="function";class je{constructor(e){return class extends TransformStream{constructor(t,n){const r=new e(n);super({transform(e,t){t.enqueue(r.append(e))},flush(e){const t=r.flush();t&&e.enqueue(t)}})}}}}let De=2;try{typeof navigator!=ze&&navigator.hardwareConcurrency&&(De=navigator.hardwareConcurrency)}catch(e){}const Oe={chunkSize:524288,maxWorkers:De,terminateWorkerTimeout:5e3,useWebWorkers:!0,useCompressionStream:!0,workerScripts:Ae,CompressionStreamNative:typeof CompressionStream!=ze&&CompressionStream,DecompressionStreamNative:typeof DecompressionStream!=ze&&DecompressionStream},Ce=Object.assign({},Oe);function Re(){return Ce}function Ue(e){return Math.max(e.chunkSize,64)}function Fe(e){const{baseURL:t,chunkSize:n,maxWorkers:r,terminateWorkerTimeout:i,useCompressionStream:a,useWebWorkers:o,Deflate:s,Inflate:c,CompressionStream:l,DecompressionStream:d,workerScripts:f}=e;if(We("baseURL",t),We("chunkSize",n),We("maxWorkers",r),We("terminateWorkerTimeout",i),We("useCompressionStream",a),We("useWebWorkers",o),s&&(Ce.CompressionStream=new je(s)),c&&(Ce.DecompressionStream=new je(c)),We("CompressionStream",l),We("DecompressionStream",d),f!==Ae){const{deflate:e,inflate:t}=f;if((e||t)&&(Ce.workerScripts||(Ce.workerScripts={})),e){if(!Array.isArray(e))throw new Error("workerScripts.deflate must be an array");Ce.workerScripts.deflate=e}if(t){if(!Array.isArray(t))throw new Error("workerScripts.inflate must be an array");Ce.workerScripts.inflate=t}}}function We(e,t){t!==Ae&&(Ce[e]=t)}const Ie={application:{"andrew-inset":"ez",annodex:"anx","atom+xml":"atom","atomcat+xml":"atomcat","atomserv+xml":"atomsrv",bbolin:"lin","cu-seeme":"cu","davmount+xml":"davmount",dsptype:"tsp",ecmascript:["es","ecma"],futuresplash:"spl",hta:"hta","java-archive":"jar","java-serialized-object":"ser","java-vm":"class",m3g:"m3g","mac-binhex40":"hqx",mathematica:["nb","ma","mb"],msaccess:"mdb",msword:["doc","dot","wiz"],mxf:"mxf",oda:"oda",ogg:"ogx",pdf:"pdf","pgp-keys":"key","pgp-signature":["asc","sig"],"pics-rules":"prf",postscript:["ps","ai","eps","epsi","epsf","eps2","eps3"],rar:"rar","rdf+xml":"rdf","rss+xml":"rss",rtf:"rtf","xhtml+xml":["xhtml","xht"],xml:["xml","xsl","xsd","xpdl"],"xspf+xml":"xspf",zip:"zip","vnd.android.package-archive":"apk","vnd.cinderella":"cdy","vnd.google-earth.kml+xml":"kml","vnd.google-earth.kmz":"kmz","vnd.mozilla.xul+xml":"xul","vnd.ms-excel":["xls","xlb","xlt","xlm","xla","xlc","xlw"],"vnd.ms-pki.seccat":"cat","vnd.ms-pki.stl":"stl","vnd.ms-powerpoint":["ppt","pps","pot","ppa","pwz"],"vnd.oasis.opendocument.chart":"odc","vnd.oasis.opendocument.database":"odb","vnd.oasis.opendocument.formula":"odf","vnd.oasis.opendocument.graphics":"odg","vnd.oasis.opendocument.graphics-template":"otg","vnd.oasis.opendocument.image":"odi","vnd.oasis.opendocument.presentation":"odp","vnd.oasis.opendocument.presentation-template":"otp","vnd.oasis.opendocument.spreadsheet":"ods","vnd.oasis.opendocument.spreadsheet-template":"ots","vnd.oasis.opendocument.text":"odt","vnd.oasis.opendocument.text-master":["odm","otm"],"vnd.oasis.opendocument.text-template":"ott","vnd.oasis.opendocument.text-web":"oth","vnd.openxmlformats-officedocument.spreadsheetml.sheet":"xlsx","vnd.openxmlformats-officedocument.spreadsheetml.template":"xltx","vnd.openxmlformats-officedocument.presentationml.presentation":"pptx","vnd.openxmlformats-officedocument.presentationml.slideshow":"ppsx","vnd.openxmlformats-officedocument.presentationml.template":"potx","vnd.openxmlformats-officedocument.wordprocessingml.document":"docx","vnd.openxmlformats-officedocument.wordprocessingml.template":"dotx","vnd.smaf":"mmf","vnd.stardivision.calc":"sdc","vnd.stardivision.chart":"sds","vnd.stardivision.draw":"sda","vnd.stardivision.impress":"sdd","vnd.stardivision.math":["sdf","smf"],"vnd.stardivision.writer":["sdw","vor"],"vnd.stardivision.writer-global":"sgl","vnd.sun.xml.calc":"sxc","vnd.sun.xml.calc.template":"stc","vnd.sun.xml.draw":"sxd","vnd.sun.xml.draw.template":"std","vnd.sun.xml.impress":"sxi","vnd.sun.xml.impress.template":"sti","vnd.sun.xml.math":"sxm","vnd.sun.xml.writer":"sxw","vnd.sun.xml.writer.global":"sxg","vnd.sun.xml.writer.template":"stw","vnd.symbian.install":["sis","sisx"],"vnd.visio":["vsd","vst","vss","vsw","vsdx","vssx","vstx","vssm","vstm"],"vnd.wap.wbxml":"wbxml","vnd.wap.wmlc":"wmlc","vnd.wap.wmlscriptc":"wmlsc","vnd.wordperfect":"wpd","vnd.wordperfect5.1":"wp5","x-123":"wk","x-7z-compressed":"7z","x-abiword":"abw","x-apple-diskimage":"dmg","x-bcpio":"bcpio","x-bittorrent":"torrent","x-cbr":["cbr","cba","cbt","cb7"],"x-cbz":"cbz","x-cdf":["cdf","cda"],"x-cdlink":"vcd","x-chess-pgn":"pgn","x-cpio":"cpio","x-csh":"csh","x-director":["dir","dxr","cst","cct","cxt","w3d","fgd","swa"],"x-dms":"dms","x-doom":"wad","x-dvi":"dvi","x-httpd-eruby":"rhtml","x-font":"pcf.Z","x-freemind":"mm","x-gnumeric":"gnumeric","x-go-sgf":"sgf","x-graphing-calculator":"gcf","x-gtar":["gtar","taz"],"x-hdf":"hdf","x-httpd-php":["phtml","pht","php"],"x-httpd-php-source":"phps","x-httpd-php3":"php3","x-httpd-php3-preprocessed":"php3p","x-httpd-php4":"php4","x-httpd-php5":"php5","x-ica":"ica","x-info":"info","x-internet-signup":["ins","isp"],"x-iphone":"iii","x-iso9660-image":"iso","x-java-jnlp-file":"jnlp","x-jmol":"jmz","x-killustrator":"kil","x-latex":"latex","x-lyx":"lyx","x-lzx":"lzx","x-maker":["frm","fb","fbdoc"],"x-ms-wmd":"wmd","x-msdos-program":["com","exe","bat","dll"],"x-netcdf":["nc"],"x-ns-proxy-autoconfig":["pac","dat"],"x-nwc":"nwc","x-object":"o","x-oz-application":"oza","x-pkcs7-certreqresp":"p7r","x-python-code":["pyc","pyo"],"x-qgis":["qgs","shp","shx"],"x-quicktimeplayer":"qtl","x-redhat-package-manager":["rpm","rpa"],"x-ruby":"rb","x-sh":"sh","x-shar":"shar","x-shockwave-flash":["swf","swfl"],"x-silverlight":"scr","x-stuffit":"sit","x-sv4cpio":"sv4cpio","x-sv4crc":"sv4crc","x-tar":"tar","x-tex-gf":"gf","x-tex-pk":"pk","x-texinfo":["texinfo","texi"],"x-trash":["~","%","bak","old","sik"],"x-ustar":"ustar","x-wais-source":"src","x-wingz":"wz","x-x509-ca-cert":["crt","der","cer"],"x-xcf":"xcf","x-xfig":"fig","x-xpinstall":"xpi",applixware:"aw","atomsvc+xml":"atomsvc","ccxml+xml":"ccxml","cdmi-capability":"cdmia","cdmi-container":"cdmic","cdmi-domain":"cdmid","cdmi-object":"cdmio","cdmi-queue":"cdmiq","docbook+xml":"dbk","dssc+der":"dssc","dssc+xml":"xdssc","emma+xml":"emma","epub+zip":"epub",exi:"exi","font-tdpfr":"pfr","gml+xml":"gml","gpx+xml":"gpx",gxf:"gxf",hyperstudio:"stk","inkml+xml":["ink","inkml"],ipfix:"ipfix","jsonml+json":"jsonml","lost+xml":"lostxml","mads+xml":"mads",marc:"mrc","marcxml+xml":"mrcx","mathml+xml":["mathml","mml"],mbox:"mbox","mediaservercontrol+xml":"mscml","metalink+xml":"metalink","metalink4+xml":"meta4","mets+xml":"mets","mods+xml":"mods",mp21:["m21","mp21"],mp4:"mp4s","oebps-package+xml":"opf","omdoc+xml":"omdoc",onenote:["onetoc","onetoc2","onetmp","onepkg"],oxps:"oxps","patch-ops-error+xml":"xer","pgp-encrypted":"pgp",pkcs10:"p10","pkcs7-mime":["p7m","p7c"],"pkcs7-signature":"p7s",pkcs8:"p8","pkix-attr-cert":"ac","pkix-crl":"crl","pkix-pkipath":"pkipath",pkixcmp:"pki","pls+xml":"pls","prs.cww":"cww","pskc+xml":"pskcxml","reginfo+xml":"rif","relax-ng-compact-syntax":"rnc","resource-lists+xml":"rl","resource-lists-diff+xml":"rld","rls-services+xml":"rs","rpki-ghostbusters":"gbr","rpki-manifest":"mft","rpki-roa":"roa","rsd+xml":"rsd","sbml+xml":"sbml","scvp-cv-request":"scq","scvp-cv-response":"scs","scvp-vp-request":"spq","scvp-vp-response":"spp",sdp:"sdp","set-payment-initiation":"setpay","set-registration-initiation":"setreg","shf+xml":"shf","sparql-query":"rq","sparql-results+xml":"srx",srgs:"gram","srgs+xml":"grxml","sru+xml":"sru","ssdl+xml":"ssdl","ssml+xml":"ssml","tei+xml":["tei","teicorpus"],"thraud+xml":"tfi","timestamped-data":"tsd","vnd.3gpp.pic-bw-large":"plb","vnd.3gpp.pic-bw-small":"psb","vnd.3gpp.pic-bw-var":"pvb","vnd.3gpp2.tcap":"tcap","vnd.3m.post-it-notes":"pwn","vnd.accpac.simply.aso":"aso","vnd.accpac.simply.imp":"imp","vnd.acucobol":"acu","vnd.acucorp":["atc","acutc"],"vnd.adobe.air-application-installer-package+zip":"air","vnd.adobe.formscentral.fcdt":"fcdt","vnd.adobe.fxp":["fxp","fxpl"],"vnd.adobe.xdp+xml":"xdp","vnd.adobe.xfdf":"xfdf","vnd.ahead.space":"ahead","vnd.airzip.filesecure.azf":"azf","vnd.airzip.filesecure.azs":"azs","vnd.amazon.ebook":"azw","vnd.americandynamics.acc":"acc","vnd.amiga.ami":"ami","vnd.anser-web-certificate-issue-initiation":"cii","vnd.anser-web-funds-transfer-initiation":"fti","vnd.antix.game-component":"atx","vnd.apple.installer+xml":"mpkg","vnd.apple.mpegurl":"m3u8","vnd.aristanetworks.swi":"swi","vnd.astraea-software.iota":"iota","vnd.audiograph":"aep","vnd.blueice.multipass":"mpm","vnd.bmi":"bmi","vnd.businessobjects":"rep","vnd.chemdraw+xml":"cdxml","vnd.chipnuts.karaoke-mmd":"mmd","vnd.claymore":"cla","vnd.cloanto.rp9":"rp9","vnd.clonk.c4group":["c4g","c4d","c4f","c4p","c4u"],"vnd.cluetrust.cartomobile-config":"c11amc","vnd.cluetrust.cartomobile-config-pkg":"c11amz","vnd.commonspace":"csp","vnd.contact.cmsg":"cdbcmsg","vnd.cosmocaller":"cmc","vnd.crick.clicker":"clkx","vnd.crick.clicker.keyboard":"clkk","vnd.crick.clicker.palette":"clkp","vnd.crick.clicker.template":"clkt","vnd.crick.clicker.wordbank":"clkw","vnd.criticaltools.wbs+xml":"wbs","vnd.ctc-posml":"pml","vnd.cups-ppd":"ppd","vnd.curl.car":"car","vnd.curl.pcurl":"pcurl","vnd.dart":"dart","vnd.data-vision.rdz":"rdz","vnd.dece.data":["uvf","uvvf","uvd","uvvd"],"vnd.dece.ttml+xml":["uvt","uvvt"],"vnd.dece.unspecified":["uvx","uvvx"],"vnd.dece.zip":["uvz","uvvz"],"vnd.denovo.fcselayout-link":"fe_launch","vnd.dna":"dna","vnd.dolby.mlp":"mlp","vnd.dpgraph":"dpg","vnd.dreamfactory":"dfac","vnd.ds-keypoint":"kpxx","vnd.dvb.ait":"ait","vnd.dvb.service":"svc","vnd.dynageo":"geo","vnd.ecowin.chart":"mag","vnd.enliven":"nml","vnd.epson.esf":"esf","vnd.epson.msf":"msf","vnd.epson.quickanime":"qam","vnd.epson.salt":"slt","vnd.epson.ssf":"ssf","vnd.eszigno3+xml":["es3","et3"],"vnd.ezpix-album":"ez2","vnd.ezpix-package":"ez3","vnd.fdf":"fdf","vnd.fdsn.mseed":"mseed","vnd.fdsn.seed":["seed","dataless"],"vnd.flographit":"gph","vnd.fluxtime.clip":"ftc","vnd.framemaker":["fm","frame","maker","book"],"vnd.frogans.fnc":"fnc","vnd.frogans.ltf":"ltf","vnd.fsc.weblaunch":"fsc","vnd.fujitsu.oasys":"oas","vnd.fujitsu.oasys2":"oa2","vnd.fujitsu.oasys3":"oa3","vnd.fujitsu.oasysgp":"fg5","vnd.fujitsu.oasysprs":"bh2","vnd.fujixerox.ddd":"ddd","vnd.fujixerox.docuworks":"xdw","vnd.fujixerox.docuworks.binder":"xbd","vnd.fuzzysheet":"fzs","vnd.genomatix.tuxedo":"txd","vnd.geogebra.file":"ggb","vnd.geogebra.tool":"ggt","vnd.geometry-explorer":["gex","gre"],"vnd.geonext":"gxt","vnd.geoplan":"g2w","vnd.geospace":"g3w","vnd.gmx":"gmx","vnd.grafeq":["gqf","gqs"],"vnd.groove-account":"gac","vnd.groove-help":"ghf","vnd.groove-identity-message":"gim","vnd.groove-injector":"grv","vnd.groove-tool-message":"gtm","vnd.groove-tool-template":"tpl","vnd.groove-vcard":"vcg","vnd.hal+xml":"hal","vnd.handheld-entertainment+xml":"zmm","vnd.hbci":"hbci","vnd.hhe.lesson-player":"les","vnd.hp-hpgl":"hpgl","vnd.hp-hpid":"hpid","vnd.hp-hps":"hps","vnd.hp-jlyt":"jlt","vnd.hp-pcl":"pcl","vnd.hp-pclxl":"pclxl","vnd.hydrostatix.sof-data":"sfd-hdstx","vnd.ibm.minipay":"mpy","vnd.ibm.modcap":["afp","listafp","list3820"],"vnd.ibm.rights-management":"irm","vnd.ibm.secure-container":"sc","vnd.iccprofile":["icc","icm"],"vnd.igloader":"igl","vnd.immervision-ivp":"ivp","vnd.immervision-ivu":"ivu","vnd.insors.igm":"igm","vnd.intercon.formnet":["xpw","xpx"],"vnd.intergeo":"i2g","vnd.intu.qbo":"qbo","vnd.intu.qfx":"qfx","vnd.ipunplugged.rcprofile":"rcprofile","vnd.irepository.package+xml":"irp","vnd.is-xpr":"xpr","vnd.isac.fcs":"fcs","vnd.jam":"jam","vnd.jcp.javame.midlet-rms":"rms","vnd.jisp":"jisp","vnd.joost.joda-archive":"joda","vnd.kahootz":["ktz","ktr"],"vnd.kde.karbon":"karbon","vnd.kde.kchart":"chrt","vnd.kde.kformula":"kfo","vnd.kde.kivio":"flw","vnd.kde.kontour":"kon","vnd.kde.kpresenter":["kpr","kpt"],"vnd.kde.kspread":"ksp","vnd.kde.kword":["kwd","kwt"],"vnd.kenameaapp":"htke","vnd.kidspiration":"kia","vnd.kinar":["kne","knp"],"vnd.koan":["skp","skd","skt","skm"],"vnd.kodak-descriptor":"sse","vnd.las.las+xml":"lasxml","vnd.llamagraphics.life-balance.desktop":"lbd","vnd.llamagraphics.life-balance.exchange+xml":"lbe","vnd.lotus-1-2-3":"123","vnd.lotus-approach":"apr","vnd.lotus-freelance":"pre","vnd.lotus-notes":"nsf","vnd.lotus-organizer":"org","vnd.lotus-screencam":"scm","vnd.lotus-wordpro":"lwp","vnd.macports.portpkg":"portpkg","vnd.mcd":"mcd","vnd.medcalcdata":"mc1","vnd.mediastation.cdkey":"cdkey","vnd.mfer":"mwf","vnd.mfmp":"mfm","vnd.micrografx.flo":"flo","vnd.micrografx.igx":"igx","vnd.mif":"mif","vnd.mobius.daf":"daf","vnd.mobius.dis":"dis","vnd.mobius.mbk":"mbk","vnd.mobius.mqy":"mqy","vnd.mobius.msl":"msl","vnd.mobius.plc":"plc","vnd.mobius.txf":"txf","vnd.mophun.application":"mpn","vnd.mophun.certificate":"mpc","vnd.ms-artgalry":"cil","vnd.ms-cab-compressed":"cab","vnd.ms-excel.addin.macroenabled.12":"xlam","vnd.ms-excel.sheet.binary.macroenabled.12":"xlsb","vnd.ms-excel.sheet.macroenabled.12":"xlsm","vnd.ms-excel.template.macroenabled.12":"xltm","vnd.ms-fontobject":"eot","vnd.ms-htmlhelp":"chm","vnd.ms-ims":"ims","vnd.ms-lrm":"lrm","vnd.ms-officetheme":"thmx","vnd.ms-powerpoint.addin.macroenabled.12":"ppam","vnd.ms-powerpoint.presentation.macroenabled.12":"pptm","vnd.ms-powerpoint.slide.macroenabled.12":"sldm","vnd.ms-powerpoint.slideshow.macroenabled.12":"ppsm","vnd.ms-powerpoint.template.macroenabled.12":"potm","vnd.ms-project":["mpp","mpt"],"vnd.ms-word.document.macroenabled.12":"docm","vnd.ms-word.template.macroenabled.12":"dotm","vnd.ms-works":["wps","wks","wcm","wdb"],"vnd.ms-wpl":"wpl","vnd.ms-xpsdocument":"xps","vnd.mseq":"mseq","vnd.musician":"mus","vnd.muvee.style":"msty","vnd.mynfc":"taglet","vnd.neurolanguage.nlu":"nlu","vnd.nitf":["ntf","nitf"],"vnd.noblenet-directory":"nnd","vnd.noblenet-sealer":"nns","vnd.noblenet-web":"nnw","vnd.nokia.n-gage.data":"ngdat","vnd.nokia.n-gage.symbian.install":"n-gage","vnd.nokia.radio-preset":"rpst","vnd.nokia.radio-presets":"rpss","vnd.novadigm.edm":"edm","vnd.novadigm.edx":"edx","vnd.novadigm.ext":"ext","vnd.oasis.opendocument.chart-template":"otc","vnd.oasis.opendocument.formula-template":"odft","vnd.oasis.opendocument.image-template":"oti","vnd.olpc-sugar":"xo","vnd.oma.dd2+xml":"dd2","vnd.openofficeorg.extension":"oxt","vnd.openxmlformats-officedocument.presentationml.slide":"sldx","vnd.osgeo.mapguide.package":"mgp","vnd.osgi.dp":"dp","vnd.osgi.subsystem":"esa","vnd.palm":["pdb","pqa","oprc"],"vnd.pawaafile":"paw","vnd.pg.format":"str","vnd.pg.osasli":"ei6","vnd.picsel":"efif","vnd.pmi.widget":"wg","vnd.pocketlearn":"plf","vnd.powerbuilder6":"pbd","vnd.previewsystems.box":"box","vnd.proteus.magazine":"mgz","vnd.publishare-delta-tree":"qps","vnd.pvi.ptid1":"ptid","vnd.quark.quarkxpress":["qxd","qxt","qwd","qwt","qxl","qxb"],"vnd.realvnc.bed":"bed","vnd.recordare.musicxml":"mxl","vnd.recordare.musicxml+xml":"musicxml","vnd.rig.cryptonote":"cryptonote","vnd.rn-realmedia":"rm","vnd.rn-realmedia-vbr":"rmvb","vnd.route66.link66+xml":"link66","vnd.sailingtracker.track":"st","vnd.seemail":"see","vnd.sema":"sema","vnd.semd":"semd","vnd.semf":"semf","vnd.shana.informed.formdata":"ifm","vnd.shana.informed.formtemplate":"itp","vnd.shana.informed.interchange":"iif","vnd.shana.informed.package":"ipk","vnd.simtech-mindmapper":["twd","twds"],"vnd.smart.teacher":"teacher","vnd.solent.sdkm+xml":["sdkm","sdkd"],"vnd.spotfire.dxp":"dxp","vnd.spotfire.sfs":"sfs","vnd.stepmania.package":"smzip","vnd.stepmania.stepchart":"sm","vnd.sus-calendar":["sus","susp"],"vnd.svd":"svd","vnd.syncml+xml":"xsm","vnd.syncml.dm+wbxml":"bdm","vnd.syncml.dm+xml":"xdm","vnd.tao.intent-module-archive":"tao","vnd.tcpdump.pcap":["pcap","cap","dmp"],"vnd.tmobile-livetv":"tmo","vnd.trid.tpt":"tpt","vnd.triscape.mxs":"mxs","vnd.trueapp":"tra","vnd.ufdl":["ufd","ufdl"],"vnd.uiq.theme":"utz","vnd.umajin":"umj","vnd.unity":"unityweb","vnd.uoml+xml":"uoml","vnd.vcx":"vcx","vnd.visionary":"vis","vnd.vsf":"vsf","vnd.webturbo":"wtb","vnd.wolfram.player":"nbp","vnd.wqd":"wqd","vnd.wt.stf":"stf","vnd.xara":"xar","vnd.xfdl":"xfdl","vnd.yamaha.hv-dic":"hvd","vnd.yamaha.hv-script":"hvs","vnd.yamaha.hv-voice":"hvp","vnd.yamaha.openscoreformat":"osf","vnd.yamaha.openscoreformat.osfpvg+xml":"osfpvg","vnd.yamaha.smaf-audio":"saf","vnd.yamaha.smaf-phrase":"spf","vnd.yellowriver-custom-menu":"cmp","vnd.zul":["zir","zirz"],"vnd.zzazz.deck+xml":"zaz","voicexml+xml":"vxml",widget:"wgt",winhlp:"hlp","wsdl+xml":"wsdl","wspolicy+xml":"wspolicy","x-ace-compressed":"ace","x-authorware-bin":["aab","x32","u32","vox"],"x-authorware-map":"aam","x-authorware-seg":"aas","x-blorb":["blb","blorb"],"x-bzip":"bz","x-bzip2":["bz2","boz"],"x-cfs-compressed":"cfs","x-chat":"chat","x-conference":"nsc","x-dgc-compressed":"dgc","x-dtbncx+xml":"ncx","x-dtbook+xml":"dtb","x-dtbresource+xml":"res","x-eva":"eva","x-font-bdf":"bdf","x-font-ghostscript":"gsf","x-font-linux-psf":"psf","x-font-pcf":"pcf","x-font-snf":"snf","x-font-ttf":["ttf","ttc"],"x-font-type1":["pfa","pfb","pfm","afm"],"x-freearc":"arc","x-gca-compressed":"gca","x-glulx":"ulx","x-gramps-xml":"gramps","x-install-instructions":"install","x-lzh-compressed":["lzh","lha"],"x-mie":"mie","x-mobipocket-ebook":["prc","mobi"],"x-ms-application":"application","x-ms-shortcut":"lnk","x-ms-xbap":"xbap","x-msbinder":"obd","x-mscardfile":"crd","x-msclip":"clp","application/x-ms-installer":"msi","x-msmediaview":["mvb","m13","m14"],"x-msmetafile":["wmf","wmz","emf","emz"],"x-msmoney":"mny","x-mspublisher":"pub","x-msschedule":"scd","x-msterminal":"trm","x-mswrite":"wri","x-nzb":"nzb","x-pkcs12":["p12","pfx"],"x-pkcs7-certificates":["p7b","spc"],"x-research-info-systems":"ris","x-silverlight-app":"xap","x-sql":"sql","x-stuffitx":"sitx","x-subrip":"srt","x-t3vm-image":"t3","x-tex-tfm":"tfm","x-tgif":"obj","x-xliff+xml":"xlf","x-xz":"xz","x-zmachine":["z1","z2","z3","z4","z5","z6","z7","z8"],"xaml+xml":"xaml","xcap-diff+xml":"xdf","xenc+xml":"xenc","xml-dtd":"dtd","xop+xml":"xop","xproc+xml":"xpl","xslt+xml":"xslt","xv+xml":["mxml","xhvml","xvml","xvm"],yang:"yang","yin+xml":"yin",envoy:"evy",fractals:"fif","internet-property-stream":"acx",olescript:"axs","vnd.ms-outlook":"msg","vnd.ms-pkicertstore":"sst","x-compress":"z","x-perfmon":["pma","pmc","pmr","pmw"],"ynd.ms-pkipko":"pko",gzip:["gz","tgz"],"smil+xml":["smi","smil"],"vnd.debian.binary-package":["deb","udeb"],"vnd.hzn-3d-crossword":"x3d","vnd.sqlite3":["db","sqlite","sqlite3","db-wal","sqlite-wal","db-shm","sqlite-shm"],"vnd.wap.sic":"sic","vnd.wap.slc":"slc","x-krita":["kra","krz"],"x-perl":["pm","pl"],yaml:["yaml","yml"]},audio:{amr:"amr","amr-wb":"awb",annodex:"axa",basic:["au","snd"],flac:"flac",midi:["mid","midi","kar","rmi"],mpeg:["mpga","mpega","mp3","m4a","mp2a","m2a","m3a"],mpegurl:"m3u",ogg:["oga","ogg","spx"],"prs.sid":"sid","x-aiff":"aifc","x-gsm":"gsm","x-ms-wma":"wma","x-ms-wax":"wax","x-pn-realaudio":"ram","x-realaudio":"ra","x-sd2":"sd2",adpcm:"adp",mp4:"mp4a",s3m:"s3m",silk:"sil","vnd.dece.audio":["uva","uvva"],"vnd.digital-winds":"eol","vnd.dra":"dra","vnd.dts":"dts","vnd.dts.hd":"dtshd","vnd.lucent.voice":"lvp","vnd.ms-playready.media.pya":"pya","vnd.nuera.ecelp4800":"ecelp4800","vnd.nuera.ecelp7470":"ecelp7470","vnd.nuera.ecelp9600":"ecelp9600","vnd.rip":"rip",webm:"weba","x-caf":"caf","x-matroska":"mka","x-pn-realaudio-plugin":"rmp",xm:"xm",aac:"aac",aiff:["aiff","aif","aff"],opus:"opus",wav:"wav"},chemical:{"x-alchemy":"alc","x-cache":["cac","cache"],"x-cache-csf":"csf","x-cactvs-binary":["cbin","cascii","ctab"],"x-cdx":"cdx","x-chem3d":"c3d","x-cif":"cif","x-cmdf":"cmdf","x-cml":"cml","x-compass":"cpa","x-crossfire":"bsd","x-csml":["csml","csm"],"x-ctx":"ctx","x-cxf":["cxf","cef"],"x-embl-dl-nucleotide":["emb","embl"],"x-gamess-input":["inp","gam","gamin"],"x-gaussian-checkpoint":["fch","fchk"],"x-gaussian-cube":"cub","x-gaussian-input":["gau","gjc","gjf"],"x-gaussian-log":"gal","x-gcg8-sequence":"gcg","x-genbank":"gen","x-hin":"hin","x-isostar":["istr","ist"],"x-jcamp-dx":["jdx","dx"],"x-kinemage":"kin","x-macmolecule":"mcm","x-macromodel-input":"mmod","x-mdl-molfile":"mol","x-mdl-rdfile":"rd","x-mdl-rxnfile":"rxn","x-mdl-sdfile":"sd","x-mdl-tgf":"tgf","x-mmcif":"mcif","x-mol2":"mol2","x-molconn-Z":"b","x-mopac-graph":"gpt","x-mopac-input":["mop","mopcrt","zmt"],"x-mopac-out":"moo","x-ncbi-asn1":"asn","x-ncbi-asn1-ascii":["prt","ent"],"x-ncbi-asn1-binary":"val","x-rosdal":"ros","x-swissprot":"sw","x-vamas-iso14976":"vms","x-vmd":"vmd","x-xtel":"xtel","x-xyz":"xyz"},font:{otf:"otf",woff:"woff",woff2:"woff2"},image:{gif:"gif",ief:"ief",jpeg:["jpeg","jpg","jpe","jfif","jfif-tbnl","jif"],pcx:"pcx",png:"png","svg+xml":["svg","svgz"],tiff:["tiff","tif"],"vnd.djvu":["djvu","djv"],"vnd.wap.wbmp":"wbmp","x-canon-cr2":"cr2","x-canon-crw":"crw","x-cmu-raster":"ras","x-coreldraw":"cdr","x-coreldrawpattern":"pat","x-coreldrawtemplate":"cdt","x-corelphotopaint":"cpt","x-epson-erf":"erf","x-icon":"ico","x-jg":"art","x-jng":"jng","x-nikon-nef":"nef","x-olympus-orf":"orf","x-portable-anymap":"pnm","x-portable-bitmap":"pbm","x-portable-graymap":"pgm","x-portable-pixmap":"ppm","x-rgb":"rgb","x-xbitmap":"xbm","x-xpixmap":"xpm","x-xwindowdump":"xwd",bmp:"bmp",cgm:"cgm",g3fax:"g3",ktx:"ktx","prs.btif":"btif",sgi:"sgi","vnd.dece.graphic":["uvi","uvvi","uvg","uvvg"],"vnd.dwg":"dwg","vnd.dxf":"dxf","vnd.fastbidsheet":"fbs","vnd.fpx":"fpx","vnd.fst":"fst","vnd.fujixerox.edmics-mmr":"mmr","vnd.fujixerox.edmics-rlc":"rlc","vnd.ms-modi":"mdi","vnd.ms-photo":"wdp","vnd.net-fpx":"npx","vnd.xiff":"xif",webp:"webp","x-3ds":"3ds","x-cmx":"cmx","x-freehand":["fh","fhc","fh4","fh5","fh7"],"x-pict":["pic","pct"],"x-tga":"tga","cis-cod":"cod",avif:"avifs",heic:["heif","heic"],pjpeg:["pjpg"],"vnd.adobe.photoshop":"psd","x-adobe-dng":"dng","x-fuji-raf":"raf","x-icns":"icns","x-kodak-dcr":"dcr","x-kodak-k25":"k25","x-kodak-kdc":"kdc","x-minolta-mrw":"mrw","x-panasonic-raw":["raw","rw2","rwl"],"x-pentax-pef":["pef","ptx"],"x-sigma-x3f":"x3f","x-sony-arw":"arw","x-sony-sr2":"sr2","x-sony-srf":"srf"},message:{rfc822:["eml","mime","mht","mhtml","nws"]},model:{iges:["igs","iges"],mesh:["msh","mesh","silo"],vrml:["wrl","vrml"],"x3d+vrml":["x3dv","x3dvz"],"x3d+xml":"x3dz","x3d+binary":["x3db","x3dbz"],"vnd.collada+xml":"dae","vnd.dwf":"dwf","vnd.gdl":"gdl","vnd.gtw":"gtw","vnd.mts":"mts","vnd.usdz+zip":"usdz","vnd.vtu":"vtu"},text:{"cache-manifest":["manifest","appcache"],calendar:["ics","icz","ifb"],css:"css",csv:"csv",h323:"323",html:["html","htm","shtml","stm"],iuls:"uls",plain:["txt","text","brf","conf","def","list","log","in","bas","diff","ksh"],richtext:"rtx",scriptlet:["sct","wsc"],texmacs:"tm","tab-separated-values":"tsv","vnd.sun.j2me.app-descriptor":"jad","vnd.wap.wml":"wml","vnd.wap.wmlscript":"wmls","x-bibtex":"bib","x-boo":"boo","x-c++hdr":["h++","hpp","hxx","hh"],"x-c++src":["c++","cpp","cxx","cc"],"x-component":"htc","x-dsrc":"d","x-diff":"patch","x-haskell":"hs","x-java":"java","x-literate-haskell":"lhs","x-moc":"moc","x-pascal":["p","pas","pp","inc"],"x-pcs-gcd":"gcd","x-python":"py","x-scala":"scala","x-setext":"etx","x-tcl":["tcl","tk"],"x-tex":["tex","ltx","sty","cls"],"x-vcalendar":"vcs","x-vcard":"vcf",n3:"n3","prs.lines.tag":"dsc",sgml:["sgml","sgm"],troff:["t","tr","roff","man","me","ms"],turtle:"ttl","uri-list":["uri","uris","urls"],vcard:"vcard","vnd.curl":"curl","vnd.curl.dcurl":"dcurl","vnd.curl.scurl":"scurl","vnd.curl.mcurl":"mcurl","vnd.dvb.subtitle":"sub","vnd.fly":"fly","vnd.fmi.flexstor":"flx","vnd.graphviz":"gv","vnd.in3d.3dml":"3dml","vnd.in3d.spot":"spot","x-asm":["s","asm"],"x-c":["c","h","dic"],"x-fortran":["f","for","f77","f90"],"x-opml":"opml","x-nfo":"nfo","x-sfv":"sfv","x-uuencode":"uu",webviewhtml:"htt",javascript:"js",json:"json",markdown:["md","markdown","mdown","markdn"],"vnd.wap.si":"si","vnd.wap.sl":"sl"},video:{avif:"avif","3gpp":"3gp",annodex:"axv",dl:"dl",dv:["dif","dv"],fli:"fli",gl:"gl",mpeg:["mpeg","mpg","mpe","m1v","m2v","mp2","mpa","mpv2"],mp4:["mp4","mp4v","mpg4"],quicktime:["qt","mov"],ogg:"ogv","vnd.mpegurl":["mxu","m4u"],"x-flv":"flv","x-la-asf":["lsf","lsx"],"x-mng":"mng","x-ms-asf":["asf","asx","asr"],"x-ms-wm":"wm","x-ms-wmv":"wmv","x-ms-wmx":"wmx","x-ms-wvx":"wvx","x-msvideo":"avi","x-sgi-movie":"movie","x-matroska":["mpv","mkv","mk3d","mks"],"3gpp2":"3g2",h261:"h261",h263:"h263",h264:"h264",jpeg:"jpgv",jpm:["jpm","jpgm"],mj2:["mj2","mjp2"],"vnd.dece.hd":["uvh","uvvh"],"vnd.dece.mobile":["uvm","uvvm"],"vnd.dece.pd":["uvp","uvvp"],"vnd.dece.sd":["uvs","uvvs"],"vnd.dece.video":["uvv","uvvv"],"vnd.dvb.file":"dvb","vnd.fvt":"fvt","vnd.ms-playready.media.pyv":"pyv","vnd.uvvu.mp4":["uvu","uvvu"],"vnd.vivo":"viv",webm:"webm","x-f4v":"f4v","x-m4v":"m4v","x-ms-vob":"vob","x-smv":"smv",mp2t:"ts"},"x-conference":{"x-cooltalk":"ice"},"x-world":{"x-vrml":["vrm","flr","wrz","xaf","xof"]}},Pe=(()=>{const e={};for(const t of Object.keys(Ie))for(const n of Object.keys(Ie[t])){const r=Ie[t][n];if("string"==typeof r)e[r]=t+"/"+n;else for(let i=0;i<r.length;i++)e[r[i]]=t+"/"+n}return e})(),Te=[];for(let e=0;e<256;e++){let t=e;for(let e=0;e<8;e++)1&t?t=t>>>1^3988292384:t>>>=1;Te[e]=t}class qe{constructor(e){this.crc=e||-1}append(e){let t=0|this.crc;for(let n=0,r=0|e.length;n<r;n++)t=t>>>8^Te[255&(t^e[n])];this.crc=t}get(){return~this.crc}}class Le extends TransformStream{constructor(){let e;const t=new qe;super({transform(e,n){t.append(e),n.enqueue(e)},flush(){const n=new Uint8Array(4);new DataView(n.buffer).setUint32(0,t.get()),e.value=n}}),e=this}}function Me(e){if("undefined"==typeof TextEncoder){e=unescape(encodeURIComponent(e));const t=new Uint8Array(e.length);for(let n=0;n<t.length;n++)t[n]=e.charCodeAt(n);return t}return(new TextEncoder).encode(e)}const Ne={concat(e,t){if(0===e.length||0===t.length)return e.concat(t);const n=e[e.length-1],r=Ne.getPartial(n);return 32===r?e.concat(t):Ne._shiftRight(t,r,0|n,e.slice(0,e.length-1))},bitLength(e){const t=e.length;if(0===t)return 0;const n=e[t-1];return 32*(t-1)+Ne.getPartial(n)},clamp(e,t){if(32*e.length<t)return e;const n=(e=e.slice(0,Math.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=Ne.partial(t,e[n-1]&2147483648>>t-1,1)),e},partial:(e,t,n)=>32===e?t:(n?0|t:t<<32-e)+1099511627776*e,getPartial:e=>Math.round(e/1099511627776)||32,_shiftRight(e,t,n,r){for(void 0===r&&(r=[]);t>=32;t-=32)r.push(n),n=0;if(0===t)return r.concat(e);for(let i=0;i<e.length;i++)r.push(n|e[i]>>>t),n=e[i]<<32-t;const i=e.length?e[e.length-1]:0,a=Ne.getPartial(i);return r.push(Ne.partial(t+a&31,t+a>32?n:r.pop(),1)),r}},Be={bytes:{fromBits(e){const t=Ne.bitLength(e)/8,n=new Uint8Array(t);let r;for(let i=0;i<t;i++)0==(3&i)&&(r=e[i/4]),n[i]=r>>>24,r<<=8;return n},toBits(e){const t=[];let n,r=0;for(n=0;n<e.length;n++)r=r<<8|e[n],3==(3&n)&&(t.push(r),r=0);return 3&n&&t.push(Ne.partial(8*(3&n),r)),t}}},He=class{constructor(e){const t=this;t.blockSize=512,t._init=[1732584193,4023233417,2562383102,271733878,3285377520],t._key=[1518500249,1859775393,2400959708,3395469782],e?(t._h=e._h.slice(0),t._buffer=e._buffer.slice(0),t._length=e._length):t.reset()}reset(){const e=this;return e._h=e._init.slice(0),e._buffer=[],e._length=0,e}update(e){const t=this;"string"==typeof e&&(e=Be.utf8String.toBits(e));const n=t._buffer=Ne.concat(t._buffer,e),r=t._length,i=t._length=r+Ne.bitLength(e);if(i>9007199254740991)throw new Error("Cannot hash more than 2^53 - 1 bits");const a=new Uint32Array(n);let o=0;for(let e=t.blockSize+r-(t.blockSize+r&t.blockSize-1);e<=i;e+=t.blockSize)t._block(a.subarray(16*o,16*(o+1))),o+=1;return n.splice(0,16*o),t}finalize(){const e=this;let t=e._buffer;const n=e._h;t=Ne.concat(t,[Ne.partial(1,1)]);for(let e=t.length+2;15&e;e++)t.push(0);for(t.push(Math.floor(e._length/4294967296)),t.push(0|e._length);t.length;)e._block(t.splice(0,16));return e.reset(),n}_f(e,t,n,r){return e<=19?t&n|~t&r:e<=39?t^n^r:e<=59?t&n|t&r|n&r:e<=79?t^n^r:void 0}_S(e,t){return t<<e|t>>>32-e}_block(e){const t=this,n=t._h,r=Array(80);for(let t=0;t<16;t++)r[t]=e[t];let i=n[0],a=n[1],o=n[2],s=n[3],c=n[4];for(let e=0;e<=79;e++){e>=16&&(r[e]=t._S(1,r[e-3]^r[e-8]^r[e-14]^r[e-16]));const n=t._S(5,i)+t._f(e,a,o,s)+c+r[e]+t._key[Math.floor(e/20)]|0;c=s,s=o,o=t._S(30,a),a=i,i=n}n[0]=n[0]+i|0,n[1]=n[1]+a|0,n[2]=n[2]+o|0,n[3]=n[3]+s|0,n[4]=n[4]+c|0}},Ve=class{constructor(e){const t=this;t._tables=[[[],[],[],[],[]],[[],[],[],[],[]]],t._tables[0][0][0]||t._precompute();const n=t._tables[0][4],r=t._tables[1],i=e.length;let a,o,s,c=1;if(4!==i&&6!==i&&8!==i)throw new Error("invalid aes key size");for(t._key=[o=e.slice(0),s=[]],a=i;a<4*i+28;a++){let e=o[a-1];(a%i==0||8===i&&a%i==4)&&(e=n[e>>>24]<<24^n[e>>16&255]<<16^n[e>>8&255]<<8^n[255&e],a%i==0&&(e=e<<8^e>>>24^c<<24,c=c<<1^283*(c>>7))),o[a]=o[a-i]^e}for(let e=0;a;e++,a--){const t=o[3&e?a:a-4];s[e]=a<=4||e<4?t:r[0][n[t>>>24]]^r[1][n[t>>16&255]]^r[2][n[t>>8&255]]^r[3][n[255&t]]}}encrypt(e){return this._crypt(e,0)}decrypt(e){return this._crypt(e,1)}_precompute(){const e=this._tables[0],t=this._tables[1],n=e[4],r=t[4],i=[],a=[];let o,s,c,l;for(let e=0;e<256;e++)a[(i[e]=e<<1^283*(e>>7))^e]=e;for(let d=o=0;!n[d];d^=s||1,o=a[o]||1){let a=o^o<<1^o<<2^o<<3^o<<4;a=a>>8^255&a^99,n[d]=a,r[a]=d,l=i[c=i[s=i[d]]];let f=16843009*l^65537*c^257*s^16843008*d,u=257*i[a]^16843008*a;for(let n=0;n<4;n++)e[n][d]=u=u<<24^u>>>8,t[n][a]=f=f<<24^f>>>8}for(let n=0;n<5;n++)e[n]=e[n].slice(0),t[n]=t[n].slice(0)}_crypt(e,t){if(4!==e.length)throw new Error("invalid aes block size");const n=this._key[t],r=n.length/4-2,i=[0,0,0,0],a=this._tables[t],o=a[0],s=a[1],c=a[2],l=a[3],d=a[4];let f,u,p,h=e[0]^n[0],m=e[t?3:1]^n[1],y=e[2]^n[2],w=e[t?1:3]^n[3],g=4;for(let e=0;e<r;e++)f=o[h>>>24]^s[m>>16&255]^c[y>>8&255]^l[255&w]^n[g],u=o[m>>>24]^s[y>>16&255]^c[w>>8&255]^l[255&h]^n[g+1],p=o[y>>>24]^s[w>>16&255]^c[h>>8&255]^l[255&m]^n[g+2],w=o[w>>>24]^s[h>>16&255]^c[m>>8&255]^l[255&y]^n[g+3],g+=4,h=f,m=u,y=p;for(let e=0;e<4;e++)i[t?3&-e:e]=d[h>>>24]<<24^d[m>>16&255]<<16^d[y>>8&255]<<8^d[255&w]^n[g++],f=h,h=m,m=y,y=w,w=f;return i}},Ze={getRandomValues(e){const t=new Uint32Array(e.buffer),n=e=>{let t=987654321;const n=4294967295;return function(){return t=36969*(65535&t)+(t>>16)&n,(((t<<16)+(e=18e3*(65535&e)+(e>>16)&n)&n)/4294967296+.5)*(Math.random()>.5?1:-1)}};for(let r,i=0;i<e.length;i+=4){const e=n(4294967296*(r||Math.random()));r=987654071*e(),t[i/4]=4294967296*e()|0}return e}},Ke=class{constructor(e,t){this._prf=e,this._initIv=t,this._iv=t}reset(){this._iv=this._initIv}update(e){return this.calculate(this._prf,e,this._iv)}incWord(e){if(255==(e>>24&255)){let t=e>>16&255,n=e>>8&255,r=255&e;255===t?(t=0,255===n?(n=0,255===r?r=0:++r):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=r}else e+=1<<24;return e}incCounter(e){0===(e[0]=this.incWord(e[0]))&&(e[1]=this.incWord(e[1]))}calculate(e,t,n){let r;if(!(r=t.length))return[];const i=Ne.bitLength(t);for(let i=0;i<r;i+=4){this.incCounter(n);const r=e.encrypt(n);t[i]^=r[0],t[i+1]^=r[1],t[i+2]^=r[2],t[i+3]^=r[3]}return Ne.clamp(t,i)}},Ye={importKey:e=>new Ye.hmacSha1(Be.bytes.toBits(e)),pbkdf2(e,t,n,r){if(n=n||1e4,r<0||n<0)throw new Error("invalid params to pbkdf2");const i=1+(r>>5)<<2;let a,o,s,c,l;const d=new ArrayBuffer(i),f=new DataView(d);let u=0;const p=Ne;for(t=Be.bytes.toBits(t),l=1;u<(i||1);l++){for(a=o=e.encrypt(p.concat(t,[l])),s=1;s<n;s++)for(o=e.encrypt(o),c=0;c<o.length;c++)a[c]^=o[c];for(s=0;u<(i||1)&&s<a.length;s++)f.setInt32(u,a[s]),u+=4}return d.slice(0,r/8)},hmacSha1:class{constructor(e){const t=this,n=t._hash=He,r=[[],[]];t._baseHash=[new n,new n];const i=t._baseHash[0].blockSize/32;e.length>i&&(e=(new n).update(e).finalize());for(let t=0;t<i;t++)r[0][t]=909522486^e[t],r[1][t]=1549556828^e[t];t._baseHash[0].update(r[0]),t._baseHash[1].update(r[1]),t._resultHash=new n(t._baseHash[0])}reset(){const e=this;e._resultHash=new e._hash(e._baseHash[0]),e._updated=!1}update(e){this._updated=!0,this._resultHash.update(e)}digest(){const e=this,t=e._resultHash.finalize(),n=new e._hash(e._baseHash[1]).update(t).finalize();return e.reset(),n}encrypt(e){if(this._updated)throw new Error("encrypt on already updated hmac called!");return this.update(e),this.digest(e)}}},$e="undefined"!=typeof crypto&&"function"==typeof crypto.getRandomValues,Ge="Invalid password",Xe="Invalid signature",Je="zipjs-abort-check-password";function Qe(e){return $e?crypto.getRandomValues(e):Ze.getRandomValues(e)}const et=16,tt={name:"PBKDF2"},nt=Object.assign({hash:{name:"HMAC"}},tt),rt=Object.assign({iterations:1e3,hash:{name:"SHA-1"}},tt),it=["deriveBits"],at=[8,12,16],ot=[16,24,32],st=10,ct=[0,0,0,0],lt="undefined",dt="function",ft=typeof crypto!=lt,ut=ft&&crypto.subtle,pt=ft&&typeof ut!=lt,ht=Be.bytes,mt=Ve,yt=Ke,wt=Ye.hmacSha1;let gt=ft&&pt&&typeof ut.importKey==dt,bt=ft&&pt&&typeof ut.deriveBits==dt;class xt extends TransformStream{constructor({password:e,signed:t,encryptionStrength:n,checkPasswordOnly:r}){super({start(){Object.assign(this,{ready:new Promise((e=>this.resolveReady=e)),password:e,signed:t,strength:n-1,pending:new Uint8Array})},async transform(e,t){const n=this,{password:i,strength:a,resolveReady:o,ready:s}=n;i?(await async function(e,t,n,r){const i=await kt(e,t,n,At(r,0,at[t])),a=At(r,at[t]);if(i[0]!=a[0]||i[1]!=a[1])throw new Error(Ge)}(n,a,i,At(e,0,at[a]+2)),e=At(e,at[a]+2),r?t.error(new Error(Je)):o()):await s;const c=new Uint8Array(e.length-st-(e.length-st)%et);t.enqueue(_t(n,e,c,0,st,!0))},async flush(e){const{signed:t,ctr:n,hmac:r,pending:i,ready:a}=this;if(r&&n){await a;const o=At(i,0,i.length-st),s=At(i,i.length-st);let c=new Uint8Array;if(o.length){const e=Et(ht,o);r.update(e);const t=n.update(e);c=zt(ht,t)}if(t){const e=At(zt(ht,r.digest()),0,st);for(let t=0;t<st;t++)if(e[t]!=s[t])throw new Error(Xe)}e.enqueue(c)}}})}}class vt extends TransformStream{constructor({password:e,encryptionStrength:t}){let n;super({start(){Object.assign(this,{ready:new Promise((e=>this.resolveReady=e)),password:e,strength:t-1,pending:new Uint8Array})},async transform(e,t){const n=this,{password:r,strength:i,resolveReady:a,ready:o}=n;let s=new Uint8Array;r?(s=await async function(e,t,n){const r=Qe(new Uint8Array(at[t]));return St(r,await kt(e,t,n,r))}(n,i,r),a()):await o;const c=new Uint8Array(s.length+e.length-e.length%et);c.set(s,0),t.enqueue(_t(n,e,c,s.length,0))},async flush(e){const{ctr:t,hmac:r,pending:i,ready:a}=this;if(r&&t){await a;let o=new Uint8Array;if(i.length){const e=t.update(Et(ht,i));r.update(e),o=zt(ht,e)}n.signature=zt(ht,r.digest()).slice(0,st),e.enqueue(St(o,n.signature))}}}),n=this}}function _t(e,t,n,r,i,a){const{ctr:o,hmac:s,pending:c}=e,l=t.length-i;let d;for(c.length&&(t=St(c,t),n=function(e,t){if(t&&t>e.length){const n=e;(e=new Uint8Array(t)).set(n,0)}return e}(n,l-l%et)),d=0;d<=l-et;d+=et){const e=Et(ht,At(t,d,d+et));a&&s.update(e);const i=o.update(e);a||s.update(i),n.set(zt(ht,i),d+r)}return e.pending=At(t,d),n}async function kt(e,t,n,r){e.password=null;const i=Me(n),a=await async function(e,t,n,r,i){if(!gt)return Ye.importKey(t);try{return await ut.importKey(e,t,n,!1,i)}catch(e){return gt=!1,Ye.importKey(t)}}("raw",i,nt,0,it),o=await async function(e,t,n){if(!bt)return Ye.pbkdf2(t,e.salt,rt.iterations,n);try{return await ut.deriveBits(e,t,n)}catch(r){return bt=!1,Ye.pbkdf2(t,e.salt,rt.iterations,n)}}(Object.assign({salt:r},rt),a,8*(2*ot[t]+2)),s=new Uint8Array(o),c=Et(ht,At(s,0,ot[t])),l=Et(ht,At(s,ot[t],2*ot[t])),d=At(s,2*ot[t]);return Object.assign(e,{keys:{key:c,authentication:l,passwordVerification:d},ctr:new yt(new mt(c),Array.from(ct)),hmac:new wt(l)}),d}function St(e,t){let n=e;return e.length+t.length&&(n=new Uint8Array(e.length+t.length),n.set(e,0),n.set(t,e.length)),n}function At(e,t,n){return e.subarray(t,n)}function zt(e,t){return e.fromBits(t)}function Et(e,t){return e.toBits(t)}class jt extends TransformStream{constructor({password:e,passwordVerification:t,checkPasswordOnly:n}){super({start(){Object.assign(this,{password:e,passwordVerification:t}),Rt(this,e)},transform(e,t){const r=this;if(r.password){const t=Ot(r,e.subarray(0,12));if(r.password=null,t[11]!=r.passwordVerification)throw new Error(Ge);e=e.subarray(12)}n?t.error(new Error(Je)):t.enqueue(Ot(r,e))}})}}class Dt extends TransformStream{constructor({password:e,passwordVerification:t}){super({start(){Object.assign(this,{password:e,passwordVerification:t}),Rt(this,e)},transform(e,t){const n=this;let r,i;if(n.password){n.password=null;const t=Qe(new Uint8Array(12));t[11]=n.passwordVerification,r=new Uint8Array(e.length+t.length),r.set(Ct(n,t),0),i=12}else r=new Uint8Array(e.length),i=0;r.set(Ct(n,e),i),t.enqueue(r)}})}}function Ot(e,t){const n=new Uint8Array(t.length);for(let r=0;r<t.length;r++)n[r]=Ft(e)^t[r],Ut(e,n[r]);return n}function Ct(e,t){const n=new Uint8Array(t.length);for(let r=0;r<t.length;r++)n[r]=Ft(e)^t[r],Ut(e,t[r]);return n}function Rt(e,t){const n=[305419896,591751049,878082192];Object.assign(e,{keys:n,crcKey0:new qe(n[0]),crcKey2:new qe(n[2])});for(let n=0;n<t.length;n++)Ut(e,t.charCodeAt(n))}function Ut(e,t){let[n,r,i]=e.keys;e.crcKey0.append([t]),n=~e.crcKey0.get(),r=It(Math.imul(It(r+Wt(n)),134775813)+1),e.crcKey2.append([r>>>24]),i=~e.crcKey2.get(),e.keys=[n,r,i]}function Ft(e){const t=2|e.keys[2];return Wt(Math.imul(t,1^t)>>>8)}function Wt(e){return 255&e}function It(e){return 4294967295&e}const Pt="deflate-raw";class Tt extends TransformStream{constructor(e,{chunkSize:t,CompressionStream:n,CompressionStreamNative:r}){super({});const{compressed:i,encrypted:a,useCompressionStream:o,zipCrypto:s,signed:c,level:l}=e,d=this;let f,u,p=Lt(super.readable);a&&!s||!c||(f=new Le,p=Bt(p,f)),i&&(p=Nt(p,o,{level:l,chunkSize:t},r,n)),a&&(s?p=Bt(p,new Dt(e)):(u=new vt(e),p=Bt(p,u))),Mt(d,p,(()=>{let e;a&&!s&&(e=u.signature),a&&!s||!c||(e=new DataView(f.value.buffer).getUint32(0)),d.signature=e}))}}class qt extends TransformStream{constructor(e,{chunkSize:t,DecompressionStream:n,DecompressionStreamNative:r}){super({});const{zipCrypto:i,encrypted:a,signed:o,signature:s,compressed:c,useCompressionStream:l}=e;let d,f,u=Lt(super.readable);a&&(i?u=Bt(u,new jt(e)):(f=new xt(e),u=Bt(u,f))),c&&(u=Nt(u,l,{chunkSize:t},r,n)),a&&!i||!o||(d=new Le,u=Bt(u,d)),Mt(this,u,(()=>{if((!a||i)&&o){const e=new DataView(d.value.buffer);if(s!=e.getUint32(0,!1))throw new Error(Xe)}}))}}function Lt(e){return Bt(e,new TransformStream({transform(e,t){e&&e.length&&t.enqueue(e)}}))}function Mt(e,t,n){t=Bt(t,new TransformStream({flush:n})),Object.defineProperty(e,"readable",{get:()=>t})}function Nt(e,t,n,r,i){try{e=Bt(e,new(t&&r?r:i)(Pt,n))}catch(r){if(!t)throw r;e=Bt(e,new i(Pt,n))}return e}function Bt(e,t){return e.pipeThrough(t)}const Ht="message",Vt="pull",Zt="data",Kt="ack",Yt="close",$t="deflate",Gt="inflate";class Xt extends TransformStream{constructor(e,t){super({});const n=this,{codecType:r}=e;let i;r.startsWith($t)?i=Tt:r.startsWith(Gt)&&(i=qt);let a=0;const o=new i(e,t),s=super.readable,c=new TransformStream({transform(e,t){e&&e.length&&(a+=e.length,t.enqueue(e))},flush(){const{signature:e}=o;Object.assign(n,{signature:e,size:a})}});Object.defineProperty(n,"readable",{get:()=>s.pipeThrough(o).pipeThrough(c)})}}const Jt=typeof Worker!=ze;class Qt{constructor(e,{readable:t,writable:n},{options:r,config:i,streamOptions:a,useWebWorkers:o,transferStreams:s,scripts:c},l){const{signal:d}=a;return Object.assign(e,{busy:!0,readable:t.pipeThrough(new en(t,a,i),{signal:d}),writable:n,options:Object.assign({},r),scripts:c,transferStreams:s,terminate(){const{worker:t,busy:n}=e;t&&!n&&(t.terminate(),e.interface=null)},onTaskFinished(){e.busy=!1,l(e)}}),(o&&Jt?rn:nn)(e,i)}}class en extends TransformStream{constructor(e,{onstart:t,onprogress:n,size:r,onend:i},{chunkSize:a}){let o=0;super({start(){t&&tn(t,r)},async transform(e,t){o+=e.length,n&&await tn(n,o,r),t.enqueue(e)},flush(){e.size=o,i&&tn(i,o)}},{highWaterMark:1,size:()=>a})}}async function tn(e,...t){try{await e(...t)}catch(e){}}function nn(e,t){return{run:()=>async function({options:e,readable:t,writable:n,onTaskFinished:r},i){const a=new Xt(e,i);try{await t.pipeThrough(a).pipeTo(n,{preventClose:!0,preventAbort:!0});const{signature:e,size:r}=a;return{signature:e,size:r}}finally{r()}}(e,t)}}function rn(e,{baseURL:t,chunkSize:n}){return e.interface||Object.assign(e,{worker:sn(e.scripts[0],t,e),interface:{run:()=>async function(e,t){let n,r;const i=new Promise(((e,t)=>{n=e,r=t}));Object.assign(e,{reader:null,writer:null,resolveResult:n,rejectResult:r,result:i});const{readable:a,options:o,scripts:s}=e,{writable:c,closed:l}=function(e){const t=e.getWriter();let n;const r=new Promise((e=>n=e));return{writable:new WritableStream({async write(e){await t.ready,await t.write(e)},close(){t.releaseLock(),n()},abort:e=>t.abort(e)}),closed:r}}(e.writable);cn({type:"start",scripts:s.slice(1),options:o,config:t,readable:a,writable:c},e)||Object.assign(e,{reader:a.getReader(),writer:c.getWriter()});const d=await i;try{await c.getWriter().close()}catch(e){}return await l,d}(e,{chunkSize:n})}}),e.interface}let an=!0,on=!0;function sn(e,t,n){const r={type:"module"};let i,a;typeof e==Ee&&(e=e());try{i=new URL(e,t)}catch(t){i=e}if(an)try{a=new Worker(i)}catch(e){an=!1,a=new Worker(i,r)}else a=new Worker(i,r);return a.addEventListener(Ht,(e=>async function({data:e},t){const{type:n,value:r,messageId:i,result:a,error:o}=e,{reader:s,writer:c,resolveResult:l,rejectResult:d,onTaskFinished:f}=t;try{if(o){const{message:e,stack:t,code:n,name:r}=o,i=new Error(e);Object.assign(i,{stack:t,code:n,name:r}),u(i)}else{if(n==Vt){const{value:e,done:n}=await s.read();cn({type:Zt,value:e,done:n,messageId:i},t)}n==Zt&&(await c.ready,await c.write(new Uint8Array(r)),cn({type:Kt,messageId:i},t)),n==Yt&&u(null,a)}}catch(o){u(o)}function u(e,t){e?d(e):l(t),c&&c.releaseLock(),f()}}(e,n))),a}function cn(e,{worker:t,writer:n,onTaskFinished:r,transferStreams:i}){try{let{value:n,readable:r,writable:a}=e;const o=[];if(n&&(e.value=n.buffer,o.push(e.value)),i&&on?(r&&o.push(r),a&&o.push(a)):e.readable=e.writable=null,o.length)try{return t.postMessage(e,o),!0}catch(n){on=!1,e.readable=e.writable=null,t.postMessage(e)}else t.postMessage(e)}catch(e){throw n&&n.releaseLock(),r(),e}}let ln=[];const dn=[];let fn=0;async function un(e,t){const{options:n,config:r}=t,{transferStreams:i,useWebWorkers:a,useCompressionStream:o,codecType:s,compressed:c,signed:l,encrypted:d}=n,{workerScripts:f,maxWorkers:u,terminateWorkerTimeout:p}=r;t.transferStreams=i||i===Ae;const h=!(c||l||d||t.transferStreams);let m;t.useWebWorkers=!h&&(a||a===Ae&&r.useWebWorkers),t.scripts=t.useWebWorkers&&f?f[s]:[],n.useCompressionStream=o||o===Ae&&r.useCompressionStream;const y=ln.find((e=>!e.busy));if(y)pn(y),m=new Qt(y,e,t,w);else if(ln.length<u){const n={indexWorker:fn};fn++,ln.push(n),m=new Qt(n,e,t,w)}else m=await new Promise((n=>dn.push({resolve:n,stream:e,workerOptions:t})));return m.run();function w(e){if(dn.length){const[{resolve:t,stream:n,workerOptions:r}]=dn.splice(0,1);t(new Qt(e,n,r,w))}else e.worker?(pn(e),Number.isFinite(p)&&p>=0&&(e.terminateTimeout=setTimeout((()=>{ln=ln.filter((t=>t!=e)),e.terminate()}),p))):ln=ln.filter((t=>t!=e))}}function pn(e){const{terminateTimeout:t}=e;t&&(clearTimeout(t),e.terminateTimeout=null)}function hn(e,t,n){return class{constructor(r){const i=this;var a,o;a=r,o="level",("function"==typeof Object.hasOwn?Object.hasOwn(a,o):a.hasOwnProperty(o))&&void 0===r.level&&delete r.level,i.codec=new e(Object.assign({},t,r)),n(i.codec,(e=>{if(i.pendingData){const t=i.pendingData;i.pendingData=new Uint8Array(t.length+e.length);const{pendingData:n}=i;n.set(t,0),n.set(e,t.length)}else i.pendingData=new Uint8Array(e)}))}append(e){return this.codec.push(e),r(this)}flush(){return this.codec.push(new Uint8Array,!0),r(this)}};function r(e){if(e.pendingData){const t=e.pendingData;return e.pendingData=null,t}return new Uint8Array}}const mn="HTTP error ",yn="HTTP Range not supported",wn="Writer iterator completed too soon",gn="Content-Length",bn="Range",xn="HEAD",vn="GET",_n="bytes",kn=65536,Sn="writable";class An{constructor(){this.size=0}init(){this.initialized=!0}}class zn extends An{get readable(){const e=this,{chunkSize:t=kn}=e,n=new ReadableStream({start(){this.chunkOffset=0},async pull(r){const{offset:i=0,size:a,diskNumberStart:o}=n,{chunkOffset:s}=this;r.enqueue(await tr(e,i+s,Math.min(t,a-s),o)),s+t>a?r.close():this.chunkOffset+=t}});return n}}class En extends An{constructor(){super();const e=this,t=new WritableStream({write:t=>e.writeUint8Array(t)});Object.defineProperty(e,Sn,{get:()=>t})}writeUint8Array(){}}class jn extends zn{constructor(e){super();let t=e.length;for(;"="==e.charAt(t-1);)t--;const n=e.indexOf(",")+1;Object.assign(this,{dataURI:e,dataStart:n,size:Math.floor(.75*(t-n))})}readUint8Array(e,t){const{dataStart:n,dataURI:r}=this,i=new Uint8Array(t),a=4*Math.floor(e/3),o=atob(r.substring(a+n,4*Math.ceil((e+t)/3)+n)),s=e-3*Math.floor(a/4);for(let e=s;e<s+t;e++)i[e-s]=o.charCodeAt(e);return i}}class Dn extends En{constructor(e){super(),Object.assign(this,{data:"data:"+(e||"")+";base64,",pending:[]})}writeUint8Array(e){const t=this;let n=0,r=t.pending;const i=t.pending.length;for(t.pending="",n=0;n<3*Math.floor((i+e.length)/3)-i;n++)r+=String.fromCharCode(e[n]);for(;n<e.length;n++)t.pending+=String.fromCharCode(e[n]);r.length>2?t.data+=btoa(r):t.pending=r}getData(){return this.data+btoa(this.pending)}}class On extends zn{constructor(e){super(),Object.assign(this,{blob:e,size:e.size})}async readUint8Array(e,t){const n=this,r=e+t,i=e||r<n.size?n.blob.slice(e,r):n.blob;let a=await i.arrayBuffer();return a.byteLength>t&&(a=a.slice(e,r)),new Uint8Array(a)}}class Cn extends An{constructor(e){super();const t=new TransformStream,n=[];e&&n.push(["Content-Type",e]),Object.defineProperty(this,Sn,{get:()=>t.writable}),this.blob=new Response(t.readable,{headers:n}).blob()}getData(){return this.blob}}class Rn extends On{constructor(e){super(new Blob([e],{type:"text/plain"}))}}class Un extends Cn{constructor(e){super(e),Object.assign(this,{encoding:e,utf8:!e||"utf-8"==e.toLowerCase()})}async getData(){const{encoding:e,utf8:t}=this,n=await super.getData();if(n.text&&t)return n.text();{const t=new FileReader;return new Promise(((r,i)=>{Object.assign(t,{onload:({target:e})=>r(e.result),onerror:()=>i(t.error)}),t.readAsText(n,e)}))}}}class Fn extends zn{constructor(e,t){super(),In(this,e,t)}async init(){await Pn(this,Vn,Mn),super.init()}readUint8Array(e,t){return Tn(this,e,t,Vn,Mn)}}class Wn extends zn{constructor(e,t){super(),In(this,e,t)}async init(){await Pn(this,Zn,Nn),super.init()}readUint8Array(e,t){return Tn(this,e,t,Zn,Nn)}}function In(e,t,n){const{preventHeadRequest:r,useRangeHeader:i,forceRangeRequests:a}=n;delete(n=Object.assign({},n)).preventHeadRequest,delete n.useRangeHeader,delete n.forceRangeRequests,delete n.useXHR,Object.assign(e,{url:t,options:n,preventHeadRequest:r,useRangeHeader:i,forceRangeRequests:a})}async function Pn(e,t,n){const{url:r,useRangeHeader:i,forceRangeRequests:a}=e;if(function(e){const{baseURL:t}=Re(),{protocol:n}=new URL(e,t);return"http:"==n||"https:"==n}(r)&&(i||a)){const{headers:r}=await t(vn,e,qn(e));if(!a&&r.get("Accept-Ranges")!=_n)throw new Error(yn);{let i;const a=r.get("Content-Range");if(a){const e=a.trim().split(/\s*\/\s*/);if(e.length){const t=e[1];t&&"*"!=t&&(i=Number(t))}}i===Ae?await Hn(e,t,n):e.size=i}}else await Hn(e,t,n)}async function Tn(e,t,n,r,i){const{useRangeHeader:a,forceRangeRequests:o,options:s}=e;if(a||o){const i=await r(vn,e,qn(e,t,n));if(206!=i.status)throw new Error(yn);return new Uint8Array(await i.arrayBuffer())}{const{data:r}=e;return r||await i(e,s),new Uint8Array(e.data.subarray(t,t+n))}}function qn(e,t=0,n=1){return Object.assign({},Ln(e),{[bn]:_n+"="+t+"-"+(t+n-1)})}function Ln({options:e}){const{headers:t}=e;if(t)return Symbol.iterator in t?Object.fromEntries(t):t}async function Mn(e){await Bn(e,Vn)}async function Nn(e){await Bn(e,Zn)}async function Bn(e,t){const n=await t(vn,e,Ln(e));e.data=new Uint8Array(await n.arrayBuffer()),e.size||(e.size=e.data.length)}async function Hn(e,t,n){if(e.preventHeadRequest)await n(e,e.options);else{const r=(await t(xn,e,Ln(e))).headers.get(gn);r?e.size=Number(r):await n(e,e.options)}}async function Vn(e,{options:t,url:n},r){const i=await fetch(n,Object.assign({},t,{method:e,headers:r}));if(i.status<400)return i;throw 416==i.status?new Error(yn):new Error(mn+(i.statusText||i.status))}function Zn(e,{url:t},n){return new Promise(((r,i)=>{const a=new XMLHttpRequest;if(a.addEventListener("load",(()=>{if(a.status<400){const e=[];a.getAllResponseHeaders().trim().split(/[\r\n]+/).forEach((t=>{const n=t.trim().split(/\s*:\s*/);n[0]=n[0].trim().replace(/^[a-z]|-[a-z]/g,(e=>e.toUpperCase())),e.push(n)})),r({status:a.status,arrayBuffer:()=>a.response,headers:new Map(e)})}else i(416==a.status?new Error(yn):new Error(mn+(a.statusText||a.status)))}),!1),a.addEventListener("error",(e=>i(e.detail?e.detail.error:new Error("Network error"))),!1),a.open(e,t),n)for(const e of Object.entries(n))a.setRequestHeader(e[0],e[1]);a.responseType="arraybuffer",a.send()}))}class Kn extends zn{constructor(e,t={}){super(),Object.assign(this,{url:e,reader:t.useXHR?new Wn(e,t):new Fn(e,t)})}set size(e){}get size(){return this.reader.size}async init(){await this.reader.init(),super.init()}readUint8Array(e,t){return this.reader.readUint8Array(e,t)}}class Yn extends zn{constructor(e){super(),Object.assign(this,{array:e,size:e.length})}readUint8Array(e,t){return this.array.slice(e,e+t)}}class $n extends En{init(e=0){Object.assign(this,{offset:0,array:new Uint8Array(e)}),super.init()}writeUint8Array(e){const t=this;if(t.offset+e.length>t.array.length){const n=t.array;t.array=new Uint8Array(n.length+e.length),t.array.set(n)}t.array.set(e,t.offset),t.offset+=e.length}getData(){return this.array}}class Gn extends zn{constructor(e){super(),this.readers=e}async init(){const e=this,{readers:t}=e;e.lastDiskNumber=0,e.lastDiskOffset=0,await Promise.all(t.map((async(n,r)=>{await n.init(),r!=t.length-1&&(e.lastDiskOffset+=n.size),e.size+=n.size}))),super.init()}async readUint8Array(e,t,n=0){const r=this,{readers:i}=this;let a,o=n;-1==o&&(o=i.length-1);let s=e;for(;s>=i[o].size;)s-=i[o].size,o++;const c=i[o],l=c.size;if(s+t<=l)a=await tr(c,s,t);else{const i=l-s;a=new Uint8Array(t),a.set(await tr(c,s,i)),a.set(await r.readUint8Array(e+i,t-i,n),i)}return r.lastDiskNumber=Math.max(o,r.lastDiskNumber),a}}class Xn extends An{constructor(e,t=4294967295){super();const n=this;let r,i,a;Object.assign(n,{diskNumber:0,diskOffset:0,size:0,maxSize:t,availableSize:t});const o=new WritableStream({async write(t){const{availableSize:o}=n;if(a)t.length>=o?(await s(t.slice(0,o)),await c(),n.diskOffset+=r.size,n.diskNumber++,a=null,await this.write(t.slice(o))):await s(t);else{const{value:o,done:s}=await e.next();if(s&&!o)throw new Error(wn);r=o,r.size=0,r.maxSize&&(n.maxSize=r.maxSize),n.availableSize=n.maxSize,await Jn(r),i=o.writable,a=i.getWriter(),await this.write(t)}},async close(){await a.ready,await c()}});async function s(e){const t=e.length;t&&(await a.ready,await a.write(e),r.size+=t,n.size+=t,n.availableSize-=t)}async function c(){i.size=r.size,await a.close()}Object.defineProperty(n,Sn,{get:()=>o})}}async function Jn(e,t){e.init&&!e.initialized&&await e.init(t)}function Qn(e){return Array.isArray(e)&&(e=new Gn(e)),e instanceof ReadableStream&&(e={readable:e}),e}function er(e){e.writable===Ae&&typeof e.next==Ee&&(e=new Xn(e)),e instanceof WritableStream&&(e={writable:e});const{writable:t}=e;return t.size===Ae&&(t.size=0),e instanceof Xn||Object.assign(e,{diskNumber:0,diskOffset:0,availableSize:1/0,maxSize:1/0}),e}function tr(e,t,n,r){return e.readUint8Array(t,n,r)}const nr=Gn,rr=Xn,ir="\0☺☻♥♦♣♠•◘○◙♂♀♪♫☼►◄↕‼¶§▬↨↑↓→←∟↔▲▼ !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~⌂ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ".split(""),ar=256==ir.length;function or(e,t){return t&&"cp437"==t.trim().toLowerCase()?function(e){if(ar){let t="";for(let n=0;n<e.length;n++)t+=ir[e[n]];return t}return(new TextDecoder).decode(e)}(e):new TextDecoder(t).decode(e)}const sr="filename",cr="rawFilename",lr="comment",dr="rawComment",fr="uncompressedSize",ur="compressedSize",pr="offset",hr="diskNumberStart",mr="lastModDate",yr="rawLastModDate",wr="lastAccessDate",gr="creationDate",br="internalFileAttribute",xr="externalFileAttribute",vr="msDosCompatible",_r="zip64",kr=[sr,cr,ur,fr,mr,yr,lr,dr,wr,gr,pr,hr,hr,br,xr,vr,_r,"directory","bitFlag","encrypted","signature","filenameUTF8","commentUTF8","compressionMethod","version","versionMadeBy","extraField","rawExtraField","extraFieldZip64","extraFieldUnicodePath","extraFieldUnicodeComment","extraFieldAES","extraFieldNTFS","extraFieldExtendedTimestamp"];class Sr{constructor(e){kr.forEach((t=>this[t]=e[t]))}}const Ar="File format is not recognized",zr="End of central directory not found",Er="End of Zip64 central directory not found",jr="End of Zip64 central directory locator not found",Dr="Central directory header not found",Or="Local file header not found",Cr="Zip64 extra field not found",Rr="File contains encrypted entry",Ur="Encryption method not supported",Fr="Compression method not supported",Wr="Split zip file",Ir="utf-8",Pr="cp437",Tr=[[fr,fe],[ur,fe],[pr,fe],[hr,ue]],qr={[ue]:{getValue:Gr,bytes:4},[fe]:{getValue:Xr,bytes:8}};class Lr{constructor(e,t={}){Object.assign(this,{reader:Qn(e),options:t,config:Re()})}async*getEntriesGenerator(e={}){const t=this;let{reader:n}=t;const{config:r}=t;if(await Jn(n),n.size!==Ae&&n.readUint8Array||(n=new On(await new Response(n.readable).blob()),await Jn(n)),n.size<be)throw new Error(Ar);n.chunkSize=Ue(r);const i=await async function(e,t,n,r,i){const a=new Uint8Array(4);Jr(a).setUint32(0,101010256,!0);return await o(22)||await o(Math.min(1048582,n));async function o(t){const r=n-t,i=await tr(e,r,t);for(let e=i.length-22;e>=0;e--)if(i[e]==a[0]&&i[e+1]==a[1]&&i[e+2]==a[2]&&i[e+3]==a[3])return{offset:r+e,buffer:i.slice(e,e+22).buffer}}}(n,0,n.size);if(!i)throw Gr(Jr(await tr(n,0,4)))==he?new Error(Wr):new Error(zr);const a=Jr(i);let o=Gr(a,12),s=Gr(a,16);const c=i.offset,l=$r(a,20),d=c+be+l;let f=$r(a,4);const u=n.lastDiskNumber||0;let p=$r(a,6),h=$r(a,8),m=0,y=0;if(s==fe||o==fe||h==ue||p==ue){const e=Jr(await tr(n,i.offset-20,20));if(Gr(e,0)!=ge)throw new Error(Er);s=Xr(e,8);let t=await tr(n,s,56,-1),r=Jr(t);const a=i.offset-20-56;if(Gr(r,0)!=we&&s!=a){const e=s;s=a,m=s-e,t=await tr(n,s,56,-1),r=Jr(t)}if(Gr(r,0)!=we)throw new Error(jr);f==ue&&(f=Gr(r,16)),p==ue&&(p=Gr(r,20)),h==ue&&(h=Xr(r,32)),o==fe&&(o=Xr(r,40)),s-=o}if(u!=f)throw new Error(Wr);if(s<0||s>=n.size)throw new Error(Ar);let w=0,g=await tr(n,s,o,p),b=Jr(g);if(o){const e=i.offset-o;if(Gr(b,w)!=me&&s!=e){const t=s;s=e,m=s-t,g=await tr(n,s,o,p),b=Jr(g)}}const x=i.offset-s-(n.lastDiskOffset||0);if(o!=x&&x>=0&&(o=x,g=await tr(n,s,o,p),b=Jr(g)),s<0||s>=n.size)throw new Error(Ar);const v=Vr(t,e,"filenameEncoding"),_=Vr(t,e,"commentEncoding");for(let i=0;i<h;i++){const a=new Mr(n,r,t.options);if(Gr(b,w)!=me)throw new Error(Dr);Nr(a,b,w+6);const o=Boolean(a.bitFlag.languageEncodingFlag),s=w+46,c=s+a.filenameLength,l=c+a.extraFieldLength,d=$r(b,w+4),f=0==(0&d),u=g.subarray(s,c),p=$r(b,w+32),x=l+p,k=g.subarray(l,x),S=o,A=o,z=f&&16==(16&Yr(b,w+38)),E=Gr(b,w+42)+m;Object.assign(a,{versionMadeBy:d,msDosCompatible:f,compressedSize:0,uncompressedSize:0,commentLength:p,directory:z,offset:E,diskNumberStart:$r(b,w+34),internalFileAttribute:$r(b,w+36),externalFileAttribute:Gr(b,w+38),rawFilename:u,filenameUTF8:S,commentUTF8:A,rawExtraField:g.subarray(c,l)});const[j,D]=await Promise.all([or(u,S?Ir:v||Pr),or(k,A?Ir:_||Pr)]);Object.assign(a,{rawComment:k,filename:j,comment:D,directory:z||j.endsWith(_e)}),y=Math.max(E,y),await Br(a,a,b,w+6);const O=new Sr(a);O.getData=(e,t)=>a.getData(e,O,t),w=x;const{onprogress:C}=e;if(C)try{await C(i+1,h,new Sr(a))}catch(e){}yield O}const k=Vr(t,e,"extractPrependedData"),S=Vr(t,e,"extractAppendedData");return k&&(t.prependedData=y>0?await tr(n,0,y):new Uint8Array),t.comment=l?await tr(n,c+be,l):new Uint8Array,S&&(t.appendedData=d<n.size?await tr(n,d,n.size-d):new Uint8Array),!0}async getEntries(e={}){const t=[];for await(const n of this.getEntriesGenerator(e))t.push(n);return t}async close(){}}class Mr{constructor(e,t,n){Object.assign(this,{reader:e,config:t,options:n})}async getData(e,t,n={}){const r=this,{reader:i,offset:a,diskNumberStart:o,extraFieldAES:s,compressionMethod:c,config:l,bitFlag:d,signature:f,rawLastModDate:u,uncompressedSize:p,compressedSize:h}=r,m=t.localDirectory={},y=Jr(await tr(i,a,30,o));let w=Vr(r,n,"password");if(w=w&&w.length&&w,s&&99!=s.originalCompressionMethod)throw new Error(Fr);if(0!=c&&8!=c)throw new Error(Fr);if(Gr(y,0)!=pe)throw new Error(Or);Nr(m,y,4),m.rawExtraField=m.extraFieldLength?await tr(i,a+30+m.filenameLength,m.extraFieldLength,o):new Uint8Array,await Br(r,m,y,4,!0),Object.assign(t,{lastAccessDate:m.lastAccessDate,creationDate:m.creationDate});const g=r.encrypted&&m.encrypted,b=g&&!s;if(g){if(!b&&s.strength===Ae)throw new Error(Ur);if(!w)throw new Error(Rr)}const x=a+30+m.filenameLength+m.extraFieldLength,v=h,_=i.readable;Object.assign(_,{diskNumberStart:o,offset:x,size:v});const k=Vr(r,n,"signal"),S=Vr(r,n,"checkPasswordOnly");S&&(e=new WritableStream),e=er(e),await Jn(e,p);const{writable:A}=e,{onstart:z,onprogress:E,onend:j}=n,D={options:{codecType:Gt,password:w,zipCrypto:b,encryptionStrength:s&&s.strength,signed:Vr(r,n,"checkSignature"),passwordVerification:b&&(d.dataDescriptor?u>>>8&255:f>>>24&255),signature:f,compressed:0!=c,encrypted:g,useWebWorkers:Vr(r,n,"useWebWorkers"),useCompressionStream:Vr(r,n,"useCompressionStream"),transferStreams:Vr(r,n,"transferStreams"),checkPasswordOnly:S},config:l,streamOptions:{signal:k,size:v,onstart:z,onprogress:E,onend:j}};let O=0;try{({outputSize:O}=await un({readable:_,writable:A},D))}catch(e){if(!S||e.message!=Je)throw e}finally{const e=Vr(r,n,"preventClose");A.size+=O,e||A.locked||await A.getWriter().close()}return S?void 0:e.getData?e.getData():A}}function Nr(e,t,n){const r=e.rawBitFlag=$r(t,n+2),i=1==(1&r),a=Gr(t,n+6);Object.assign(e,{encrypted:i,version:$r(t,n),bitFlag:{level:(6&r)>>1,dataDescriptor:8==(8&r),languageEncodingFlag:(r&ve)==ve},rawLastModDate:a,lastModDate:Zr(a),filenameLength:$r(t,n+22),extraFieldLength:$r(t,n+24)})}async function Br(e,t,n,r,i){const{rawExtraField:a}=t,o=t.extraField=new Map,s=Jr(new Uint8Array(a));let c=0;try{for(;c<a.length;){const e=$r(s,c),t=$r(s,c+2);o.set(e,{type:e,data:a.slice(c+4,c+4+t)}),c+=4+t}}catch(e){}const l=$r(n,r+4);Object.assign(t,{signature:Gr(n,r+10),uncompressedSize:Gr(n,r+18),compressedSize:Gr(n,r+14)});const d=o.get(1);d&&(function(e,t){t.zip64=!0;const n=Jr(e.data),r=Tr.filter((([e,n])=>t[e]==n));for(let i=0,a=0;i<r.length;i++){const[o,s]=r[i];if(t[o]==s){const r=qr[s];t[o]=e[o]=r.getValue(n,a),a+=r.bytes}else if(e[o])throw new Error(Cr)}}(d,t),t.extraFieldZip64=d);const f=o.get(28789);f&&(await Hr(f,sr,cr,t,e),t.extraFieldUnicodePath=f);const u=o.get(25461);u&&(await Hr(u,lr,dr,t,e),t.extraFieldUnicodeComment=u);const p=o.get(39169);p?(function(e,t,n){const r=Jr(e.data),i=Yr(r,4);Object.assign(e,{vendorVersion:Yr(r,0),vendorId:Yr(r,2),strength:i,originalCompressionMethod:n,compressionMethod:$r(r,5)}),t.compressionMethod=e.compressionMethod}(p,t,l),t.extraFieldAES=p):t.compressionMethod=l;const h=o.get(10);h&&(function(e,t){const n=Jr(e.data);let r,i=4;try{for(;i<e.data.length&&!r;){const t=$r(n,i),a=$r(n,i+2);1==t&&(r=e.data.slice(i+4,i+4+a)),i+=4+a}}catch(e){}try{if(r&&24==r.length){const n=Jr(r),i=n.getBigUint64(0,!0),a=n.getBigUint64(8,!0),o=n.getBigUint64(16,!0);Object.assign(e,{rawLastModDate:i,rawLastAccessDate:a,rawCreationDate:o});const s=Kr(i),c={lastModDate:s,lastAccessDate:Kr(a),creationDate:Kr(o)};Object.assign(e,c),Object.assign(t,c)}}catch(e){}}(h,t),t.extraFieldNTFS=h);const m=o.get(xe);m&&(function(e,t,n){const r=Jr(e.data),i=Yr(r,0),a=[],o=[];n?(1==(1&i)&&(a.push(mr),o.push(yr)),2==(2&i)&&(a.push(wr),o.push("rawLastAccessDate")),4==(4&i)&&(a.push(gr),o.push("rawCreationDate"))):e.data.length>=5&&(a.push(mr),o.push(yr));let s=1;a.forEach(((n,i)=>{if(e.data.length>=s+4){const a=Gr(r,s);t[n]=e[n]=new Date(1e3*a);const c=o[i];e[c]=a}s+=4}))}(m,t,i),t.extraFieldExtendedTimestamp=m);const y=o.get(6534);y&&(t.extraFieldUSDZ=y)}async function Hr(e,t,n,r,i){const a=Jr(e.data),o=new qe;o.append(i[n]);const s=Jr(new Uint8Array(4));s.setUint32(0,o.get(),!0);const c=Gr(a,1);Object.assign(e,{version:Yr(a,0),[t]:or(e.data.subarray(5)),valid:!i.bitFlag.languageEncodingFlag&&c==Gr(s,0)}),e.valid&&(r[t]=e[t],r[t+"UTF8"]=!0)}function Vr(e,t,n){return t[n]===Ae?e.options[n]:t[n]}function Zr(e){const t=(4294901760&e)>>16,n=65535&e;try{return new Date(1980+((65024&t)>>9),((480&t)>>5)-1,31&t,(63488&n)>>11,(2016&n)>>5,2*(31&n),0)}catch(e){}}function Kr(e){return new Date(Number(e/BigInt(1e4)-BigInt(116444736e5)))}function Yr(e,t){return e.getUint8(t)}function $r(e,t){return e.getUint16(t,!0)}function Gr(e,t){return e.getUint32(t,!0)}function Xr(e,t){return Number(e.getBigUint64(t,!0))}function Jr(e){return new DataView(e.buffer)}const Qr="File already exists",ei="Zip file comment exceeds 64KB",ti="File entry comment exceeds 64KB",ni="File entry name exceeds 64KB",ri="Version exceeds 65535",ii="The strength must equal 1, 2, or 3",ai="Extra field type exceeds 65535",oi="Extra field data exceeds 64KB",si="Zip64 is not supported (make sure 'keepOrder' is set to 'true')",ci=new Uint8Array([7,0,2,0,65,69,3,0,0]);let li=0;const di=[];class fi{constructor(e,t={}){e=er(e),Object.assign(this,{writer:e,addSplitZipSignature:e instanceof Xn,options:t,config:Re(),files:new Map,filenames:new Set,offset:e.writable.size,pendingEntriesSize:0,pendingAddFileCalls:new Set,bufferedWrites:0})}async add(e="",t,n={}){const r=this,{pendingAddFileCalls:i,config:a}=r;let o;li<a.maxWorkers?li++:await new Promise((e=>di.push(e)));try{if(e=e.trim(),r.filenames.has(e))throw new Error(Qr);return r.filenames.add(e),o=async function(e,t,n,r){t=t.trim(),r.directory&&!t.endsWith(_e)?t+=_e:r.directory=t.endsWith(_e);const i=Me(t);if(vi(i)>ue)throw new Error(ni);const a=r.comment||"",o=Me(a);if(vi(o)>ue)throw new Error(ti);const s=hi(e,r,"version",20);if(s>ue)throw new Error(ri);const c=hi(e,r,"versionMadeBy",20);if(c>ue)throw new Error(ri);const l=hi(e,r,mr,new Date),d=hi(e,r,wr),f=hi(e,r,gr),u=hi(e,r,vr,!0),p=hi(e,r,br,0),h=hi(e,r,xr,0),m=hi(e,r,"password"),y=hi(e,r,"encryptionStrength",3),w=hi(e,r,"zipCrypto"),g=hi(e,r,"extendedTimestamp",!0),b=hi(e,r,"keepOrder",!0),x=hi(e,r,"level"),v=hi(e,r,"useWebWorkers"),_=hi(e,r,"bufferedWrite"),k=hi(e,r,"dataDescriptorSignature",!1),S=hi(e,r,"signal"),A=hi(e,r,"useCompressionStream");let z=hi(e,r,"dataDescriptor",!0),E=hi(e,r,_r);if(m!==Ae&&y!==Ae&&(y<1||y>3))throw new Error(ii);let j=new Uint8Array;const{extraField:D}=r;if(D){let e=0,t=0;D.forEach((t=>e+=4+vi(t))),j=new Uint8Array(e),D.forEach(((e,n)=>{if(n>ue)throw new Error(ai);if(vi(e)>ue)throw new Error(oi);bi(j,new Uint16Array([n]),t),bi(j,new Uint16Array([vi(e)]),t+2),bi(j,e,t+4),t+=4+vi(e)}))}let O=0,C=0,R=0;const U=!0===E;n&&(n=Qn(n),await Jn(n),n.size===Ae?(z=!0,(E||E===Ae)&&(E=!0,R=O=fe)):(R=n.size,O=function(e){return e+5*(Math.floor(e/16383)+1)}(R)));const{diskOffset:F,diskNumber:W,maxSize:I}=e.writer,P=U||R>=fe,T=U||O>=fe,q=U||e.offset+e.pendingEntriesSize-F>=fe,L=hi(e,r,"supportZip64SplitFile",!0)&&U||W+Math.ceil(e.pendingEntriesSize/I)>=ue;if(q||P||T||L){if(!1===E||!b)throw new Error(si);E=!0}E=E||!1;const M=function(e){const{rawFilename:t,lastModDate:n,lastAccessDate:r,creationDate:i,password:a,level:o,zip64:s,zipCrypto:c,dataDescriptor:l,directory:d,rawExtraField:f,encryptionStrength:u,extendedTimestamp:p}=e,h=0!==o&&!d,m=Boolean(a&&vi(a));let y,w,g,b,x=e.version;if(m&&!c){y=new Uint8Array(vi(ci)+2);const e=xi(y);yi(e,0,39169),bi(y,ci,2),mi(e,8,u)}else y=new Uint8Array;if(p){g=new Uint8Array(9+(r?4:0)+(i?4:0));const e=xi(g);yi(e,0,xe),yi(e,2,vi(g)-4),b=1+(r?2:0)+(i?4:0),mi(e,4,b);let t=5;wi(e,t,Math.floor(n.getTime()/1e3)),t+=4,r&&(wi(e,t,Math.floor(r.getTime()/1e3)),t+=4),i&&wi(e,t,Math.floor(i.getTime()/1e3));try{w=new Uint8Array(36);const e=xi(w),t=pi(n);yi(e,0,10),yi(e,2,32),yi(e,8,1),yi(e,10,24),gi(e,12,t),gi(e,20,pi(r)||t),gi(e,28,pi(i)||t)}catch(e){w=new Uint8Array}}else w=g=new Uint8Array;let v=ve;l&&(v|=8);let _=0;h&&(_=8),s&&(x=x>45?x:45),m&&(v|=1,c||(x=x>51?x:51,_=99,h&&(y[9]=8)));const k=new Uint8Array(26),S=xi(k);yi(S,0,x),yi(S,2,v),yi(S,4,_);const A=new Uint32Array(1),z=xi(A);let E;E=n<Se?Se:n>ke?ke:n,yi(z,0,(E.getHours()<<6|E.getMinutes())<<5|E.getSeconds()/2),yi(z,2,(E.getFullYear()-1980<<4|E.getMonth()+1)<<5|E.getDate());const j=A[0];wi(S,6,j),yi(S,22,vi(t));const D=vi(y,g,w,f);yi(S,24,D);const O=new Uint8Array(30+vi(t)+D);return wi(xi(O),0,pe),bi(O,k,4),bi(O,t,30),bi(O,y,30+vi(t)),bi(O,g,30+vi(t,y)),bi(O,w,30+vi(t,y,g)),bi(O,f,30+vi(t,y,g,w)),{localHeaderArray:O,headerArray:k,headerView:S,lastModDate:n,rawLastModDate:j,encrypted:m,compressed:h,version:x,compressionMethod:_,extraFieldExtendedTimestampFlag:b,rawExtraFieldExtendedTimestamp:g,rawExtraFieldNTFS:w,rawExtraFieldAES:y,extraFieldLength:D}}(r=Object.assign({},r,{rawFilename:i,rawComment:o,version:s,versionMadeBy:c,lastModDate:l,lastAccessDate:d,creationDate:f,rawExtraField:j,zip64:E,zip64UncompressedSize:P,zip64CompressedSize:T,zip64Offset:q,zip64DiskNumberStart:L,password:m,level:x,useWebWorkers:v,encryptionStrength:y,extendedTimestamp:g,zipCrypto:w,bufferedWrite:_,keepOrder:b,dataDescriptor:z,dataDescriptorSignature:k,signal:S,msDosCompatible:u,internalFileAttribute:p,externalFileAttribute:h,useCompressionStream:A})),N=function(e){const{zip64:t,dataDescriptor:n,dataDescriptorSignature:r}=e;let i,a=new Uint8Array,o=0;return n&&(a=new Uint8Array(t?r?24:20:r?16:12),i=xi(a),r&&(o=4,wi(i,0,134695760))),{dataDescriptorArray:a,dataDescriptorView:i,dataDescriptorOffset:o}}(r),B=vi(M.localHeaderArray,N.dataDescriptorArray);let H;C=B+O,e.options.usdz&&(C+=C+64),e.pendingEntriesSize+=C;try{H=await async function(e,t,n,r,i){const{files:a,writer:o}=e,{keepOrder:s,dataDescriptor:c,signal:l}=i,{headerInfo:d}=r,{usdz:f}=e.options,u=Array.from(a.values()).pop();let p,h,m,y,w,g,b={};a.set(t,b);try{let d;s&&(d=u&&u.lock,b.lock=new Promise((e=>m=e))),!(i.bufferedWrite||e.writerLocked||e.bufferedWrites&&s)&&c||f?(g=o,await x()):(g=new Cn,g.writable.size=0,p=!0,e.bufferedWrites++,await Jn(o)),await Jn(g);const{writable:h}=o;let{diskOffset:_}=o;if(e.addSplitZipSignature){delete e.addSplitZipSignature;const t=new Uint8Array(4);wi(xi(t),0,he),await ui(h,t),e.offset+=4}f&&function(e,t){const{headerInfo:n}=e;let{localHeaderArray:r,extraFieldLength:i}=n,a=xi(r),o=64-(t+r.length)%64;o<4&&(o+=64);const s=new Uint8Array(o),c=xi(s);yi(c,0,6534),yi(c,2,o-2);const l=r;n.localHeaderArray=r=new Uint8Array(l.length+o),bi(r,l),bi(r,s,l.length),a=xi(r),yi(a,28,i+o),e.metadataSize+=o}(r,e.offset-_),p||(await d,await v(h));const{diskNumber:k}=o;if(w=!0,b.diskNumberStart=k,b=await async function(e,t,{diskNumberStart:n,lock:r},i,a,o){const{headerInfo:s,dataDescriptorInfo:c,metadataSize:l}=i,{localHeaderArray:d,headerArray:f,lastModDate:u,rawLastModDate:p,encrypted:h,compressed:m,version:y,compressionMethod:w,rawExtraFieldExtendedTimestamp:g,extraFieldExtendedTimestampFlag:b,rawExtraFieldNTFS:x,rawExtraFieldAES:v}=s,{dataDescriptorArray:_}=c,{rawFilename:k,lastAccessDate:S,creationDate:A,password:z,level:E,zip64:j,zip64UncompressedSize:D,zip64CompressedSize:O,zip64Offset:C,zip64DiskNumberStart:R,zipCrypto:U,dataDescriptor:F,directory:W,versionMadeBy:I,rawComment:P,rawExtraField:T,useWebWorkers:q,onstart:L,onprogress:M,onend:N,signal:B,encryptionStrength:H,extendedTimestamp:V,msDosCompatible:Z,internalFileAttribute:K,externalFileAttribute:Y,useCompressionStream:$}=o,G={lock:r,versionMadeBy:I,zip64:j,directory:Boolean(W),filenameUTF8:!0,rawFilename:k,commentUTF8:!0,rawComment:P,rawExtraFieldExtendedTimestamp:g,rawExtraFieldNTFS:x,rawExtraFieldAES:v,rawExtraField:T,extendedTimestamp:V,msDosCompatible:Z,internalFileAttribute:K,externalFileAttribute:Y,diskNumberStart:n};let X,J=0,Q=0;const{writable:ee}=t;if(e){e.chunkSize=Ue(a),await ui(ee,d);const t=e.readable,n=t.size=e.size,r={options:{codecType:$t,level:E,password:z,encryptionStrength:H,zipCrypto:h&&U,passwordVerification:h&&U&&p>>8&255,signed:!0,compressed:m,encrypted:h,useWebWorkers:q,useCompressionStream:$,transferStreams:!1},config:a,streamOptions:{signal:B,size:n,onstart:L,onprogress:M,onend:N}},i=await un({readable:t,writable:ee},r);ee.size+=i.size,X=i.signature,Q=e.size=t.size,J=i.size}else await ui(ee,d);let te;if(j){let e=4;D&&(e+=8),O&&(e+=8),C&&(e+=8),R&&(e+=4),te=new Uint8Array(e)}else te=new Uint8Array;return function(e,t){const{signature:n,rawExtraFieldZip64:r,compressedSize:i,uncompressedSize:a,headerInfo:o,dataDescriptorInfo:s}=e,{headerView:c,encrypted:l}=o,{dataDescriptorView:d,dataDescriptorOffset:f}=s,{zip64:u,zip64UncompressedSize:p,zip64CompressedSize:h,zipCrypto:m,dataDescriptor:y}=t;if(l&&!m||n===Ae||(wi(c,10,n),y&&wi(d,f,n)),u){const e=xi(r);yi(e,0,1),yi(e,2,r.length-4);let t=4;p&&(wi(c,18,fe),gi(e,t,BigInt(a)),t+=8),h&&(wi(c,14,fe),gi(e,t,BigInt(i))),y&&(gi(d,f+4,BigInt(i)),gi(d,f+12,BigInt(a)))}else wi(c,14,i),wi(c,18,a),y&&(wi(d,f+4,i),wi(d,f+8,a))}({signature:X,rawExtraFieldZip64:te,compressedSize:J,uncompressedSize:Q,headerInfo:s,dataDescriptorInfo:c},o),F&&await ui(ee,_),Object.assign(G,{uncompressedSize:Q,compressedSize:J,lastModDate:u,rawLastModDate:p,creationDate:A,lastAccessDate:S,encrypted:h,length:l+J,compressionMethod:w,version:y,headerArray:f,signature:X,rawExtraFieldZip64:te,extraFieldExtendedTimestampFlag:b,zip64UncompressedSize:D,zip64CompressedSize:O,zip64Offset:C,zip64DiskNumberStart:R}),G}(n,g,b,r,e.config,i),w=!1,a.set(t,b),b.filename=t,p){await g.writable.getWriter().close();let e=await g.getData();await d,await x(),y=!0,c||(e=await async function(e,t,n,{zipCrypto:r}){let i;i=await t.slice(0,26).arrayBuffer(),26!=i.byteLength&&(i=i.slice(0,26));const a=new DataView(i);return e.encrypted&&!r||wi(a,14,e.signature),e.zip64?(wi(a,18,fe),wi(a,22,fe)):(wi(a,18,e.compressedSize),wi(a,22,e.uncompressedSize)),await ui(n,new Uint8Array(i)),t.slice(i.byteLength)}(b,e,h,i)),await v(h),b.diskNumberStart=o.diskNumber,_=o.diskOffset,await e.stream().pipeTo(h,{preventClose:!0,preventAbort:!0,signal:l}),h.size+=e.size,y=!1}if(b.offset=e.offset-_,b.zip64)!function(e,t){const{rawExtraFieldZip64:n,offset:r,diskNumberStart:i}=e,{zip64UncompressedSize:a,zip64CompressedSize:o,zip64Offset:s,zip64DiskNumberStart:c}=t,l=xi(n);let d=4;a&&(d+=8),o&&(d+=8),s&&(gi(l,d,BigInt(r)),d+=8),c&&wi(l,d,i)}(b,i);else if(b.offset>=fe)throw new Error(si);return e.offset+=b.length,b}catch(n){if(p&&y||!p&&w){if(e.hasCorruptedEntries=!0,n)try{n.corruptedEntry=!0}catch(e){}p?e.offset+=g.writable.size:e.offset=g.writable.size}throw a.delete(t),n}finally{p&&e.bufferedWrites--,m&&m(),h&&h()}async function x(){e.writerLocked=!0;const{lockWriter:t}=e;e.lockWriter=new Promise((t=>h=()=>{e.writerLocked=!1,t()})),await t}async function v(e){d.localHeaderArray.length>o.availableSize&&(o.availableSize=0,await ui(e,new Uint8Array))}}(e,t,n,{headerInfo:M,dataDescriptorInfo:N,metadataSize:B},r)}finally{e.pendingEntriesSize-=C}return Object.assign(H,{name:t,comment:a,extraField:D}),new Sr(H)}(r,e,t,n),i.add(o),await o}catch(t){throw r.filenames.delete(e),t}finally{i.delete(o);const e=di.shift();e?e():li--}}async close(e=new Uint8Array,t={}){const{pendingAddFileCalls:n,writer:r}=this,{writable:i}=r;for(;n.size;)await Promise.all(Array.from(n));return await async function(e,t,n){const{files:r,writer:i}=e,{diskOffset:a,writable:o}=i;let{diskNumber:s}=i,c=0,l=0,d=e.offset-a,f=r.size;for(const[,e]of r){const{rawFilename:t,rawExtraFieldZip64:n,rawExtraFieldAES:r,rawComment:i,rawExtraFieldNTFS:a,rawExtraField:o,extendedTimestamp:s,extraFieldExtendedTimestampFlag:c,lastModDate:d}=e;let f;if(s){f=new Uint8Array(9);const e=xi(f);yi(e,0,xe),yi(e,2,5),mi(e,4,c),wi(e,5,Math.floor(d.getTime()/1e3))}else f=new Uint8Array;e.rawExtraFieldCDExtendedTimestamp=f,l+=46+vi(t,i,n,r,a,f,o)}const u=new Uint8Array(l),p=xi(u);await Jn(i);let h=0;for(const[e,t]of Array.from(r.values()).entries()){const{offset:a,rawFilename:s,rawExtraFieldZip64:l,rawExtraFieldAES:d,rawExtraFieldCDExtendedTimestamp:f,rawExtraFieldNTFS:m,rawExtraField:y,rawComment:w,versionMadeBy:g,headerArray:b,directory:x,zip64:v,zip64UncompressedSize:_,zip64CompressedSize:k,zip64DiskNumberStart:S,zip64Offset:A,msDosCompatible:z,internalFileAttribute:E,externalFileAttribute:j,diskNumberStart:D,uncompressedSize:O,compressedSize:C}=t,R=vi(l,d,f,m,y);wi(p,c,me),yi(p,c+4,g);const U=xi(b);_||wi(U,18,O),k||wi(U,14,C),bi(u,b,c+6),yi(p,c+30,R),yi(p,c+32,vi(w)),yi(p,c+34,v&&S?ue:D),yi(p,c+36,E),j?wi(p,c+38,j):x&&z&&mi(p,c+38,16),wi(p,c+42,v&&A?fe:a),bi(u,s,c+46),bi(u,l,c+46+vi(s)),bi(u,d,c+46+vi(s,l)),bi(u,f,c+46+vi(s,l,d)),bi(u,m,c+46+vi(s,l,d,f)),bi(u,y,c+46+vi(s,l,d,f,m)),bi(u,w,c+46+vi(s)+R);const F=46+vi(s,w)+R;if(c-h>i.availableSize&&(i.availableSize=0,await ui(o,u.slice(h,c)),h=c),c+=F,n.onprogress)try{await n.onprogress(e+1,r.size,new Sr(t))}catch(e){}}await ui(o,h?u.slice(h):u);let m=i.diskNumber;const{availableSize:y}=i;y<be&&m++;let w=hi(e,n,"zip64");if(d>=fe||l>=fe||f>=ue||m>=ue){if(!1===w)throw new Error(si);w=!0}const g=new Uint8Array(w?98:be),b=xi(g);c=0,w&&(wi(b,0,we),gi(b,4,BigInt(44)),yi(b,12,45),yi(b,14,45),wi(b,16,m),wi(b,20,s),gi(b,24,BigInt(f)),gi(b,32,BigInt(f)),gi(b,40,BigInt(l)),gi(b,48,BigInt(d)),wi(b,56,ge),gi(b,64,BigInt(d)+BigInt(l)),wi(b,72,m+1),hi(e,n,"supportZip64SplitFile",!0)&&(m=ue,s=ue),f=ue,d=fe,l=fe,c+=76),wi(b,c,ye),yi(b,c+4,m),yi(b,c+6,s),yi(b,c+8,f),yi(b,c+10,f),wi(b,c+12,l),wi(b,c+16,d);const x=vi(t);if(x){if(!(x<=ue))throw new Error(ei);yi(b,c+20,x)}await ui(o,g),x&&await ui(o,t)}(this,e,t),hi(this,t,"preventClose")||await i.getWriter().close(),r.getData?r.getData():i}}async function ui(e,t){const n=e.getWriter();await n.ready,e.size+=vi(t),await n.write(t),n.releaseLock()}function pi(e){if(e)return(BigInt(e.getTime())+BigInt(116444736e5))*BigInt(1e4)}function hi(e,t,n,r){const i=t[n]===Ae?e.options[n]:t[n];return i===Ae?r:i}function mi(e,t,n){e.setUint8(t,n)}function yi(e,t,n){e.setUint16(t,n,!0)}function wi(e,t,n){e.setUint32(t,n,!0)}function gi(e,t,n){e.setBigUint64(t,n,!0)}function bi(e,t,n){e.set(t,n)}function xi(e){return new DataView(e.buffer)}function vi(...e){let t=0;return e.forEach((e=>e&&(t+=e.length))),t}class _i{constructor(e,t,n,r){const i=this;if(e.root&&r&&r.getChildByName(t))throw new Error("Entry filename already exists");n||(n={}),Object.assign(i,{fs:e,name:t,data:n.data,options:n.options,id:e.entries.length,parent:r,children:[],uncompressedSize:n.uncompressedSize||0}),e.entries.push(i),r&&i.parent.children.push(i)}moveTo(e){this.fs.move(this,e)}getFullname(){return this.getRelativeName()}getRelativeName(e=this.fs.root){let t=this.name,n=this.parent;for(;n&&n!=e;)t=(n.name?n.name+"/":"")+t,n=n.parent;return t}isDescendantOf(e){let t=this.parent;for(;t&&t.id!=e.id;)t=t.parent;return Boolean(t)}rename(e){const t=this.parent;if(t&&t.getChildByName(e))throw new Error("Entry filename already exists");this.name=e}}class ki extends _i{constructor(e,t,n,r){super(e,t,n,r);const i=this;i.Reader=n.Reader,i.Writer=n.Writer,n.getData&&(i.getData=n.getData)}clone(){return new ki(this.fs,this.name,this)}async getData(e,t={}){const n=this;if(!e||e.constructor==n.Writer&&n.data)return n.data;{const r=n.reader=new n.Reader(n.data,t),i=n.data?n.data.uncompressedSize:r.size;await Promise.all([Jn(r),Jn(e,i)]);const a=r.readable;return a.size=n.uncompressedSize=r.size,await a.pipeTo(e.writable),e.getData?e.getData():e.writable}}isPasswordProtected(){return this.data.encrypted}async checkPassword(e,t={}){const n=this;if(!n.isPasswordProtected())return!0;t.password=e,t.checkPasswordOnly=!0;try{return await n.data.getData(null,t),!0}catch(e){if(e.message==Ge)return!1;throw e}}getText(e,t){return this.getData(new Un(e),t)}getBlob(e,t){return this.getData(new Cn(e),t)}getData64URI(e,t){return this.getData(new Dn(e),t)}getUint8Array(e){return this.getData(new $n,e)}getWritable(e=new WritableStream,t){return this.getData({writable:e},t)}replaceBlob(e){Object.assign(this,{data:e,Reader:On,Writer:Cn,reader:null})}replaceText(e){Object.assign(this,{data:e,Reader:Rn,Writer:Un,reader:null})}replaceData64URI(e){Object.assign(this,{data:e,Reader:jn,Writer:Dn,reader:null})}replaceUint8Array(e){Object.assign(this,{data:e,Reader:Yn,Writer:$n,reader:null})}replaceReadable(e){Object.assign(this,{data:null,Reader:function(){return{readable:e}},Writer:null,reader:null})}}class Si extends _i{constructor(e,t,n,r){super(e,t,n,r),this.directory=!0}clone(e){const t=this,n=new Si(t.fs,t.name);return e&&(n.children=t.children.map((t=>{const r=t.clone(e);return r.parent=n,r}))),n}addDirectory(e,t){return Ri(this,e,{options:t},!0)}addText(e,t,n={}){return Ri(this,e,{data:t,Reader:Rn,Writer:Un,options:n,uncompressedSize:t.length})}addBlob(e,t,n={}){return Ri(this,e,{data:t,Reader:On,Writer:Cn,options:n,uncompressedSize:t.size})}addData64URI(e,t,n={}){let r=t.length;for(;"="==t.charAt(r-1);)r--;const i=t.indexOf(",")+1;return Ri(this,e,{data:t,Reader:jn,Writer:Dn,options:n,uncompressedSize:Math.floor(.75*(r-i))})}addUint8Array(e,t,n={}){return Ri(this,e,{data:t,Reader:Yn,Writer:$n,options:n,uncompressedSize:t.length})}addHttpContent(e,t,n={}){return Ri(this,e,{data:t,Reader:class extends Kn{constructor(e){super(e,n)}},options:n})}addReadable(e,t,n={}){return Ri(this,e,{Reader:function(){return{readable:t}},options:n})}addFileSystemEntry(e,t={}){return Di(this,e,t)}addFileSystemHandle(e,t={}){return Di(this,e,t)}addFile(e,t={}){return t.lastModDate||(t.lastModDate=new Date(e.lastModified)),Ri(this,e.name,{data:e,Reader:function(){return{readable:e.stream(),size:e.size}},options:t,uncompressedSize:e.size})}addData(e,t){return Ri(this,e,t)}importBlob(e,t){return this.importZip(new On(e),t)}importData64URI(e,t){return this.importZip(new jn(e),t)}importUint8Array(e,t){return this.importZip(new Yn(e),t)}importHttpContent(e,t){return this.importZip(new Kn(e,t),t)}importReadable(e,t){return this.importZip({readable:e},t)}exportBlob(e={}){return this.exportZip(new Cn(e.mimeType||"application/zip"),e)}exportData64URI(e={}){return this.exportZip(new Dn(e.mimeType||"application/zip"),e)}exportUint8Array(e={}){return this.exportZip(new $n,e)}async exportWritable(e=new WritableStream,t={}){return await this.exportZip({writable:e},t),e}async importZip(e,t={}){await Jn(e);const n=new Lr(e,t),r=[],i=await n.getEntries();for(const e of i){let n=this;try{const i=e.filename.split("/"),a=i.pop();i.forEach(((t,a)=>{const o=n;n=n.getChildByName(t),n||(n=new Si(this.fs,t,{data:a==i.length-1?e:null},o),r.push(n))})),e.directory||r.push(Ri(n,a,{data:e,Reader:zi(Object.assign({},t)),uncompressedSize:e.uncompressedSize}))}catch(t){try{t.cause={entry:e}}catch(e){}throw t}}return r}async exportZip(e,t){const n=this;void 0===t.bufferedWrite&&(t.bufferedWrite=!0),await Promise.all([Ei(n,t.readerOptions),Jn(e)]);const r=new fi(e,t);return await async function(e,t,n,r){const i=t,a=new Map;await async function e(t,o){async function s(o){const s=r.relativePath?o.getRelativeName(i):o.getFullname();let c=o.options||{},l={};if(o.data instanceof Sr){const{externalFileAttribute:e,versionMadeBy:t,comment:n,lastModDate:r,creationDate:i,lastAccessDate:a}=o.data;l={externalFileAttribute:e,versionMadeBy:t,comment:n,lastModDate:r,creationDate:i,lastAccessDate:a}}await t.add(s,o.reader,Object.assign({directory:o.directory},Object.assign({},r,l,c,{onprogress:async e=>{if(r.onprogress){a.set(s,e);try{await r.onprogress(Array.from(a.values()).reduce(((e,t)=>e+t)),n)}catch(e){}}}}))),await e(t,o)}await async function(){if(r.bufferedWrite)await Promise.allSettled(o.children.map(s));else for(const e of o.children)await s(e)}()}(e,t)}(r,n,function(e,t){let n=0;return e.forEach((function e(t){n+=t.uncompressedSize,t.children&&t.children.forEach(e)})),n}([n]),t),await r.close(),e.getData?e.getData():e.writable}getChildByName(e){const t=this.children;for(let n=0;n<t.length;n++){const r=t[n];if(r.name==e)return r}}isPasswordProtected(){const e=this.children;for(let t=0;t<e.length;t++)if(e[t].isPasswordProtected())return!0;return!1}async checkPassword(e,t={}){const n=this.children;return!(await Promise.all(n.map((n=>n.checkPassword(e,t))))).includes(!1)}}const Ai={FS:class{constructor(){Ci(this)}get children(){return this.root.children}remove(e){ji(e),this.entries[e.id]=null}move(e,t){if(e==this.root)throw new Error("Root directory cannot be moved");if(!t.directory)throw new Error("Target entry is not a directory");if(t.isDescendantOf(e))throw new Error("Entry is a ancestor of target entry");if(e!=t){if(t.getChildByName(e.name))throw new Error("Entry filename already exists");ji(e),e.parent=t,t.children.push(e)}}find(e){const t=e.split("/");let n=this.root;for(let e=0;n&&e<t.length;e++)n=n.getChildByName(t[e]);return n}getById(e){return this.entries[e]}getChildByName(e){return this.root.getChildByName(e)}addDirectory(e,t){return this.root.addDirectory(e,t)}addText(e,t,n){return this.root.addText(e,t,n)}addBlob(e,t,n){return this.root.addBlob(e,t,n)}addData64URI(e,t,n){return this.root.addData64URI(e,t,n)}addUint8Array(e,t,n){return this.root.addUint8Array(e,t,n)}addHttpContent(e,t,n){return this.root.addHttpContent(e,t,n)}addReadable(e,t,n){return this.root.addReadable(e,t,n)}addFileSystemEntry(e,t){return this.root.addFileSystemEntry(e,t)}addFileSystemHandle(e,t){return this.root.addFileSystemHandle(e,t)}addFile(e,t){return this.root.addFile(e,t)}addData(e,t){return this.root.addData(e,t)}importBlob(e,t){return Ci(this),this.root.importBlob(e,t)}importData64URI(e,t){return Ci(this),this.root.importData64URI(e,t)}importUint8Array(e,t){return Ci(this),this.root.importUint8Array(e,t)}importHttpContent(e,t){return Ci(this),this.root.importHttpContent(e,t)}importReadable(e,t){return Ci(this),this.root.importReadable(e,t)}importZip(e,t){return this.root.importZip(e,t)}exportBlob(e){return this.root.exportBlob(e)}exportData64URI(e){return this.root.exportData64URI(e)}exportUint8Array(e){return this.root.exportUint8Array(e)}exportWritable(e,t){return this.root.exportWritable(e,t)}isPasswordProtected(){return this.root.isPasswordProtected()}async checkPassword(e,t){return this.root.checkPassword(e,t)}},ZipDirectoryEntry:Si,ZipFileEntry:ki};function zi(e){return class extends zn{constructor(e,t={}){super(),this.entry=e,this.options=t}async init(){const t=this;t.size=t.entry.uncompressedSize;const n=await t.entry.getData(new Cn,Object.assign({},t.options,e));t.data=n,t.blobReader=new On(n),super.init()}readUint8Array(e,t){return this.blobReader.readUint8Array(e,t)}}}async function Ei(e,t){e.children.length&&await Promise.all(e.children.map((async e=>{if(e.directory)await Ei(e,t);else{const n=e.reader=new e.Reader(e.data,t);try{await Jn(n)}catch(t){try{t.entryId=e.id,t.cause={entry:e}}catch(e){}throw t}e.uncompressedSize=n.size}})))}function ji(e){if(e.parent){const t=e.parent.children;t.forEach(((n,r)=>{n.id==e.id&&t.splice(r,1)}))}}async function Di(e,t,n){return async function e(t,r,i){if(r)try{if((r.isFile||r.isDirectory)&&(r=await Oi(r)),"file"==r.kind){const e=await r.getFile();i.push(t.addData(e.name,{Reader:function(){return{readable:e.stream(),size:e.size}},options:Object.assign({},{lastModDate:new Date(e.lastModified)},n),uncompressedSize:e.size}))}else if("directory"==r.kind){const n=t.addDirectory(r.name);i.push(n);for await(const t of r.values())await e(n,t,i)}}catch(e){const t=e.message+(r?" ("+r.name+")":"");throw new Error(t)}return i}(e,t,[])}async function Oi(e){const t={name:e.name};if(e.isFile&&(t.kind="file",t.getFile=()=>new Promise(((t,n)=>e.file(t,n)))),e.isDirectory){t.kind="directory";const n=await async function(e){const t=[];function n(e,r,i){e.readEntries((async a=>{if(a.length){for(const e of a)t.push(await Oi(e));n(e,r,i)}else r(t)}),i)}return await new Promise(((t,r)=>n(e.createReader(),t,r))),{[Symbol.iterator](){let e=0;return{next(){const n={value:t[e],done:e===t.length};return e++,n}}}}}(e);t.values=()=>n}return t}function Ci(e){e.entries=[],e.root=new Si(e)}function Ri(e,t,n,r){if(e.directory)return r?new Si(e.fs,t,n,e):new ki(e.fs,t,n,e);throw new Error("Parent entry is not a directory")}let Ui;try{Ui="undefined"==typeof document?new(n(575).URL)("file:/index.js").href:document.currentScript&&document.currentScript.src||new URL("index.cjs",document.baseURI).href}catch(e){}Fe({baseURL:Ui}),function(e){const t=()=>URL.createObjectURL(new Blob(['const{Array:e,Object:t,Number:n,Math:r,Error:s,Uint8Array:i,Uint16Array:o,Uint32Array:c,Int32Array:f,Map:a,DataView:l,Promise:u,TextEncoder:w,crypto:h,postMessage:d,TransformStream:p,ReadableStream:y,WritableStream:m,CompressionStream:b,DecompressionStream:g}=self;class k{constructor(e){return class extends p{constructor(t,n){const r=new e(n);super({transform(e,t){t.enqueue(r.append(e))},flush(e){const t=r.flush();t&&e.enqueue(t)}})}}}}const v=[];for(let e=0;256>e;e++){let t=e;for(let e=0;8>e;e++)1&t?t=t>>>1^3988292384:t>>>=1;v[e]=t}class S{constructor(e){this.t=e||-1}append(e){let t=0|this.t;for(let n=0,r=0|e.length;r>n;n++)t=t>>>8^v[255&(t^e[n])];this.t=t}get(){return~this.t}}class z extends p{constructor(){let e;const t=new S;super({transform(e,n){t.append(e),n.enqueue(e)},flush(){const n=new i(4);new l(n.buffer).setUint32(0,t.get()),e.value=n}}),e=this}}const C={concat(e,t){if(0===e.length||0===t.length)return e.concat(t);const n=e[e.length-1],r=C.i(n);return 32===r?e.concat(t):C.o(t,r,0|n,e.slice(0,e.length-1))},l(e){const t=e.length;if(0===t)return 0;const n=e[t-1];return 32*(t-1)+C.i(n)},u(e,t){if(32*e.length<t)return e;const n=(e=e.slice(0,r.ceil(t/32))).length;return t&=31,n>0&&t&&(e[n-1]=C.h(t,e[n-1]&2147483648>>t-1,1)),e},h:(e,t,n)=>32===e?t:(n?0|t:t<<32-e)+1099511627776*e,i:e=>r.round(e/1099511627776)||32,o(e,t,n,r){for(void 0===r&&(r=[]);t>=32;t-=32)r.push(n),n=0;if(0===t)return r.concat(e);for(let s=0;s<e.length;s++)r.push(n|e[s]>>>t),n=e[s]<<32-t;const s=e.length?e[e.length-1]:0,i=C.i(s);return r.push(C.h(t+i&31,t+i>32?n:r.pop(),1)),r}},x={p:{m(e){const t=C.l(e)/8,n=new i(t);let r;for(let s=0;t>s;s++)0==(3&s)&&(r=e[s/4]),n[s]=r>>>24,r<<=8;return n},g(e){const t=[];let n,r=0;for(n=0;n<e.length;n++)r=r<<8|e[n],3==(3&n)&&(t.push(r),r=0);return 3&n&&t.push(C.h(8*(3&n),r)),t}}},_=class{constructor(e){const t=this;t.blockSize=512,t.k=[1732584193,4023233417,2562383102,271733878,3285377520],t.v=[1518500249,1859775393,2400959708,3395469782],e?(t.S=e.S.slice(0),t.C=e.C.slice(0),t._=e._):t.reset()}reset(){const e=this;return e.S=e.k.slice(0),e.C=[],e._=0,e}update(e){const t=this;"string"==typeof e&&(e=x.A.g(e));const n=t.C=C.concat(t.C,e),r=t._,i=t._=r+C.l(e);if(i>9007199254740991)throw new s("Cannot hash more than 2^53 - 1 bits");const o=new c(n);let f=0;for(let e=t.blockSize+r-(t.blockSize+r&t.blockSize-1);i>=e;e+=t.blockSize)t.I(o.subarray(16*f,16*(f+1))),f+=1;return n.splice(0,16*f),t}D(){const e=this;let t=e.C;const n=e.S;t=C.concat(t,[C.h(1,1)]);for(let e=t.length+2;15&e;e++)t.push(0);for(t.push(r.floor(e._/4294967296)),t.push(0|e._);t.length;)e.I(t.splice(0,16));return e.reset(),n}V(e,t,n,r){return e>19?e>39?e>59?e>79?void 0:t^n^r:t&n|t&r|n&r:t^n^r:t&n|~t&r}P(e,t){return t<<e|t>>>32-e}I(t){const n=this,s=n.S,i=e(80);for(let e=0;16>e;e++)i[e]=t[e];let o=s[0],c=s[1],f=s[2],a=s[3],l=s[4];for(let e=0;79>=e;e++){16>e||(i[e]=n.P(1,i[e-3]^i[e-8]^i[e-14]^i[e-16]));const t=n.P(5,o)+n.V(e,c,f,a)+l+i[e]+n.v[r.floor(e/20)]|0;l=a,a=f,f=n.P(30,c),c=o,o=t}s[0]=s[0]+o|0,s[1]=s[1]+c|0,s[2]=s[2]+f|0,s[3]=s[3]+a|0,s[4]=s[4]+l|0}},A={getRandomValues(e){const t=new c(e.buffer),n=e=>{let t=987654321;const n=4294967295;return()=>(t=36969*(65535&t)+(t>>16)&n,(((t<<16)+(e=18e3*(65535&e)+(e>>16)&n)&n)/4294967296+.5)*(r.random()>.5?1:-1))};for(let s,i=0;i<e.length;i+=4){const e=n(4294967296*(s||r.random()));s=987654071*e(),t[i/4]=4294967296*e()|0}return e}},I={importKey:e=>new I.R(x.p.g(e)),B(e,t,n,r){if(n=n||1e4,0>r||0>n)throw new s("invalid params to pbkdf2");const i=1+(r>>5)<<2;let o,c,f,a,u;const w=new ArrayBuffer(i),h=new l(w);let d=0;const p=C;for(t=x.p.g(t),u=1;(i||1)>d;u++){for(o=c=e.encrypt(p.concat(t,[u])),f=1;n>f;f++)for(c=e.encrypt(c),a=0;a<c.length;a++)o[a]^=c[a];for(f=0;(i||1)>d&&f<o.length;f++)h.setInt32(d,o[f]),d+=4}return w.slice(0,r/8)},R:class{constructor(e){const t=this,n=t.M=_,r=[[],[]];t.U=[new n,new n];const s=t.U[0].blockSize/32;e.length>s&&(e=(new n).update(e).D());for(let t=0;s>t;t++)r[0][t]=909522486^e[t],r[1][t]=1549556828^e[t];t.U[0].update(r[0]),t.U[1].update(r[1]),t.K=new n(t.U[0])}reset(){const e=this;e.K=new e.M(e.U[0]),e.N=!1}update(e){this.N=!0,this.K.update(e)}digest(){const e=this,t=e.K.D(),n=new e.M(e.U[1]).update(t).D();return e.reset(),n}encrypt(e){if(this.N)throw new s("encrypt on already updated hmac called!");return this.update(e),this.digest(e)}}},D=void 0!==h&&"function"==typeof h.getRandomValues,V="Invalid password",P="Invalid signature",R="zipjs-abort-check-password";function B(e){return D?h.getRandomValues(e):A.getRandomValues(e)}const E=16,M={name:"PBKDF2"},U=t.assign({hash:{name:"HMAC"}},M),K=t.assign({iterations:1e3,hash:{name:"SHA-1"}},M),N=["deriveBits"],O=[8,12,16],T=[16,24,32],W=10,j=[0,0,0,0],H="undefined",L="function",F=typeof h!=H,q=F&&h.subtle,G=F&&typeof q!=H,J=x.p,Q=class{constructor(e){const t=this;t.O=[[[],[],[],[],[]],[[],[],[],[],[]]],t.O[0][0][0]||t.T();const n=t.O[0][4],r=t.O[1],i=e.length;let o,c,f,a=1;if(4!==i&&6!==i&&8!==i)throw new s("invalid aes key size");for(t.v=[c=e.slice(0),f=[]],o=i;4*i+28>o;o++){let e=c[o-1];(o%i==0||8===i&&o%i==4)&&(e=n[e>>>24]<<24^n[e>>16&255]<<16^n[e>>8&255]<<8^n[255&e],o%i==0&&(e=e<<8^e>>>24^a<<24,a=a<<1^283*(a>>7))),c[o]=c[o-i]^e}for(let e=0;o;e++,o--){const t=c[3&e?o:o-4];f[e]=4>=o||4>e?t:r[0][n[t>>>24]]^r[1][n[t>>16&255]]^r[2][n[t>>8&255]]^r[3][n[255&t]]}}encrypt(e){return this.W(e,0)}decrypt(e){return this.W(e,1)}T(){const e=this.O[0],t=this.O[1],n=e[4],r=t[4],s=[],i=[];let o,c,f,a;for(let e=0;256>e;e++)i[(s[e]=e<<1^283*(e>>7))^e]=e;for(let l=o=0;!n[l];l^=c||1,o=i[o]||1){let i=o^o<<1^o<<2^o<<3^o<<4;i=i>>8^255&i^99,n[l]=i,r[i]=l,a=s[f=s[c=s[l]]];let u=16843009*a^65537*f^257*c^16843008*l,w=257*s[i]^16843008*i;for(let n=0;4>n;n++)e[n][l]=w=w<<24^w>>>8,t[n][i]=u=u<<24^u>>>8}for(let n=0;5>n;n++)e[n]=e[n].slice(0),t[n]=t[n].slice(0)}W(e,t){if(4!==e.length)throw new s("invalid aes block size");const n=this.v[t],r=n.length/4-2,i=[0,0,0,0],o=this.O[t],c=o[0],f=o[1],a=o[2],l=o[3],u=o[4];let w,h,d,p=e[0]^n[0],y=e[t?3:1]^n[1],m=e[2]^n[2],b=e[t?1:3]^n[3],g=4;for(let e=0;r>e;e++)w=c[p>>>24]^f[y>>16&255]^a[m>>8&255]^l[255&b]^n[g],h=c[y>>>24]^f[m>>16&255]^a[b>>8&255]^l[255&p]^n[g+1],d=c[m>>>24]^f[b>>16&255]^a[p>>8&255]^l[255&y]^n[g+2],b=c[b>>>24]^f[p>>16&255]^a[y>>8&255]^l[255&m]^n[g+3],g+=4,p=w,y=h,m=d;for(let e=0;4>e;e++)i[t?3&-e:e]=u[p>>>24]<<24^u[y>>16&255]<<16^u[m>>8&255]<<8^u[255&b]^n[g++],w=p,p=y,y=m,m=b,b=w;return i}},X=class{constructor(e,t){this.j=e,this.H=t,this.L=t}reset(){this.L=this.H}update(e){return this.F(this.j,e,this.L)}q(e){if(255==(e>>24&255)){let t=e>>16&255,n=e>>8&255,r=255&e;255===t?(t=0,255===n?(n=0,255===r?r=0:++r):++n):++t,e=0,e+=t<<16,e+=n<<8,e+=r}else e+=1<<24;return e}G(e){0===(e[0]=this.q(e[0]))&&(e[1]=this.q(e[1]))}F(e,t,n){let r;if(!(r=t.length))return[];const s=C.l(t);for(let s=0;r>s;s+=4){this.G(n);const r=e.encrypt(n);t[s]^=r[0],t[s+1]^=r[1],t[s+2]^=r[2],t[s+3]^=r[3]}return C.u(t,s)}},Y=I.R;let Z=F&&G&&typeof q.importKey==L,$=F&&G&&typeof q.deriveBits==L;class ee extends p{constructor({password:e,signed:n,encryptionStrength:r,checkPasswordOnly:o}){super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:e,signed:n,X:r-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:c,J:f,ready:a}=n;r?(await(async(e,t,n,r)=>{const i=await re(e,t,n,ie(r,0,O[t])),o=ie(r,O[t]);if(i[0]!=o[0]||i[1]!=o[1])throw new s(V)})(n,c,r,ie(e,0,O[c]+2)),e=ie(e,O[c]+2),o?t.error(new s(R)):f()):await a;const l=new i(e.length-W-(e.length-W)%E);t.enqueue(ne(n,e,l,0,W,!0))},async flush(e){const{signed:t,Y:n,Z:r,pending:o,ready:c}=this;if(r&&n){await c;const f=ie(o,0,o.length-W),a=ie(o,o.length-W);let l=new i;if(f.length){const e=ce(J,f);r.update(e);const t=n.update(e);l=oe(J,t)}if(t){const e=ie(oe(J,r.digest()),0,W);for(let t=0;W>t;t++)if(e[t]!=a[t])throw new s(P)}e.enqueue(l)}}})}}class te extends p{constructor({password:e,encryptionStrength:n}){let r;super({start(){t.assign(this,{ready:new u((e=>this.J=e)),password:e,X:n-1,pending:new i})},async transform(e,t){const n=this,{password:r,X:s,J:o,ready:c}=n;let f=new i;r?(f=await(async(e,t,n)=>{const r=B(new i(O[t]));return se(r,await re(e,t,n,r))})(n,s,r),o()):await c;const a=new i(f.length+e.length-e.length%E);a.set(f,0),t.enqueue(ne(n,e,a,f.length,0))},async flush(e){const{Y:t,Z:n,pending:s,ready:o}=this;if(n&&t){await o;let c=new i;if(s.length){const e=t.update(ce(J,s));n.update(e),c=oe(J,e)}r.signature=oe(J,n.digest()).slice(0,W),e.enqueue(se(c,r.signature))}}}),r=this}}function ne(e,t,n,r,s,o){const{Y:c,Z:f,pending:a}=e,l=t.length-s;let u;for(a.length&&(t=se(a,t),n=((e,t)=>{if(t&&t>e.length){const n=e;(e=new i(t)).set(n,0)}return e})(n,l-l%E)),u=0;l-E>=u;u+=E){const e=ce(J,ie(t,u,u+E));o&&f.update(e);const s=c.update(e);o||f.update(s),n.set(oe(J,s),u+r)}return e.pending=ie(t,u),n}async function re(n,r,s,o){n.password=null;const c=(e=>{if(void 0===w){const t=new i((e=unescape(encodeURIComponent(e))).length);for(let n=0;n<t.length;n++)t[n]=e.charCodeAt(n);return t}return(new w).encode(e)})(s),f=await(async(e,t,n,r,s)=>{if(!Z)return I.importKey(t);try{return await q.importKey("raw",t,n,!1,s)}catch(e){return Z=!1,I.importKey(t)}})(0,c,U,0,N),a=await(async(e,t,n)=>{if(!$)return I.B(t,e.salt,K.iterations,n);try{return await q.deriveBits(e,t,n)}catch(r){return $=!1,I.B(t,e.salt,K.iterations,n)}})(t.assign({salt:o},K),f,8*(2*T[r]+2)),l=new i(a),u=ce(J,ie(l,0,T[r])),h=ce(J,ie(l,T[r],2*T[r])),d=ie(l,2*T[r]);return t.assign(n,{keys:{key:u,$:h,passwordVerification:d},Y:new X(new Q(u),e.from(j)),Z:new Y(h)}),d}function se(e,t){let n=e;return e.length+t.length&&(n=new i(e.length+t.length),n.set(e,0),n.set(t,e.length)),n}function ie(e,t,n){return e.subarray(t,n)}function oe(e,t){return e.m(t)}function ce(e,t){return e.g(t)}class fe extends p{constructor({password:e,passwordVerification:n,checkPasswordOnly:r}){super({start(){t.assign(this,{password:e,passwordVerification:n}),we(this,e)},transform(e,t){const n=this;if(n.password){const t=le(n,e.subarray(0,12));if(n.password=null,t[11]!=n.passwordVerification)throw new s(V);e=e.subarray(12)}r?t.error(new s(R)):t.enqueue(le(n,e))}})}}class ae extends p{constructor({password:e,passwordVerification:n}){super({start(){t.assign(this,{password:e,passwordVerification:n}),we(this,e)},transform(e,t){const n=this;let r,s;if(n.password){n.password=null;const t=B(new i(12));t[11]=n.passwordVerification,r=new i(e.length+t.length),r.set(ue(n,t),0),s=12}else r=new i(e.length),s=0;r.set(ue(n,e),s),t.enqueue(r)}})}}function le(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=de(e)^t[r],he(e,n[r]);return n}function ue(e,t){const n=new i(t.length);for(let r=0;r<t.length;r++)n[r]=de(e)^t[r],he(e,t[r]);return n}function we(e,n){const r=[305419896,591751049,878082192];t.assign(e,{keys:r,ee:new S(r[0]),te:new S(r[2])});for(let t=0;t<n.length;t++)he(e,n.charCodeAt(t))}function he(e,t){let[n,s,i]=e.keys;e.ee.append([t]),n=~e.ee.get(),s=ye(r.imul(ye(s+pe(n)),134775813)+1),e.te.append([s>>>24]),i=~e.te.get(),e.keys=[n,s,i]}function de(e){const t=2|e.keys[2];return pe(r.imul(t,1^t)>>>8)}function pe(e){return 255&e}function ye(e){return 4294967295&e}const me="deflate-raw";class be extends p{constructor(e,{chunkSize:t,CompressionStream:n,CompressionStreamNative:r}){super({});const{compressed:s,encrypted:i,useCompressionStream:o,zipCrypto:c,signed:f,level:a}=e,u=this;let w,h,d=ke(super.readable);i&&!c||!f||(w=new z,d=ze(d,w)),s&&(d=Se(d,o,{level:a,chunkSize:t},r,n)),i&&(c?d=ze(d,new ae(e)):(h=new te(e),d=ze(d,h))),ve(u,d,(()=>{let e;i&&!c&&(e=h.signature),i&&!c||!f||(e=new l(w.value.buffer).getUint32(0)),u.signature=e}))}}class ge extends p{constructor(e,{chunkSize:t,DecompressionStream:n,DecompressionStreamNative:r}){super({});const{zipCrypto:i,encrypted:o,signed:c,signature:f,compressed:a,useCompressionStream:u}=e;let w,h,d=ke(super.readable);o&&(i?d=ze(d,new fe(e)):(h=new ee(e),d=ze(d,h))),a&&(d=Se(d,u,{chunkSize:t},r,n)),o&&!i||!c||(w=new z,d=ze(d,w)),ve(this,d,(()=>{if((!o||i)&&c){const e=new l(w.value.buffer);if(f!=e.getUint32(0,!1))throw new s(P)}}))}}function ke(e){return ze(e,new p({transform(e,t){e&&e.length&&t.enqueue(e)}}))}function ve(e,n,r){n=ze(n,new p({flush:r})),t.defineProperty(e,"readable",{get:()=>n})}function Se(e,t,n,r,s){try{e=ze(e,new(t&&r?r:s)(me,n))}catch(r){if(!t)throw r;e=ze(e,new s(me,n))}return e}function ze(e,t){return e.pipeThrough(t)}const Ce="data";class xe extends p{constructor(e,n){super({});const r=this,{codecType:s}=e;let i;s.startsWith("deflate")?i=be:s.startsWith("inflate")&&(i=ge);let o=0;const c=new i(e,n),f=super.readable,a=new p({transform(e,t){e&&e.length&&(o+=e.length,t.enqueue(e))},flush(){const{signature:e}=c;t.assign(r,{signature:e,size:o})}});t.defineProperty(r,"readable",{get:()=>f.pipeThrough(c).pipeThrough(a)})}}const _e=new a,Ae=new a;let Ie=0;async function De(e){try{const{options:t,scripts:r,config:s}=e;r&&r.length&&importScripts.apply(void 0,r),self.initCodec&&self.initCodec(),s.CompressionStreamNative=self.CompressionStream,s.DecompressionStreamNative=self.DecompressionStream,self.Deflate&&(s.CompressionStream=new k(self.Deflate)),self.Inflate&&(s.DecompressionStream=new k(self.Inflate));const i={highWaterMark:1,size:()=>s.chunkSize},o=e.readable||new y({async pull(e){const t=new u((e=>_e.set(Ie,e)));Ve({type:"pull",messageId:Ie}),Ie=(Ie+1)%n.MAX_SAFE_INTEGER;const{value:r,done:s}=await t;e.enqueue(r),s&&e.close()}},i),c=e.writable||new m({async write(e){let t;const r=new u((e=>t=e));Ae.set(Ie,t),Ve({type:Ce,value:e,messageId:Ie}),Ie=(Ie+1)%n.MAX_SAFE_INTEGER,await r}},i),f=new xe(t,s);await o.pipeThrough(f).pipeTo(c,{preventClose:!0,preventAbort:!0});try{await c.getWriter().close()}catch(e){}const{signature:a,size:l}=f;Ve({type:"close",result:{signature:a,size:l}})}catch(e){Pe(e)}}function Ve(e){let{value:t}=e;if(t)if(t.length)try{t=new i(t),e.value=t.buffer,d(e,[e.value])}catch(t){d(e)}else d(e);else d(e)}function Pe(e=new s("Unknown error")){const{message:t,stack:n,code:r,name:i}=e;d({error:{message:t,stack:n,code:r,name:i}})}addEventListener("message",(({data:e})=>{const{type:t,messageId:n,value:r,done:s}=e;try{if("start"==t&&De(e),t==Ce){const e=_e.get(n);_e.delete(n),e({value:new i(r),done:s})}if("ack"==t){const e=Ae.get(n);Ae.delete(n),e()}}catch(e){Pe(e)}}));const Re=-2;function Be(t){return Ee(t.map((([t,n])=>new e(t).fill(n,0,t))))}function Ee(t){return t.reduce(((t,n)=>t.concat(e.isArray(n)?Ee(n):n)),[])}const Me=[0,1,2,3].concat(...Be([[2,4],[2,5],[4,6],[4,7],[8,8],[8,9],[16,10],[16,11],[32,12],[32,13],[64,14],[64,15],[2,0],[1,16],[1,17],[2,18],[2,19],[4,20],[4,21],[8,22],[8,23],[16,24],[16,25],[32,26],[32,27],[64,28],[64,29]]));function Ue(){const e=this;function t(e,t){let n=0;do{n|=1&e,e>>>=1,n<<=1}while(--t>0);return n>>>1}e.ne=n=>{const s=e.re,i=e.ie.se,o=e.ie.oe;let c,f,a,l=-1;for(n.ce=0,n.fe=573,c=0;o>c;c++)0!==s[2*c]?(n.ae[++n.ce]=l=c,n.le[c]=0):s[2*c+1]=0;for(;2>n.ce;)a=n.ae[++n.ce]=2>l?++l:0,s[2*a]=1,n.le[a]=0,n.ue--,i&&(n.we-=i[2*a+1]);for(e.he=l,c=r.floor(n.ce/2);c>=1;c--)n.de(s,c);a=o;do{c=n.ae[1],n.ae[1]=n.ae[n.ce--],n.de(s,1),f=n.ae[1],n.ae[--n.fe]=c,n.ae[--n.fe]=f,s[2*a]=s[2*c]+s[2*f],n.le[a]=r.max(n.le[c],n.le[f])+1,s[2*c+1]=s[2*f+1]=a,n.ae[1]=a++,n.de(s,1)}while(n.ce>=2);n.ae[--n.fe]=n.ae[1],(t=>{const n=e.re,r=e.ie.se,s=e.ie.pe,i=e.ie.ye,o=e.ie.me;let c,f,a,l,u,w,h=0;for(l=0;15>=l;l++)t.be[l]=0;for(n[2*t.ae[t.fe]+1]=0,c=t.fe+1;573>c;c++)f=t.ae[c],l=n[2*n[2*f+1]+1]+1,l>o&&(l=o,h++),n[2*f+1]=l,f>e.he||(t.be[l]++,u=0,i>f||(u=s[f-i]),w=n[2*f],t.ue+=w*(l+u),r&&(t.we+=w*(r[2*f+1]+u)));if(0!==h){do{for(l=o-1;0===t.be[l];)l--;t.be[l]--,t.be[l+1]+=2,t.be[o]--,h-=2}while(h>0);for(l=o;0!==l;l--)for(f=t.be[l];0!==f;)a=t.ae[--c],a>e.he||(n[2*a+1]!=l&&(t.ue+=(l-n[2*a+1])*n[2*a],n[2*a+1]=l),f--)}})(n),((e,n,r)=>{const s=[];let i,o,c,f=0;for(i=1;15>=i;i++)s[i]=f=f+r[i-1]<<1;for(o=0;n>=o;o++)c=e[2*o+1],0!==c&&(e[2*o]=t(s[c]++,c))})(s,e.he,n.be)}}function Ke(e,t,n,r,s){const i=this;i.se=e,i.pe=t,i.ye=n,i.oe=r,i.me=s}Ue.ge=[0,1,2,3,4,5,6,7].concat(...Be([[2,8],[2,9],[2,10],[2,11],[4,12],[4,13],[4,14],[4,15],[8,16],[8,17],[8,18],[8,19],[16,20],[16,21],[16,22],[16,23],[32,24],[32,25],[32,26],[31,27],[1,28]])),Ue.ke=[0,1,2,3,4,5,6,7,8,10,12,14,16,20,24,28,32,40,48,56,64,80,96,112,128,160,192,224,0],Ue.ve=[0,1,2,3,4,6,8,12,16,24,32,48,64,96,128,192,256,384,512,768,1024,1536,2048,3072,4096,6144,8192,12288,16384,24576],Ue.Se=e=>256>e?Me[e]:Me[256+(e>>>7)],Ue.ze=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],Ue.Ce=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],Ue.xe=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],Ue._e=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];const Ne=Be([[144,8],[112,9],[24,7],[8,8]]);Ke.Ae=Ee([12,140,76,204,44,172,108,236,28,156,92,220,60,188,124,252,2,130,66,194,34,162,98,226,18,146,82,210,50,178,114,242,10,138,74,202,42,170,106,234,26,154,90,218,58,186,122,250,6,134,70,198,38,166,102,230,22,150,86,214,54,182,118,246,14,142,78,206,46,174,110,238,30,158,94,222,62,190,126,254,1,129,65,193,33,161,97,225,17,145,81,209,49,177,113,241,9,137,73,201,41,169,105,233,25,153,89,217,57,185,121,249,5,133,69,197,37,165,101,229,21,149,85,213,53,181,117,245,13,141,77,205,45,173,109,237,29,157,93,221,61,189,125,253,19,275,147,403,83,339,211,467,51,307,179,435,115,371,243,499,11,267,139,395,75,331,203,459,43,299,171,427,107,363,235,491,27,283,155,411,91,347,219,475,59,315,187,443,123,379,251,507,7,263,135,391,71,327,199,455,39,295,167,423,103,359,231,487,23,279,151,407,87,343,215,471,55,311,183,439,119,375,247,503,15,271,143,399,79,335,207,463,47,303,175,431,111,367,239,495,31,287,159,415,95,351,223,479,63,319,191,447,127,383,255,511,0,64,32,96,16,80,48,112,8,72,40,104,24,88,56,120,4,68,36,100,20,84,52,116,3,131,67,195,35,163,99,227].map(((e,t)=>[e,Ne[t]])));const Oe=Be([[30,5]]);function Te(e,t,n,r,s){const i=this;i.Ie=e,i.De=t,i.Ve=n,i.Pe=r,i.Re=s}Ke.Be=Ee([0,16,8,24,4,20,12,28,2,18,10,26,6,22,14,30,1,17,9,25,5,21,13,29,3,19,11,27,7,23].map(((e,t)=>[e,Oe[t]]))),Ke.Ee=new Ke(Ke.Ae,Ue.ze,257,286,15),Ke.Me=new Ke(Ke.Be,Ue.Ce,0,30,15),Ke.Ue=new Ke(null,Ue.xe,0,19,7);const We=[new Te(0,0,0,0,0),new Te(4,4,8,4,1),new Te(4,5,16,8,1),new Te(4,6,32,32,1),new Te(4,4,16,16,2),new Te(8,16,32,32,2),new Te(8,16,128,128,2),new Te(8,32,128,256,2),new Te(32,128,258,1024,2),new Te(32,258,258,4096,2)],je=["need dictionary","stream end","","","stream error","data error","","buffer error","",""],He=113,Le=666,Fe=262;function qe(e,t,n,r){const s=e[2*t],i=e[2*n];return i>s||s==i&&r[t]<=r[n]}function Ge(){const e=this;let t,n,s,c,f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z,C,x,_,A,I,D,V,P,R,B,E,M,U;const K=new Ue,N=new Ue,O=new Ue;let T,W,j,H,L,F;function q(){let t;for(t=0;286>t;t++)E[2*t]=0;for(t=0;30>t;t++)M[2*t]=0;for(t=0;19>t;t++)U[2*t]=0;E[512]=1,e.ue=e.we=0,W=j=0}function G(e,t){let n,r=-1,s=e[1],i=0,o=7,c=4;0===s&&(o=138,c=3),e[2*(t+1)+1]=65535;for(let f=0;t>=f;f++)n=s,s=e[2*(f+1)+1],++i<o&&n==s||(c>i?U[2*n]+=i:0!==n?(n!=r&&U[2*n]++,U[32]++):i>10?U[36]++:U[34]++,i=0,r=n,0===s?(o=138,c=3):n==s?(o=6,c=3):(o=7,c=4))}function J(t){e.Ke[e.pending++]=t}function Q(e){J(255&e),J(e>>>8&255)}function X(e,t){let n;const r=t;F>16-r?(n=e,L|=n<<F&65535,Q(L),L=n>>>16-F,F+=r-16):(L|=e<<F&65535,F+=r)}function Y(e,t){const n=2*e;X(65535&t[n],65535&t[n+1])}function Z(e,t){let n,r,s=-1,i=e[1],o=0,c=7,f=4;for(0===i&&(c=138,f=3),n=0;t>=n;n++)if(r=i,i=e[2*(n+1)+1],++o>=c||r!=i){if(f>o)do{Y(r,U)}while(0!=--o);else 0!==r?(r!=s&&(Y(r,U),o--),Y(16,U),X(o-3,2)):o>10?(Y(18,U),X(o-11,7)):(Y(17,U),X(o-3,3));o=0,s=r,0===i?(c=138,f=3):r==i?(c=6,f=3):(c=7,f=4)}}function $(){16==F?(Q(L),L=0,F=0):8>F||(J(255&L),L>>>=8,F-=8)}function ee(t,n){let s,i,o;if(e.Ne[W]=t,e.Oe[W]=255&n,W++,0===t?E[2*n]++:(j++,t--,E[2*(Ue.ge[n]+256+1)]++,M[2*Ue.Se(t)]++),0==(8191&W)&&V>2){for(s=8*W,i=C-k,o=0;30>o;o++)s+=M[2*o]*(5+Ue.Ce[o]);if(s>>>=3,j<r.floor(W/2)&&s<r.floor(i/2))return!0}return W==T-1}function te(t,n){let r,s,i,o,c=0;if(0!==W)do{r=e.Ne[c],s=e.Oe[c],c++,0===r?Y(s,t):(i=Ue.ge[s],Y(i+256+1,t),o=Ue.ze[i],0!==o&&(s-=Ue.ke[i],X(s,o)),r--,i=Ue.Se(r),Y(i,n),o=Ue.Ce[i],0!==o&&(r-=Ue.ve[i],X(r,o)))}while(W>c);Y(256,t),H=t[513]}function ne(){F>8?Q(L):F>0&&J(255&L),L=0,F=0}function re(t,n,r){X(0+(r?1:0),3),((t,n)=>{ne(),H=8,Q(n),Q(~n),e.Ke.set(u.subarray(t,t+n),e.pending),e.pending+=n})(t,n)}function se(n){((t,n,r)=>{let s,i,o=0;V>0?(K.ne(e),N.ne(e),o=(()=>{let t;for(G(E,K.he),G(M,N.he),O.ne(e),t=18;t>=3&&0===U[2*Ue._e[t]+1];t--);return e.ue+=14+3*(t+1),t})(),s=e.ue+3+7>>>3,i=e.we+3+7>>>3,i>s||(s=i)):s=i=n+5,n+4>s||-1==t?i==s?(X(2+(r?1:0),3),te(Ke.Ae,Ke.Be)):(X(4+(r?1:0),3),((e,t,n)=>{let r;for(X(e-257,5),X(t-1,5),X(n-4,4),r=0;n>r;r++)X(U[2*Ue._e[r]+1],3);Z(E,e-1),Z(M,t-1)})(K.he+1,N.he+1,o+1),te(E,M)):re(t,n,r),q(),r&&ne()})(0>k?-1:k,C-k,n),k=C,t.Te()}function ie(){let e,n,r,s;do{if(s=w-_-C,0===s&&0===C&&0===_)s=f;else if(-1==s)s--;else if(C>=f+f-Fe){u.set(u.subarray(f,f+f),0),x-=f,C-=f,k-=f,e=y,r=e;do{n=65535&d[--r],d[r]=f>n?0:n-f}while(0!=--e);e=f,r=e;do{n=65535&h[--r],h[r]=f>n?0:n-f}while(0!=--e);s+=f}if(0===t.We)return;e=t.je(u,C+_,s),_+=e,3>_||(p=255&u[C],p=(p<<g^255&u[C+1])&b)}while(Fe>_&&0!==t.We)}function oe(e){let t,n,r=I,s=C,i=A;const o=C>f-Fe?C-(f-Fe):0;let c=B;const a=l,w=C+258;let d=u[s+i-1],p=u[s+i];R>A||(r>>=2),c>_&&(c=_);do{if(t=e,u[t+i]==p&&u[t+i-1]==d&&u[t]==u[s]&&u[++t]==u[s+1]){s+=2,t++;do{}while(u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&u[++s]==u[++t]&&w>s);if(n=258-(w-s),s=w-258,n>i){if(x=e,i=n,n>=c)break;d=u[s+i-1],p=u[s+i]}}}while((e=65535&h[e&a])>o&&0!=--r);return i>_?_:i}e.le=[],e.be=[],e.ae=[],E=[],M=[],U=[],e.de=(t,n)=>{const r=e.ae,s=r[n];let i=n<<1;for(;i<=e.ce&&(i<e.ce&&qe(t,r[i+1],r[i],e.le)&&i++,!qe(t,s,r[i],e.le));)r[n]=r[i],n=i,i<<=1;r[n]=s},e.He=(t,S,x,W,j,G)=>(W||(W=8),j||(j=8),G||(G=0),t.Le=null,-1==S&&(S=6),1>j||j>9||8!=W||9>x||x>15||0>S||S>9||0>G||G>2?Re:(t.Fe=e,a=x,f=1<<a,l=f-1,m=j+7,y=1<<m,b=y-1,g=r.floor((m+3-1)/3),u=new i(2*f),h=[],d=[],T=1<<j+6,e.Ke=new i(4*T),s=4*T,e.Ne=new o(T),e.Oe=new i(T),V=S,P=G,(t=>(t.qe=t.Ge=0,t.Le=null,e.pending=0,e.Je=0,n=He,c=0,K.re=E,K.ie=Ke.Ee,N.re=M,N.ie=Ke.Me,O.re=U,O.ie=Ke.Ue,L=0,F=0,H=8,q(),(()=>{w=2*f,d[y-1]=0;for(let e=0;y-1>e;e++)d[e]=0;D=We[V].De,R=We[V].Ie,B=We[V].Ve,I=We[V].Pe,C=0,k=0,_=0,v=A=2,z=0,p=0})(),0))(t))),e.Qe=()=>42!=n&&n!=He&&n!=Le?Re:(e.Oe=null,e.Ne=null,e.Ke=null,d=null,h=null,u=null,e.Fe=null,n==He?-3:0),e.Xe=(e,t,n)=>{let r=0;return-1==t&&(t=6),0>t||t>9||0>n||n>2?Re:(We[V].Re!=We[t].Re&&0!==e.qe&&(r=e.Ye(1)),V!=t&&(V=t,D=We[V].De,R=We[V].Ie,B=We[V].Ve,I=We[V].Pe),P=n,r)},e.Ze=(e,t,r)=>{let s,i=r,o=0;if(!t||42!=n)return Re;if(3>i)return 0;for(i>f-Fe&&(i=f-Fe,o=r-i),u.set(t.subarray(o,o+i),0),C=i,k=i,p=255&u[0],p=(p<<g^255&u[1])&b,s=0;i-3>=s;s++)p=(p<<g^255&u[s+2])&b,h[s&l]=d[p],d[p]=s;return 0},e.Ye=(r,i)=>{let o,w,m,I,R;if(i>4||0>i)return Re;if(!r.$e||!r.et&&0!==r.We||n==Le&&4!=i)return r.Le=je[4],Re;if(0===r.tt)return r.Le=je[7],-5;var B;if(t=r,I=c,c=i,42==n&&(w=8+(a-8<<4)<<8,m=(V-1&255)>>1,m>3&&(m=3),w|=m<<6,0!==C&&(w|=32),w+=31-w%31,n=He,J((B=w)>>8&255),J(255&B)),0!==e.pending){if(t.Te(),0===t.tt)return c=-1,0}else if(0===t.We&&I>=i&&4!=i)return t.Le=je[7],-5;if(n==Le&&0!==t.We)return r.Le=je[7],-5;if(0!==t.We||0!==_||0!=i&&n!=Le){switch(R=-1,We[V].Re){case 0:R=(e=>{let n,r=65535;for(r>s-5&&(r=s-5);;){if(1>=_){if(ie(),0===_&&0==e)return 0;if(0===_)break}if(C+=_,_=0,n=k+r,(0===C||C>=n)&&(_=C-n,C=n,se(!1),0===t.tt))return 0;if(C-k>=f-Fe&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 1:R=(e=>{let n,r=0;for(;;){if(Fe>_){if(ie(),Fe>_&&0==e)return 0;if(0===_)break}if(3>_||(p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C),0===r||(C-r&65535)>f-Fe||2!=P&&(v=oe(r)),3>v)n=ee(0,255&u[C]),_--,C++;else if(n=ee(C-x,v-3),_-=v,v>D||3>_)C+=v,v=0,p=255&u[C],p=(p<<g^255&u[C+1])&b;else{v--;do{C++,p=(p<<g^255&u[C+2])&b,r=65535&d[p],h[C&l]=d[p],d[p]=C}while(0!=--v);C++}if(n&&(se(!1),0===t.tt))return 0}return se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i);break;case 2:R=(e=>{let n,r,s=0;for(;;){if(Fe>_){if(ie(),Fe>_&&0==e)return 0;if(0===_)break}if(3>_||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C),A=v,S=x,v=2,0!==s&&D>A&&f-Fe>=(C-s&65535)&&(2!=P&&(v=oe(s)),5>=v&&(1==P||3==v&&C-x>4096)&&(v=2)),3>A||v>A)if(0!==z){if(n=ee(0,255&u[C-1]),n&&se(!1),C++,_--,0===t.tt)return 0}else z=1,C++,_--;else{r=C+_-3,n=ee(C-1-S,A-3),_-=A-1,A-=2;do{++C>r||(p=(p<<g^255&u[C+2])&b,s=65535&d[p],h[C&l]=d[p],d[p]=C)}while(0!=--A);if(z=0,v=2,C++,n&&(se(!1),0===t.tt))return 0}}return 0!==z&&(n=ee(0,255&u[C-1]),z=0),se(4==e),0===t.tt?4==e?2:0:4==e?3:1})(i)}if(2!=R&&3!=R||(n=Le),0==R||2==R)return 0===t.tt&&(c=-1),0;if(1==R){if(1==i)X(2,3),Y(256,Ke.Ae),$(),9>1+H+10-F&&(X(2,3),Y(256,Ke.Ae),$()),H=7;else if(re(0,0,!1),3==i)for(o=0;y>o;o++)d[o]=0;if(t.Te(),0===t.tt)return c=-1,0}}return 4!=i?0:1}}function Je(){const e=this;e.nt=0,e.rt=0,e.We=0,e.qe=0,e.tt=0,e.Ge=0}function Qe(e){const t=new Je,n=(o=e&&e.chunkSize?e.chunkSize:65536)+5*(r.floor(o/16383)+1);var o;const c=new i(n);let f=e?e.level:-1;void 0===f&&(f=-1),t.He(f),t.$e=c,this.append=(e,r)=>{let o,f,a=0,l=0,u=0;const w=[];if(e.length){t.nt=0,t.et=e,t.We=e.length;do{if(t.rt=0,t.tt=n,o=t.Ye(0),0!=o)throw new s("deflating: "+t.Le);t.rt&&(t.rt==n?w.push(new i(c)):w.push(c.subarray(0,t.rt))),u+=t.rt,r&&t.nt>0&&t.nt!=a&&(r(t.nt),a=t.nt)}while(t.We>0||0===t.tt);return w.length>1?(f=new i(u),w.forEach((e=>{f.set(e,l),l+=e.length}))):f=w[0]?new i(w[0]):new i,f}},this.flush=()=>{let e,r,o=0,f=0;const a=[];do{if(t.rt=0,t.tt=n,e=t.Ye(4),1!=e&&0!=e)throw new s("deflating: "+t.Le);n-t.tt>0&&a.push(c.slice(0,t.rt)),f+=t.rt}while(t.We>0||0===t.tt);return t.Qe(),r=new i(f),a.forEach((e=>{r.set(e,o),o+=e.length})),r}}Je.prototype={He(e,t){const n=this;return n.Fe=new Ge,t||(t=15),n.Fe.He(n,e,t)},Ye(e){const t=this;return t.Fe?t.Fe.Ye(t,e):Re},Qe(){const e=this;if(!e.Fe)return Re;const t=e.Fe.Qe();return e.Fe=null,t},Xe(e,t){const n=this;return n.Fe?n.Fe.Xe(n,e,t):Re},Ze(e,t){const n=this;return n.Fe?n.Fe.Ze(n,e,t):Re},je(e,t,n){const r=this;let s=r.We;return s>n&&(s=n),0===s?0:(r.We-=s,e.set(r.et.subarray(r.nt,r.nt+s),t),r.nt+=s,r.qe+=s,s)},Te(){const e=this;let t=e.Fe.pending;t>e.tt&&(t=e.tt),0!==t&&(e.$e.set(e.Fe.Ke.subarray(e.Fe.Je,e.Fe.Je+t),e.rt),e.rt+=t,e.Fe.Je+=t,e.Ge+=t,e.tt-=t,e.Fe.pending-=t,0===e.Fe.pending&&(e.Fe.Je=0))}};const Xe=-2,Ye=-3,Ze=-5,$e=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535],et=[96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,192,80,7,10,0,8,96,0,8,32,0,9,160,0,8,0,0,8,128,0,8,64,0,9,224,80,7,6,0,8,88,0,8,24,0,9,144,83,7,59,0,8,120,0,8,56,0,9,208,81,7,17,0,8,104,0,8,40,0,9,176,0,8,8,0,8,136,0,8,72,0,9,240,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,200,81,7,13,0,8,100,0,8,36,0,9,168,0,8,4,0,8,132,0,8,68,0,9,232,80,7,8,0,8,92,0,8,28,0,9,152,84,7,83,0,8,124,0,8,60,0,9,216,82,7,23,0,8,108,0,8,44,0,9,184,0,8,12,0,8,140,0,8,76,0,9,248,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,196,81,7,11,0,8,98,0,8,34,0,9,164,0,8,2,0,8,130,0,8,66,0,9,228,80,7,7,0,8,90,0,8,26,0,9,148,84,7,67,0,8,122,0,8,58,0,9,212,82,7,19,0,8,106,0,8,42,0,9,180,0,8,10,0,8,138,0,8,74,0,9,244,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,204,81,7,15,0,8,102,0,8,38,0,9,172,0,8,6,0,8,134,0,8,70,0,9,236,80,7,9,0,8,94,0,8,30,0,9,156,84,7,99,0,8,126,0,8,62,0,9,220,82,7,27,0,8,110,0,8,46,0,9,188,0,8,14,0,8,142,0,8,78,0,9,252,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,194,80,7,10,0,8,97,0,8,33,0,9,162,0,8,1,0,8,129,0,8,65,0,9,226,80,7,6,0,8,89,0,8,25,0,9,146,83,7,59,0,8,121,0,8,57,0,9,210,81,7,17,0,8,105,0,8,41,0,9,178,0,8,9,0,8,137,0,8,73,0,9,242,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,202,81,7,13,0,8,101,0,8,37,0,9,170,0,8,5,0,8,133,0,8,69,0,9,234,80,7,8,0,8,93,0,8,29,0,9,154,84,7,83,0,8,125,0,8,61,0,9,218,82,7,23,0,8,109,0,8,45,0,9,186,0,8,13,0,8,141,0,8,77,0,9,250,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,198,81,7,11,0,8,99,0,8,35,0,9,166,0,8,3,0,8,131,0,8,67,0,9,230,80,7,7,0,8,91,0,8,27,0,9,150,84,7,67,0,8,123,0,8,59,0,9,214,82,7,19,0,8,107,0,8,43,0,9,182,0,8,11,0,8,139,0,8,75,0,9,246,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,206,81,7,15,0,8,103,0,8,39,0,9,174,0,8,7,0,8,135,0,8,71,0,9,238,80,7,9,0,8,95,0,8,31,0,9,158,84,7,99,0,8,127,0,8,63,0,9,222,82,7,27,0,8,111,0,8,47,0,9,190,0,8,15,0,8,143,0,8,79,0,9,254,96,7,256,0,8,80,0,8,16,84,8,115,82,7,31,0,8,112,0,8,48,0,9,193,80,7,10,0,8,96,0,8,32,0,9,161,0,8,0,0,8,128,0,8,64,0,9,225,80,7,6,0,8,88,0,8,24,0,9,145,83,7,59,0,8,120,0,8,56,0,9,209,81,7,17,0,8,104,0,8,40,0,9,177,0,8,8,0,8,136,0,8,72,0,9,241,80,7,4,0,8,84,0,8,20,85,8,227,83,7,43,0,8,116,0,8,52,0,9,201,81,7,13,0,8,100,0,8,36,0,9,169,0,8,4,0,8,132,0,8,68,0,9,233,80,7,8,0,8,92,0,8,28,0,9,153,84,7,83,0,8,124,0,8,60,0,9,217,82,7,23,0,8,108,0,8,44,0,9,185,0,8,12,0,8,140,0,8,76,0,9,249,80,7,3,0,8,82,0,8,18,85,8,163,83,7,35,0,8,114,0,8,50,0,9,197,81,7,11,0,8,98,0,8,34,0,9,165,0,8,2,0,8,130,0,8,66,0,9,229,80,7,7,0,8,90,0,8,26,0,9,149,84,7,67,0,8,122,0,8,58,0,9,213,82,7,19,0,8,106,0,8,42,0,9,181,0,8,10,0,8,138,0,8,74,0,9,245,80,7,5,0,8,86,0,8,22,192,8,0,83,7,51,0,8,118,0,8,54,0,9,205,81,7,15,0,8,102,0,8,38,0,9,173,0,8,6,0,8,134,0,8,70,0,9,237,80,7,9,0,8,94,0,8,30,0,9,157,84,7,99,0,8,126,0,8,62,0,9,221,82,7,27,0,8,110,0,8,46,0,9,189,0,8,14,0,8,142,0,8,78,0,9,253,96,7,256,0,8,81,0,8,17,85,8,131,82,7,31,0,8,113,0,8,49,0,9,195,80,7,10,0,8,97,0,8,33,0,9,163,0,8,1,0,8,129,0,8,65,0,9,227,80,7,6,0,8,89,0,8,25,0,9,147,83,7,59,0,8,121,0,8,57,0,9,211,81,7,17,0,8,105,0,8,41,0,9,179,0,8,9,0,8,137,0,8,73,0,9,243,80,7,4,0,8,85,0,8,21,80,8,258,83,7,43,0,8,117,0,8,53,0,9,203,81,7,13,0,8,101,0,8,37,0,9,171,0,8,5,0,8,133,0,8,69,0,9,235,80,7,8,0,8,93,0,8,29,0,9,155,84,7,83,0,8,125,0,8,61,0,9,219,82,7,23,0,8,109,0,8,45,0,9,187,0,8,13,0,8,141,0,8,77,0,9,251,80,7,3,0,8,83,0,8,19,85,8,195,83,7,35,0,8,115,0,8,51,0,9,199,81,7,11,0,8,99,0,8,35,0,9,167,0,8,3,0,8,131,0,8,67,0,9,231,80,7,7,0,8,91,0,8,27,0,9,151,84,7,67,0,8,123,0,8,59,0,9,215,82,7,19,0,8,107,0,8,43,0,9,183,0,8,11,0,8,139,0,8,75,0,9,247,80,7,5,0,8,87,0,8,23,192,8,0,83,7,51,0,8,119,0,8,55,0,9,207,81,7,15,0,8,103,0,8,39,0,9,175,0,8,7,0,8,135,0,8,71,0,9,239,80,7,9,0,8,95,0,8,31,0,9,159,84,7,99,0,8,127,0,8,63,0,9,223,82,7,27,0,8,111,0,8,47,0,9,191,0,8,15,0,8,143,0,8,79,0,9,255],tt=[80,5,1,87,5,257,83,5,17,91,5,4097,81,5,5,89,5,1025,85,5,65,93,5,16385,80,5,3,88,5,513,84,5,33,92,5,8193,82,5,9,90,5,2049,86,5,129,192,5,24577,80,5,2,87,5,385,83,5,25,91,5,6145,81,5,7,89,5,1537,85,5,97,93,5,24577,80,5,4,88,5,769,84,5,49,92,5,12289,82,5,13,90,5,3073,86,5,193,192,5,24577],nt=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],rt=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,112,112],st=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],it=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];function ot(){let e,t,n,r,s,i;function o(e,t,o,c,f,a,l,u,w,h,d){let p,y,m,b,g,k,v,S,z,C,x,_,A,I,D;C=0,g=o;do{n[e[t+C]]++,C++,g--}while(0!==g);if(n[0]==o)return l[0]=-1,u[0]=0,0;for(S=u[0],k=1;15>=k&&0===n[k];k++);for(v=k,k>S&&(S=k),g=15;0!==g&&0===n[g];g--);for(m=g,S>g&&(S=g),u[0]=S,I=1<<k;g>k;k++,I<<=1)if(0>(I-=n[k]))return Ye;if(0>(I-=n[g]))return Ye;for(n[g]+=I,i[1]=k=0,C=1,A=2;0!=--g;)i[A]=k+=n[C],A++,C++;g=0,C=0;do{0!==(k=e[t+C])&&(d[i[k]++]=g),C++}while(++g<o);for(o=i[m],i[0]=g=0,C=0,b=-1,_=-S,s[0]=0,x=0,D=0;m>=v;v++)for(p=n[v];0!=p--;){for(;v>_+S;){if(b++,_+=S,D=m-_,D=D>S?S:D,(y=1<<(k=v-_))>p+1&&(y-=p+1,A=v,D>k))for(;++k<D&&(y<<=1)>n[++A];)y-=n[A];if(D=1<<k,h[0]+D>1440)return Ye;s[b]=x=h[0],h[0]+=D,0!==b?(i[b]=g,r[0]=k,r[1]=S,k=g>>>_-S,r[2]=x-s[b-1]-k,w.set(r,3*(s[b-1]+k))):l[0]=x}for(r[1]=v-_,o>C?d[C]<c?(r[0]=256>d[C]?0:96,r[2]=d[C++]):(r[0]=a[d[C]-c]+16+64,r[2]=f[d[C++]-c]):r[0]=192,y=1<<v-_,k=g>>>_;D>k;k+=y)w.set(r,3*(x+k));for(k=1<<v-1;0!=(g&k);k>>>=1)g^=k;for(g^=k,z=(1<<_)-1;(g&z)!=i[b];)b--,_-=S,z=(1<<_)-1}return 0!==I&&1!=m?Ze:0}function c(o){let c;for(e||(e=[],t=[],n=new f(16),r=[],s=new f(15),i=new f(16)),t.length<o&&(t=[]),c=0;o>c;c++)t[c]=0;for(c=0;16>c;c++)n[c]=0;for(c=0;3>c;c++)r[c]=0;s.set(n.subarray(0,15),0),i.set(n.subarray(0,16),0)}this.st=(n,r,s,i,f)=>{let a;return c(19),e[0]=0,a=o(n,0,19,19,null,null,s,r,i,e,t),a==Ye?f.Le="oversubscribed dynamic bit lengths tree":a!=Ze&&0!==r[0]||(f.Le="incomplete dynamic bit lengths tree",a=Ye),a},this.it=(n,r,s,i,f,a,l,u,w)=>{let h;return c(288),e[0]=0,h=o(s,0,n,257,nt,rt,a,i,u,e,t),0!=h||0===i[0]?(h==Ye?w.Le="oversubscribed literal/length tree":-4!=h&&(w.Le="incomplete literal/length tree",h=Ye),h):(c(288),h=o(s,n,r,0,st,it,l,f,u,e,t),0!=h||0===f[0]&&n>257?(h==Ye?w.Le="oversubscribed distance tree":h==Ze?(w.Le="incomplete distance tree",h=Ye):-4!=h&&(w.Le="empty distance tree with lengths",h=Ye),h):0)}}function ct(){const e=this;let t,n,r,s,i=0,o=0,c=0,f=0,a=0,l=0,u=0,w=0,h=0,d=0;function p(e,t,n,r,s,i,o,c){let f,a,l,u,w,h,d,p,y,m,b,g,k,v,S,z;d=c.nt,p=c.We,w=o.ot,h=o.ct,y=o.write,m=y<o.read?o.read-y-1:o.end-y,b=$e[e],g=$e[t];do{for(;20>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(f=w&b,a=n,l=r,z=3*(l+f),0!==(u=a[z]))for(;;){if(w>>=a[z+1],h-=a[z+1],0!=(16&u)){for(u&=15,k=a[z+2]+(w&$e[u]),w>>=u,h-=u;15>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;for(f=w&g,a=s,l=i,z=3*(l+f),u=a[z];;){if(w>>=a[z+1],h-=a[z+1],0!=(16&u)){for(u&=15;u>h;)p--,w|=(255&c.ft(d++))<<h,h+=8;if(v=a[z+2]+(w&$e[u]),w>>=u,h-=u,m-=k,v>y){S=y-v;do{S+=o.end}while(0>S);if(u=o.end-S,k>u){if(k-=u,y-S>0&&u>y-S)do{o.lt[y++]=o.lt[S++]}while(0!=--u);else o.lt.set(o.lt.subarray(S,S+u),y),y+=u,S+=u,u=0;S=0}}else S=y-v,y-S>0&&2>y-S?(o.lt[y++]=o.lt[S++],o.lt[y++]=o.lt[S++],k-=2):(o.lt.set(o.lt.subarray(S,S+2),y),y+=2,S+=2,k-=2);if(y-S>0&&k>y-S)do{o.lt[y++]=o.lt[S++]}while(0!=--k);else o.lt.set(o.lt.subarray(S,S+k),y),y+=k,S+=k,k=0;break}if(0!=(64&u))return c.Le="invalid distance code",k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,Ye;f+=a[z+2],f+=w&$e[u],z=3*(l+f),u=a[z]}break}if(0!=(64&u))return 0!=(32&u)?(k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,1):(c.Le="invalid literal/length code",k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,Ye);if(f+=a[z+2],f+=w&$e[u],z=3*(l+f),0===(u=a[z])){w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--;break}}else w>>=a[z+1],h-=a[z+1],o.lt[y++]=a[z+2],m--}while(m>=258&&p>=10);return k=c.We-p,k=k>h>>3?h>>3:k,p+=k,d-=k,h-=k<<3,o.ot=w,o.ct=h,c.We=p,c.qe+=d-c.nt,c.nt=d,o.write=y,0}e.init=(e,i,o,c,f,a)=>{t=0,u=e,w=i,r=o,h=c,s=f,d=a,n=null},e.ut=(e,y,m)=>{let b,g,k,v,S,z,C,x=0,_=0,A=0;for(A=y.nt,v=y.We,x=e.ot,_=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S;;)switch(t){case 0:if(z>=258&&v>=10&&(e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,m=p(u,w,r,h,s,d,e,y),A=y.nt,v=y.We,x=e.ot,_=e.ct,S=e.write,z=S<e.read?e.read-S-1:e.end-S,0!=m)){t=1==m?7:9;break}c=u,n=r,o=h,t=1;case 1:for(b=c;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}if(g=3*(o+(x&$e[b])),x>>>=n[g+1],_-=n[g+1],k=n[g],0===k){f=n[g+2],t=6;break}if(0!=(16&k)){a=15&k,i=n[g+2],t=2;break}if(0==(64&k)){c=k,o=g/3+n[g+2];break}if(0!=(32&k)){t=7;break}return t=9,y.Le="invalid literal/length code",m=Ye,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 2:for(b=a;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}i+=x&$e[b],x>>=b,_-=b,c=w,n=s,o=d,t=3;case 3:for(b=c;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}if(g=3*(o+(x&$e[b])),x>>=n[g+1],_-=n[g+1],k=n[g],0!=(16&k)){a=15&k,l=n[g+2],t=4;break}if(0==(64&k)){c=k,o=g/3+n[g+2];break}return t=9,y.Le="invalid distance code",m=Ye,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 4:for(b=a;b>_;){if(0===v)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,v--,x|=(255&y.ft(A++))<<_,_+=8}l+=x&$e[b],x>>=b,_-=b,t=5;case 5:for(C=S-l;0>C;)C+=e.end;for(;0!==i;){if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);e.lt[S++]=e.lt[C++],z--,C==e.end&&(C=0),i--}t=0;break;case 6:if(0===z&&(S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z&&(e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,S==e.end&&0!==e.read&&(S=0,z=S<e.read?e.read-S-1:e.end-S),0===z)))return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);m=0,e.lt[S++]=f,z--,t=0;break;case 7:if(_>7&&(_-=8,v++,A--),e.write=S,m=e.wt(y,m),S=e.write,z=S<e.read?e.read-S-1:e.end-S,e.read!=e.write)return e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);t=8;case 8:return m=1,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);case 9:return m=Ye,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m);default:return m=Xe,e.ot=x,e.ct=_,y.We=v,y.qe+=A-y.nt,y.nt=A,e.write=S,e.wt(y,m)}},e.ht=()=>{}}ot.dt=(e,t,n,r)=>(e[0]=9,t[0]=5,n[0]=et,r[0]=tt,0);const ft=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];function at(e,t){const n=this;let r,s=0,o=0,c=0,a=0;const l=[0],u=[0],w=new ct;let h=0,d=new f(4320);const p=new ot;n.ct=0,n.ot=0,n.lt=new i(t),n.end=t,n.read=0,n.write=0,n.reset=(e,t)=>{t&&(t[0]=0),6==s&&w.ht(e),s=0,n.ct=0,n.ot=0,n.read=n.write=0},n.reset(e,null),n.wt=(e,t)=>{let r,s,i;return s=e.rt,i=n.read,r=(i>n.write?n.end:n.write)-i,r>e.tt&&(r=e.tt),0!==r&&t==Ze&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r,i==n.end&&(i=0,n.write==n.end&&(n.write=0),r=n.write-i,r>e.tt&&(r=e.tt),0!==r&&t==Ze&&(t=0),e.tt-=r,e.Ge+=r,e.$e.set(n.lt.subarray(i,i+r),s),s+=r,i+=r),e.rt=s,n.read=i,t},n.ut=(e,t)=>{let i,f,y,m,b,g,k,v;for(m=e.nt,b=e.We,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g;;){let S,z,C,x,_,A,I,D;switch(s){case 0:for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}switch(i=7&f,h=1&i,i>>>1){case 0:f>>>=3,y-=3,i=7&y,f>>>=i,y-=i,s=1;break;case 1:S=[],z=[],C=[[]],x=[[]],ot.dt(S,z,C,x),w.init(S[0],z[0],C[0],0,x[0],0),f>>>=3,y-=3,s=6;break;case 2:f>>>=3,y-=3,s=3;break;case 3:return f>>>=3,y-=3,s=9,e.Le="invalid block type",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}break;case 1:for(;32>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if((~f>>>16&65535)!=(65535&f))return s=9,e.Le="invalid stored block lengths",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);o=65535&f,f=y=0,s=0!==o?2:0!==h?7:0;break;case 2:if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(0===k&&(g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k&&(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,g==n.end&&0!==n.read&&(g=0,k=g<n.read?n.read-g-1:n.end-g),0===k)))return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(t=0,i=o,i>b&&(i=b),i>k&&(i=k),n.lt.set(e.je(m,i),g),m+=i,b-=i,g+=i,k-=i,0!=(o-=i))break;s=0!==h?7:0;break;case 3:for(;14>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(c=i=16383&f,(31&i)>29||(i>>5&31)>29)return s=9,e.Le="too many length or distance symbols",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);if(i=258+(31&i)+(i>>5&31),!r||r.length<i)r=[];else for(v=0;i>v;v++)r[v]=0;f>>>=14,y-=14,a=0,s=4;case 4:for(;4+(c>>>10)>a;){for(;3>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}r[ft[a++]]=7&f,f>>>=3,y-=3}for(;19>a;)r[ft[a++]]=0;if(l[0]=7,i=p.st(r,l,u,d,e),0!=i)return(t=i)==Ye&&(r=null,s=9),n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);a=0,s=5;case 5:for(;i=c,258+(31&i)+(i>>5&31)>a;){let o,w;for(i=l[0];i>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(i=d[3*(u[0]+(f&$e[i]))+1],w=d[3*(u[0]+(f&$e[i]))+2],16>w)f>>>=i,y-=i,r[a++]=w;else{for(v=18==w?7:w-14,o=18==w?11:3;i+v>y;){if(0===b)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);t=0,b--,f|=(255&e.ft(m++))<<y,y+=8}if(f>>>=i,y-=i,o+=f&$e[v],f>>>=v,y-=v,v=a,i=c,v+o>258+(31&i)+(i>>5&31)||16==w&&1>v)return r=null,s=9,e.Le="invalid bit length repeat",t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w=16==w?r[v-1]:0;do{r[v++]=w}while(0!=--o);a=v}}if(u[0]=-1,_=[],A=[],I=[],D=[],_[0]=9,A[0]=6,i=c,i=p.it(257+(31&i),1+(i>>5&31),r,_,A,I,D,d,e),0!=i)return i==Ye&&(r=null,s=9),t=i,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);w.init(_[0],A[0],d,I[0],d,D[0]),s=6;case 6:if(n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,1!=(t=w.ut(n,e,t)))return n.wt(e,t);if(t=0,w.ht(e),m=e.nt,b=e.We,f=n.ot,y=n.ct,g=n.write,k=g<n.read?n.read-g-1:n.end-g,0===h){s=0;break}s=7;case 7:if(n.write=g,t=n.wt(e,t),g=n.write,k=g<n.read?n.read-g-1:n.end-g,n.read!=n.write)return n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);s=8;case 8:return t=1,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);case 9:return t=Ye,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t);default:return t=Xe,n.ot=f,n.ct=y,e.We=b,e.qe+=m-e.nt,e.nt=m,n.write=g,n.wt(e,t)}}},n.ht=e=>{n.reset(e,null),n.lt=null,d=null},n.yt=(e,t,r)=>{n.lt.set(e.subarray(t,t+r),0),n.read=n.write=r},n.bt=()=>1==s?1:0}const lt=13,ut=[0,0,255,255];function wt(){const e=this;function t(e){return e&&e.gt?(e.qe=e.Ge=0,e.Le=null,e.gt.mode=7,e.gt.kt.reset(e,null),0):Xe}e.mode=0,e.method=0,e.vt=[0],e.St=0,e.marker=0,e.zt=0,e.Ct=t=>(e.kt&&e.kt.ht(t),e.kt=null,0),e.xt=(n,r)=>(n.Le=null,e.kt=null,8>r||r>15?(e.Ct(n),Xe):(e.zt=r,n.gt.kt=new at(n,1<<r),t(n),0)),e._t=(e,t)=>{let n,r;if(!e||!e.gt||!e.et)return Xe;const s=e.gt;for(t=4==t?Ze:0,n=Ze;;)switch(s.mode){case 0:if(0===e.We)return n;if(n=t,e.We--,e.qe++,8!=(15&(s.method=e.ft(e.nt++)))){s.mode=lt,e.Le="unknown compression method",s.marker=5;break}if(8+(s.method>>4)>s.zt){s.mode=lt,e.Le="invalid win size",s.marker=5;break}s.mode=1;case 1:if(0===e.We)return n;if(n=t,e.We--,e.qe++,r=255&e.ft(e.nt++),((s.method<<8)+r)%31!=0){s.mode=lt,e.Le="incorrect header check",s.marker=5;break}if(0==(32&r)){s.mode=7;break}s.mode=2;case 2:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St=(255&e.ft(e.nt++))<<24&4278190080,s.mode=3;case 3:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St+=(255&e.ft(e.nt++))<<16&16711680,s.mode=4;case 4:if(0===e.We)return n;n=t,e.We--,e.qe++,s.St+=(255&e.ft(e.nt++))<<8&65280,s.mode=5;case 5:return 0===e.We?n:(n=t,e.We--,e.qe++,s.St+=255&e.ft(e.nt++),s.mode=6,2);case 6:return s.mode=lt,e.Le="need dictionary",s.marker=0,Xe;case 7:if(n=s.kt.ut(e,n),n==Ye){s.mode=lt,s.marker=0;break}if(0==n&&(n=t),1!=n)return n;n=t,s.kt.reset(e,s.vt),s.mode=12;case 12:return e.We=0,1;case lt:return Ye;default:return Xe}},e.At=(e,t,n)=>{let r=0,s=n;if(!e||!e.gt||6!=e.gt.mode)return Xe;const i=e.gt;return s<1<<i.zt||(s=(1<<i.zt)-1,r=n-s),i.kt.yt(t,r,s),i.mode=7,0},e.It=e=>{let n,r,s,i,o;if(!e||!e.gt)return Xe;const c=e.gt;if(c.mode!=lt&&(c.mode=lt,c.marker=0),0===(n=e.We))return Ze;for(r=e.nt,s=c.marker;0!==n&&4>s;)e.ft(r)==ut[s]?s++:s=0!==e.ft(r)?0:4-s,r++,n--;return e.qe+=r-e.nt,e.nt=r,e.We=n,c.marker=s,4!=s?Ye:(i=e.qe,o=e.Ge,t(e),e.qe=i,e.Ge=o,c.mode=7,0)},e.Dt=e=>e&&e.gt&&e.gt.kt?e.gt.kt.bt():Xe}function ht(){}function dt(e){const t=new ht,n=e&&e.chunkSize?r.floor(2*e.chunkSize):131072,o=new i(n);let c=!1;t.xt(),t.$e=o,this.append=(e,r)=>{const f=[];let a,l,u=0,w=0,h=0;if(0!==e.length){t.nt=0,t.et=e,t.We=e.length;do{if(t.rt=0,t.tt=n,0!==t.We||c||(t.nt=0,c=!0),a=t._t(0),c&&a===Ze){if(0!==t.We)throw new s("inflating: bad input")}else if(0!==a&&1!==a)throw new s("inflating: "+t.Le);if((c||1===a)&&t.We===e.length)throw new s("inflating: bad input");t.rt&&(t.rt===n?f.push(new i(o)):f.push(o.subarray(0,t.rt))),h+=t.rt,r&&t.nt>0&&t.nt!=u&&(r(t.nt),u=t.nt)}while(t.We>0||0===t.tt);return f.length>1?(l=new i(h),f.forEach((e=>{l.set(e,w),w+=e.length}))):l=f[0]?new i(f[0]):new i,l}},this.flush=()=>{t.Ct()}}ht.prototype={xt(e){const t=this;return t.gt=new wt,e||(e=15),t.gt.xt(t,e)},_t(e){const t=this;return t.gt?t.gt._t(t,e):Xe},Ct(){const e=this;if(!e.gt)return Xe;const t=e.gt.Ct(e);return e.gt=null,t},It(){const e=this;return e.gt?e.gt.It(e):Xe},At(e,t){const n=this;return n.gt?n.gt.At(n,e,t):Xe},ft(e){return this.et[e]},je(e,t){return this.et.subarray(e,e+t)}},self.initCodec=()=>{self.Deflate=Qe,self.Inflate=dt};\n'],{type:"text/javascript"}));e({workerScripts:{inflate:[t],deflate:[t]}})}(Fe),Fe({Deflate:function(e){const t=new v,n=(r=e&&e.chunkSize?e.chunkSize:65536)+5*(Math.floor(r/16383)+1);var r;const i=new Uint8Array(n);let a=e?e.level:-1;void 0===a&&(a=-1),t.deflateInit(a),t.next_out=i,this.append=function(e,r){let a,o,s=0,c=0,l=0;const d=[];if(e.length){t.next_in_index=0,t.next_in=e,t.avail_in=e.length;do{if(t.next_out_index=0,t.avail_out=n,a=t.deflate(0),0!=a)throw new Error("deflating: "+t.msg);t.next_out_index&&(t.next_out_index==n?d.push(new Uint8Array(i)):d.push(i.subarray(0,t.next_out_index))),l+=t.next_out_index,r&&t.next_in_index>0&&t.next_in_index!=s&&(r(t.next_in_index),s=t.next_in_index)}while(t.avail_in>0||0===t.avail_out);return d.length>1?(o=new Uint8Array(l),d.forEach((function(e){o.set(e,c),c+=e.length}))):o=d[0]?new Uint8Array(d[0]):new Uint8Array,o}},this.flush=function(){let e,r,a=0,o=0;const s=[];do{if(t.next_out_index=0,t.avail_out=n,e=t.deflate(4),1!=e&&0!=e)throw new Error("deflating: "+t.msg);n-t.avail_out>0&&s.push(i.slice(0,t.next_out_index)),o+=t.next_out_index}while(t.avail_in>0||0===t.avail_out);return t.deflateEnd(),r=new Uint8Array(o),s.forEach((function(e){r.set(e,a),a+=e.length})),r}},Inflate:function(e){const t=new de,n=e&&e.chunkSize?Math.floor(2*e.chunkSize):131072,r=new Uint8Array(n);let i=!1;t.inflateInit(),t.next_out=r,this.append=function(e,a){const o=[];let s,c,l=0,d=0,f=0;if(0!==e.length){t.next_in_index=0,t.next_in=e,t.avail_in=e.length;do{if(t.next_out_index=0,t.avail_out=n,0!==t.avail_in||i||(t.next_in_index=0,i=!0),s=t.inflate(0),i&&s===E){if(0!==t.avail_in)throw new Error("inflating: bad input")}else if(s!==_&&s!==k)throw new Error("inflating: "+t.msg);if((i||s===k)&&t.avail_in===e.length)throw new Error("inflating: bad input");t.next_out_index&&(t.next_out_index===n?o.push(new Uint8Array(r)):o.push(r.subarray(0,t.next_out_index))),f+=t.next_out_index,a&&t.next_in_index>0&&t.next_in_index!=l&&(a(t.next_in_index),l=t.next_in_index)}while(t.avail_in>0||0===t.avail_out);return o.length>1?(c=new Uint8Array(f),o.forEach((function(e){c.set(e,d),d+=e.length}))):c=o[0]?new Uint8Array(o[0]):new Uint8Array,c}},this.flush=function(){t.inflateEnd()}}}),t.BlobReader=On,t.BlobWriter=Cn,t.Data64URIReader=jn,t.Data64URIWriter=Dn,t.ERR_BAD_FORMAT=Ar,t.ERR_CENTRAL_DIRECTORY_NOT_FOUND=Dr,t.ERR_DUPLICATED_NAME=Qr,t.ERR_ENCRYPTED=Rr,t.ERR_EOCDR_LOCATOR_ZIP64_NOT_FOUND=jr,t.ERR_EOCDR_NOT_FOUND=zr,t.ERR_EOCDR_ZIP64_NOT_FOUND=Er,t.ERR_EXTRAFIELD_ZIP64_NOT_FOUND=Cr,t.ERR_HTTP_RANGE=yn,t.ERR_INVALID_COMMENT=ei,t.ERR_INVALID_ENCRYPTION_STRENGTH=ii,t.ERR_INVALID_ENTRY_COMMENT=ti,t.ERR_INVALID_ENTRY_NAME=ni,t.ERR_INVALID_EXTRAFIELD_DATA=oi,t.ERR_INVALID_EXTRAFIELD_TYPE=ai,t.ERR_INVALID_PASSWORD=Ge,t.ERR_INVALID_SIGNATURE=Xe,t.ERR_INVALID_VERSION=ri,t.ERR_ITERATOR_COMPLETED_TOO_SOON=wn,t.ERR_LOCAL_FILE_HEADER_NOT_FOUND=Or,t.ERR_SPLIT_ZIP_FILE=Wr,t.ERR_UNSUPPORTED_COMPRESSION=Fr,t.ERR_UNSUPPORTED_ENCRYPTION=Ur,t.ERR_UNSUPPORTED_FORMAT=si,t.HttpRangeReader=class extends Kn{constructor(e,t={}){t.useRangeHeader=!0,super(e,t)}},t.HttpReader=Kn,t.Reader=zn,t.SplitDataReader=Gn,t.SplitDataWriter=Xn,t.SplitZipReader=nr,t.SplitZipWriter=rr,t.TextReader=Rn,t.TextWriter=Un,t.Uint8ArrayReader=Yn,t.Uint8ArrayWriter=$n,t.Writer=En,t.ZipReader=Lr,t.ZipWriter=fi,t.configure=Fe,t.fs=Ai,t.getMimeType=function(e){return e&&Pe[e.split(".").pop().toLowerCase()]||"application/octet-stream"},t.initShimAsyncCodec=function(e,t={},n){return{Deflate:hn(e.Deflate,t.deflate,n),Inflate:hn(e.Inflate,t.inflate,n)}},t.terminateWorkers=function(){ln.forEach((e=>{pn(e),e.terminate()}))}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";const e=n(56);n(344);const t=n(218);function r(e){const t=e.split("\n").map((e=>{const t=e.split(/(?<=^[^=]+?)=/);if(2==t.length)return[t[0].trim(),t[1].trim()]})).filter((e=>e));let n=t.findIndex((e=>"g_language"==e[0].trim()));return n<0&&(t.push(["g_language",""]),n=t.length-1),t[n][1]="chinese_(traditional)",t.map((e=>e.join(" = "))).join("\n")}(()=>{const[n,i]=Array.from(document.querySelectorAll(".drop-zone")).map((e=>new t.DropZone(e))),a=Array.from(document.querySelectorAll(".action")),o=(document.querySelector("#s2t-input"),e=>{a.forEach((e=>e.classList.toggle("disabled",!n.file)))});n.onFileSelected.push(o),i.onFileSelected.push(o);const[s,c]=a;s.addEventListener("click",(async()=>{const t=new TransformStream,a=new Response(t.readable).blob(),o=new e.ZipWriter(t.writable);try{i.file?await o.add("User.cfg",new e.BlobReader(await async function(e){const t=await async function(e){return new Promise(((t,n)=>{let r=new FileReader;r.onload=e=>t(r.result),r.addEventListener("error",(()=>n(r.error))),r.readAsText(e)}))}(e);return function(e){for(var t=new Uint8Array(e.length),n=0;n<t.length;n++)t[n]=e.charCodeAt(n);return new Blob([t],{type:"text/plain"})}(r(t))}(i.file))):await o.add("User.cfg",new e.TextReader("g_language = chinese_(traditional)\n")),await o.add("data/Localization/chinese_(traditional)/global.ini",new e.BlobReader(n.file)),await o.close(),function(e,t){const n=document.createElement("a");document.body.appendChild(n);const r=window.URL.createObjectURL(e);n.href=r,n.download="SC_Localization.zip",n.click(),setTimeout((()=>{window.URL.revokeObjectURL(r),document.body.removeChild(n)}),0)}(await a)}catch(e){alert(`錯誤 ${e}`)}n.clear(),i.clear()})),c.addEventListener("click",(async()=>{const e=await window.showDirectoryPicker({mode:"readwrite"});await e.getFileHandle("StarCitizen_Launcher.exe",{create:!1}).then((async()=>{const t=await e.getFileHandle("User.cfg",{create:!0}),a=await t.getFile(),o=r(await a.text()),s=await t.createWritable({keepExistingData:!1});try{await s.write(o)}finally{await s.close()}const c=await e.getDirectoryHandle("data",{create:!0}),l=await c.getDirectoryHandle("Localization",{create:!0}),d=await l.getDirectoryHandle("chinese_(traditional)",{create:!0}),f=await d.getFileHandle("global.ini",{create:!0}),u=await f.createWritable({keepExistingData:!1});try{await u.write(n.file)}finally{await u.close()}n.clear(),i.clear(),alert("安裝完成!")})).catch((()=>{alert("未找到 StarCitizen_Launcher.exe 請確認選擇正確的資料夾")}))}))})();const i=(new Date).getFullYear();i>2023&&(document.querySelector("#year").textContent+=` - ${i}`)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,